import tkinter as tk
from tkinter import messagebox
from tkinter import ttk  # ComboBox için

# Tüm potansiyel satırları içeren rapor tabanı
rapor_taban = {
    "ZONE27": "",
    "ZONE1": "Tiroid normal boyutlarda, homojen dansitededir.",
    "ZONE2": "Kalp boyutları normal sınırlardadır.",
    "ZONE3": "MPA, RPA ve LPA normal kalibrededir.",
    "ZONE4": "Aorta root düzeyinde, arcusta ve desendan aorta düzeyinde normal kalibrededir.",
    "ZONE5": "Paratrakeal, prekarinal, subkarinal, prevasküler, subaortik, bilateral hiler kısa aksı patolojik sınıra ulaşan lenf nodu izlenmedi.",
    "ZONE6": "Trakea ve her iki ana bronş normal genişliktedir.",
    "ZONE7": "Akciğer parankim alanlarında kitle ya da infiltrasyon izlenmedi.",
    "ZONE8": "Bilateral plevral effüzyon saptanmadı.",
    "ZONE9": "Karaciğer sağ lobu kraniokaudal uzunluğu normal sınırlardadır. Konturları düzgün, parankim dansitesi normaldir.",
    "ZONE10": "Karaciğer parankiminde dansite farkı oluşturan fokal kitle lezyonu saptanmamıştır.",
    "ZONE11": "Hepatik ve portal venöz yapılar normal genişliktedir.",
    "ZONE12": "İntrahepatik safra yolları normal genişliktedir.",
    "ZONE13": "Common hepatic duct (CHD) ve Common bile duct (CBD, choledochus) normal kalibrededir.",
    "ZONE14": "Safra kesesi normal konum ve boyuttadır. Lümen içi patoloji izlenmedi.",
    "ZONE15": "Dalak normal konum ve boyuttadır. Parankimi homojendir.",
    "ZONE16": "Pankreas normal konum ve boyuttadır. Parankimi homojendir.",
    "ZONE17": "Bilateral sürrenal bezlerde patoloji saptanmamıştır.",
    "ZONE18": "Her iki böbrek normal lokalizasyondadır. Her iki böbreğin boyutları normal, konturları düzgün, toplayıcı sistemleri tabiidir.",
    "ZONE19": "Bilateral böbreklerde kistik ya da solid kitle lezyonu saptanmamıştır.",
    "ZONE20": "Abdominal ana vasküler yapıların çapları normal sınırlar içerisindedir.",
    "ZONE21": "Abdomende patolojik boyut artımı gösteren lenf nodülü izlenmemiştir.",
    "ZONE22": "Mesane konturları düzgün, duvar kalınlığı normaldir. Mesane lümeninde patoloji saptanmamıştır.",
    "ZONE23": "Prostat gland normal boyutlardadır.",
    "ZONE24": "Uterus orta hatta, antevert, anteflekstir. Boyutları normaldir. Myometrium homojendir. Endometrium 3 mm kalınlıktadır.",
    "ZONE25": "Her iki adnekste solid/kistik lezyon izlenmedi.",
    "ZONE26": "Vertebralarda dejeneratif değişiklikler mevcuttur."
}

# Tetkik türlerine göre rapor yapılandırması
rapor_turleri = {
    "Toraks": ["ZONE1", "ZONE2", "ZONE3", "ZONE4", "ZONE5", "ZONE6", "ZONE7", "ZONE8", "ZONE27"],
    "Erkek Tüm Abdomen": ["ZONE27", "ZONE1", "ZONE2", "ZONE3", "ZONE4", "ZONE5", "ZONE6", "ZONE7", "ZONE8",
                          "ZONE9", "ZONE10", "ZONE11", "ZONE12", "ZONE13", "ZONE14", "ZONE15",
                          "ZONE16", "ZONE17", "ZONE18", "ZONE19", "ZONE20", "ZONE21", "ZONE22",
                          "ZONE23", "ZONE26"],
    "Kadın Tüm Abdomen": ["ZONE27", "ZONE1", "ZONE2", "ZONE3", "ZONE4", "ZONE5", "ZONE6", "ZONE7", "ZONE8",
                          "ZONE9", "ZONE10", "ZONE11", "ZONE12", "ZONE13", "ZONE14", "ZONE15",
                          "ZONE16", "ZONE17", "ZONE18", "ZONE19", "ZONE20", "ZONE21", "ZONE22",
                          "ZONE24", "ZONE25", "ZONE26"],
    "Toraks Üst Abdomen": ["ZONE27", "ZONE1", "ZONE2", "ZONE3", "ZONE4", "ZONE5", "ZONE6", "ZONE7", "ZONE8",
                           "ZONE9", "ZONE10", "ZONE11", "ZONE12", "ZONE13", "ZONE14", "ZONE15",
                           "ZONE16", "ZONE17", "ZONE18", "ZONE19", "ZONE20", "ZONE21", "ZONE26"],
    "Üst Abdomen": ["ZONE9", "ZONE10", "ZONE11", "ZONE12", "ZONE13", "ZONE14", "ZONE15", "ZONE16",
                    "ZONE17", "ZONE18", "ZONE19", "ZONE20", "ZONE21", "ZONE26"]
}


def replace_zone_text(zone_label, new_text):
    """Final rapor metin alanında, belirtilen zone'un metnini yeni metinle değiştirir veya ekler."""
    metin = metin_alani.get('1.0', tk.END)
    lines = metin.strip().split('\n')

    # Flag to indicate if replacement was made
    replaced = False

    # Prepare the default zone text
    default_zone_text = rapor_taban.get(zone_label, "").strip()

    for i, line in enumerate(lines):
        if line.strip() == default_zone_text:
            if new_text.strip():
                # Replace the default text with new text
                lines[i] = new_text
            else:
                # Remove the line if new text is empty
                lines.pop(i)
            replaced = True
            break

    if not replaced and new_text.strip():
        # If the zone text was not found and new_text is not empty, insert it appropriately
        if zone_label == "ZONE27":
            # Find the index after the header (assuming header is 2 lines)
            # Adjust if your header is more or fewer lines
            for idx, line in enumerate(lines):
                if 'gerçekleştirilen incelemede;' in line:
                    insert_index = idx + 1
                    break
            else:
                # If the header line is not found, default to inserting at line 2
                insert_index = 2
            lines.insert(insert_index, new_text)
        else:
            # For other zones, append to the end
            lines.append(new_text)

    # Update the report text area
    metin_alani.delete('1.0', tk.END)
    metin_alani.insert(tk.END, '\n'.join(lines).strip())



def zone1_penceresi():
    pencere = tk.Toplevel()
    pencere.title("Zone 1: Tiroid Raporlama")
    pencere.geometry("1000x800")  # Pencere boyutu ayarlandı

    # Ana çerçeve (Scroll destekli)
    ana_frame = tk.Frame(pencere)
    ana_frame.pack(fill='both', expand=True)

    # Canvas ve Scrollbar oluşturma
    canvas = tk.Canvas(ana_frame)
    scrollbar = tk.Scrollbar(ana_frame, orient="vertical", command=canvas.yview)
    scrollable_frame = tk.Frame(canvas)

    scrollable_frame.bind(
        "<Configure>",
        lambda e: canvas.configure(
            scrollregion=canvas.bbox("all")
        )
    )

    canvas.create_window((0, 0), window=scrollable_frame, anchor='nw')
    canvas.configure(yscrollcommand=scrollbar.set)

    canvas.pack(side="left", fill="both", expand=True)
    scrollbar.pack(side="right", fill="y")

    # I. Tiroid Başlığı
    tk.Label(scrollable_frame, text="I. Tiroid", font=("Arial", 14, "bold")).pack(anchor='w', pady=5)

    # I. Tiroid Bölümü için bir frame oluşturuyoruz
    tiroid_frame = tk.Frame(scrollable_frame)
    tiroid_frame.pack(fill='x', padx=10)

    # Grid kolonlarının genişliklerini ayarlayalım
    tiroid_frame.columnconfigure(0, weight=1)
    tiroid_frame.columnconfigure(1, weight=1)

    ## Boyut Seçimi (Sütun 0)
    boyut_frame = tk.LabelFrame(tiroid_frame, text="Boyut", font=("Arial", 12))
    boyut_frame.grid(row=0, column=0, sticky='nsew', padx=10, pady=5)

    boyut_var = tk.StringVar(value="None")  # Başlangıç değeri ayarlandı
    tk.Radiobutton(boyut_frame, text="Tiroid bezi atrofik boyutlardadır.", variable=boyut_var,
                   value="Tiroid bezi atrofik boyutlardadır.").pack(anchor='w')
    tk.Radiobutton(boyut_frame, text="Tiroid bezi normal boyutlardadır.", variable=boyut_var,
                   value="Tiroid bezi normal boyutlardadır.").pack(anchor='w')
    tk.Radiobutton(boyut_frame, text="Tiroid bezi izlenemedi.", variable=boyut_var,
                   value="Tiroid bezi izlenemedi.").pack(anchor='w')
    tk.Radiobutton(boyut_frame, text="Tiroid bezi normalden büyüktür.", variable=boyut_var,
                   value="Tiroid bezi normalden büyüktür.").pack(anchor='w')

    # Retrosternal uzanım seçeneği
    retro_sag_var = tk.IntVar(value=0)
    retro_sol_var = tk.IntVar(value=0)
    retro_her_var = tk.IntVar(value=0)
    tk.Checkbutton(boyut_frame, text="Sağ lobu retrosternal uzanımlıdır.", variable=retro_sag_var).pack(anchor='w')
    tk.Checkbutton(boyut_frame, text="Sol lobu retrosternal uzanımlıdır.", variable=retro_sol_var).pack(anchor='w')
    tk.Checkbutton(boyut_frame, text="Her iki lobu retrosternal uzanımlıdır.", variable=retro_her_var).pack(anchor='w')

    ## Parankim ve Nodül Seçimi (Sütun 1)
    sag_frame = tk.Frame(tiroid_frame)
    sag_frame.grid(row=0, column=1, sticky='nsew', padx=10, pady=5)

    # Parankim Seçimi
    parankim_frame = tk.LabelFrame(sag_frame, text="Parankim", font=("Arial", 12))
    parankim_frame.pack(fill='x', pady=5)

    parankim_var = tk.StringVar(value="None")  # Başlangıç değeri ayarlandı
    tk.Radiobutton(parankim_frame, text="Parankimi homojendir.", variable=parankim_var,
                   value="Parankimi homojendir.").pack(anchor='w')
    tk.Radiobutton(parankim_frame, text="Parankimi heterojendir.", variable=parankim_var,
                   value="Parankimi heterojendir.").pack(anchor='w')

    # Nodül Seçimi
    nodul_frame = tk.LabelFrame(sag_frame, text="Nodül", font=("Arial", 12))
    nodul_frame.pack(fill='x', pady=5)

    # Nodül bilgisi olacaksa checkbox
    sag_nodul_var = tk.IntVar(value=0)
    sol_nodul_var = tk.IntVar(value=0)
    tk.Checkbutton(nodul_frame, text="Sağ lob", variable=sag_nodul_var).grid(row=0, column=0, padx=5, pady=5)
    tk.Checkbutton(nodul_frame, text="Sol lob", variable=sol_nodul_var).grid(row=1, column=0, padx=5, pady=5)

    # Nodül detayları için fonksiyon
    def nodul_detaylari(lob_var, row):
        pol_var = tk.StringVar(value="None")
        karakter_var = tk.StringVar(value="None")
        boyut_var = tk.StringVar()
        milimetrik_var = tk.IntVar(value=0)

        # Pol seçenekleri
        pol_frame = tk.Frame(nodul_frame)
        pol_frame.grid(row=row, column=1, padx=5, pady=5)
        tk.Radiobutton(pol_frame, text="Üst polde", variable=pol_var, value="üst polde").pack(anchor='w')
        tk.Radiobutton(pol_frame, text="Interpolar kesimde", variable=pol_var, value="interpolar kesimde").pack(anchor='w')
        tk.Radiobutton(pol_frame, text="Alt polde", variable=pol_var, value="alt polde").pack(anchor='w')
        tk.Radiobutton(pol_frame, text="Lobun tüm alanlarında", variable=pol_var, value="lobun tamamında").pack(anchor='w')

        # Karakter seçenekleri
        karakter_frame = tk.Frame(nodul_frame)
        karakter_frame.grid(row=row, column=2, padx=5, pady=5)
        tk.Radiobutton(karakter_frame, text="Hipodens", variable=karakter_var, value="hipodens").pack(anchor='w')
        tk.Radiobutton(karakter_frame, text="Kalsifiye", variable=karakter_var, value="kalsifiye").pack(anchor='w')
        tk.Radiobutton(karakter_frame, text="Hiperdens", variable=karakter_var, value="hiperdens").pack(anchor='w')
        tk.Radiobutton(karakter_frame, text="Heterojen dansitede", variable=karakter_var,
                       value="heterojen dansitede").pack(anchor='w')

        # Boyut ve milimetrik seçenekleri
        boyut_frame = tk.Frame(nodul_frame)
        boyut_frame.grid(row=row, column=3, padx=5, pady=5)
        tk.Entry(boyut_frame, textvariable=boyut_var, width=10).pack(side='left')
        tk.Label(boyut_frame, text="mm").pack(side='left')
        tk.Radiobutton(boyut_frame, text="Milimetrik", variable=milimetrik_var, value=1).pack(anchor='w')

        return pol_var, karakter_var, boyut_var, milimetrik_var

    # Sağ ve sol nodül detaylarını alalım
    sag_pol_var, sag_karakter_var, sag_boyut_var, sag_milimetrik_var = nodul_detaylari(sag_nodul_var, 0)
    sol_pol_var, sol_karakter_var, sol_boyut_var, sol_milimetrik_var = nodul_detaylari(sol_nodul_var, 1)

    # Bölümler arası ayrım çizgisi
    ttk.Separator(scrollable_frame, orient='horizontal').pack(fill='x', pady=10)

    ## II. Paratiroid Glandlar Bölümü ##
    tk.Label(scrollable_frame, text="II. Paratiroid Glandlar", font=("Arial", 14, "bold")).pack(anchor='w', pady=5)

    paratiroid_frame = tk.Frame(scrollable_frame)
    paratiroid_frame.pack(anchor='w', padx=20)

    # Paratiroid seçenekleri
    paratiroid_var1 = tk.IntVar(value=0)
    paratiroid_var2 = tk.IntVar(value=0)

    tk.Checkbutton(paratiroid_frame, text="Tiroid glandın her iki üst polünden başlayarak thymusa kadar olan mesafede parathyroid adenomu olarak değerlendirilebilecek solid lezyon ayırt edilmedi.",
                   variable=paratiroid_var1).pack(anchor='w', pady=2)

    tk.Checkbutton(paratiroid_frame, text="Tiroid gland", variable=paratiroid_var2).pack(anchor='w', pady=2)

    # İkinci seçeneğin detayları
    paratiroid_lob_var = tk.StringVar(value="None")
    paratiroid_lob_frame = tk.Frame(paratiroid_frame)
    paratiroid_lob_frame.pack(anchor='w', padx=20)

    tk.Radiobutton(paratiroid_lob_frame, text="sağ", variable=paratiroid_lob_var, value="sağ").pack(side='left')
    tk.Radiobutton(paratiroid_lob_frame, text="sol", variable=paratiroid_lob_var, value="sol").pack(side='left')

    tk.Label(paratiroid_lob_frame, text="lobu alt polü komşuluğunda ekstakapsüler yerleşimli").pack(side='left')

    # Boyut girişi
    paratiroid_boyut_var = tk.StringVar()
    tk.Entry(paratiroid_lob_frame, textvariable=paratiroid_boyut_var, width=10).pack(side='left')
    tk.Label(paratiroid_lob_frame, text="mm").pack(side='left')

    tk.Label(paratiroid_frame, text="solid lezyon izlenmiş olup hastanın parathormon seviyeleri ile değerlendirilmesi önerilir.").pack(anchor='w', padx=20)

    # İkinci seçeneğin detaylarının başlangıçta gizlenmesi
    def toggle_paratiroid_detay():
        if paratiroid_var2.get():
            for widget in paratiroid_lob_frame.winfo_children():
                widget.configure(state='normal')
        else:
            for widget in paratiroid_lob_frame.winfo_children():
                widget.configure(state='disabled')
            paratiroid_lob_var.set("None")
            paratiroid_boyut_var.set("")

    paratiroid_var2.trace_add('write', lambda *args: toggle_paratiroid_detay())
    toggle_paratiroid_detay()  # Başlangıçta detaylar gizli olsun

    # Bölümler arası ayrım çizgisi
    ttk.Separator(scrollable_frame, orient='horizontal').pack(fill='x', pady=10)

    ## III. Thymus Bölümü ##
    tk.Label(scrollable_frame, text="III. Thymus", font=("Arial", 14, "bold")).pack(anchor='w', pady=5)

    thymus_frame = tk.Frame(scrollable_frame)
    thymus_frame.pack(anchor='w', padx=20)

    thymus_var1 = tk.IntVar(value=0)
    thymus_var2 = tk.IntVar(value=0)
    thymus_var3 = tk.IntVar(value=0)
    thymus_var4 = tk.IntVar(value=0)
    thymus_var5 = tk.IntVar(value=0)

    # Birinci seçenek
    tk.Checkbutton(thymus_frame, text="Anterior mediastende thymic remnant izlendi.", variable=thymus_var1).pack(anchor='w', pady=2)

    # İkinci seçenek
    tk.Checkbutton(thymus_frame, text="Anterior mediastende normal boyutlu thymus dokusu izlendi.", variable=thymus_var2).pack(anchor='w', pady=2)

    # Üçüncü seçenek (tip A thymoma?)
    tk.Checkbutton(thymus_frame, text="Anterior mediastende en geniş yerinde", variable=thymus_var3).pack(anchor='w', pady=2)

    thymus3_detay_frame = tk.Frame(thymus_frame)
    thymus3_detay_frame.pack(anchor='w', padx=20)

    thymus3_boyut_var = tk.StringVar()
    tk.Entry(thymus3_detay_frame, textvariable=thymus3_boyut_var, width=10).pack(side='left')
    tk.Label(thymus3_detay_frame, text="mm boyutlarda, konturları").pack(side='left')

    thymus3_kontur_var = tk.StringVar(value="None")
    tk.Radiobutton(thymus3_detay_frame, text="konveks", variable=thymus3_kontur_var, value="konveks").pack(side='left')
    tk.Radiobutton(thymus3_detay_frame, text="lobule", variable=thymus3_kontur_var, value="lobule").pack(side='left')

    tk.Label(thymus_frame, text="yumuşak doku lezyonu izlendi (tip A thymoma?).").pack(anchor='w', padx=20)

    # Dördüncü seçenek (tip B thymoma?)
    tk.Checkbutton(thymus_frame, text="Anterior mediastende en geniş yerinde", variable=thymus_var4).pack(anchor='w', pady=2)

    thymus4_detay_frame = tk.Frame(thymus_frame)
    thymus4_detay_frame.pack(anchor='w', padx=20)

    thymus4_boyut_var = tk.StringVar()
    tk.Entry(thymus4_detay_frame, textvariable=thymus4_boyut_var, width=10).pack(side='left')
    tk.Label(thymus4_detay_frame, text="mm boyutlarda, kalsifikasyon içeren yumuşak doku lezyonu izlendi (tip B thymoma?).").pack(side='left')

    # Beşinci seçenek (tip C thymoma?)
    tk.Checkbutton(thymus_frame, text="Anterior mediastende en geniş yerinde", variable=thymus_var5).pack(anchor='w', pady=2)

    thymus5_detay_frame = tk.Frame(thymus_frame)
    thymus5_detay_frame.pack(anchor='w', padx=20)

    thymus5_boyut_var = tk.StringVar()
    tk.Entry(thymus5_detay_frame, textvariable=thymus5_boyut_var, width=10).pack(side='left')
    tk.Label(thymus5_detay_frame, text="mm boyutlarda,").pack(side='left')

    thymus5_inv_var = tk.StringVar(value="None")
    tk.Radiobutton(thymus5_detay_frame, text="mediastinal yağlı dokuya", variable=thymus5_inv_var, value="mediastinal yağlı dokuya").pack(side='left')
    tk.Radiobutton(thymus5_detay_frame, text="aortaya", variable=thymus5_inv_var, value="aortaya").pack(side='left')

    tk.Label(thymus_frame, text="invaze yumuşak doku lezyonu izlendi (tip C thymoma?).").pack(anchor='w', padx=20)

    # Detay alanlarının başlangıçta gizlenmesi
    def toggle_thymus3_detay():
        if thymus_var3.get():
            for widget in thymus3_detay_frame.winfo_children():
                widget.configure(state='normal')
        else:
            for widget in thymus3_detay_frame.winfo_children():
                widget.configure(state='disabled')
            thymus3_boyut_var.set("")
            thymus3_kontur_var.set("None")

    def toggle_thymus4_detay():
        if thymus_var4.get():
            for widget in thymus4_detay_frame.winfo_children():
                widget.configure(state='normal')
        else:
            for widget in thymus4_detay_frame.winfo_children():
                widget.configure(state='disabled')
            thymus4_boyut_var.set("")

    def toggle_thymus5_detay():
        if thymus_var5.get():
            for widget in thymus5_detay_frame.winfo_children():
                widget.configure(state='normal')
        else:
            for widget in thymus5_detay_frame.winfo_children():
                widget.configure(state='disabled')
            thymus5_boyut_var.set("")
            thymus5_inv_var.set("None")

    thymus_var3.trace_add('write', lambda *args: toggle_thymus3_detay())
    thymus_var4.trace_add('write', lambda *args: toggle_thymus4_detay())
    thymus_var5.trace_add('write', lambda *args: toggle_thymus5_detay())

    toggle_thymus3_detay()
    toggle_thymus4_detay()
    toggle_thymus5_detay()

    # En altta butonları eklemek için yeni bir çerçeve (ana pencerenin dışında)
    buton_frame = tk.Frame(pencere)
    buton_frame.pack(side='bottom', pady=10)

    # KAYDET ve KAPAT butonları
    def metin_toplama_kutucugu_goster():
        metin_toplama_kutucugu = tk.Toplevel()
        metin_toplama_kutucugu.title("Metin Toplama Kutucuğu")
        metin_toplama_kutucugu.geometry("800x600+800+500")  # Daha büyük bir pencere

        metin_toplama_kutucugu_text = tk.Text(metin_toplama_kutucugu, wrap=tk.WORD)
        metin_toplama_kutucugu_text.pack(expand=True, fill='both')

        # Metin Oluşturma

        # Her bölüm için ayrı cümle listeleri oluşturuyoruz
        tiroid_cumleleri = []
        paratiroid_cumleleri = []
        thymus_cumleleri = []

        # I. Tiroid Bölümü
        boyut = boyut_var.get()
        parankim = parankim_var.get()
        tiroid_cumleleri.extend([boyut, parankim])

        # Retrosternal uzanım ekle
        if retro_sag_var.get():
            tiroid_cumleleri.append("Sağ lobu retrosternal uzanımlıdır.")
        if retro_sol_var.get():
            tiroid_cumleleri.append("Sol lobu retrosternal uzanımlıdır.")
        if retro_her_var.get():
            tiroid_cumleleri.append("Her iki lobu retrosternal uzanımlıdır.")

        # Nodül bilgisi
        nodul_cumleleri = []

        if sag_nodul_var.get():
            sag_cumle = "Sağ lobda"
            pol = sag_pol_var.get()
            karakter = sag_karakter_var.get()
            boyut = sag_boyut_var.get()
            milimetrik = sag_milimetrik_var.get()

            if pol != "None":
                sag_cumle += f" {pol}"
            if karakter != "None":
                sag_cumle += f" {karakter}"
            if boyut:
                if 'x' in boyut.lower() or '×' in boyut.lower():
                    sag_cumle += f" {boyut} mm boyutlarında"
                else:
                    sag_cumle += f" {boyut} mm çapında"
            elif milimetrik:
                sag_cumle += " milimetrik boyutlarda"
            sag_cumle += " nodül izlendi."
            nodul_cumleleri.append(sag_cumle)

        if sol_nodul_var.get():
            sol_cumle = "Sol lobda"
            pol = sol_pol_var.get()
            karakter = sol_karakter_var.get()
            boyut = sol_boyut_var.get()
            milimetrik = sol_milimetrik_var.get()

            if pol != "None":
                sol_cumle += f" {pol}"
            if karakter != "None":
                sol_cumle += f" {karakter}"
            if boyut:
                if 'x' in boyut.lower() or '×' in boyut.lower():
                    sol_cumle += f" {boyut} mm boyutlarında"
                else:
                    sol_cumle += f" {boyut} mm çapında"
            elif milimetrik:
                sol_cumle += " milimetrik boyutlarda"
            sol_cumle += " nodül izlendi."
            nodul_cumleleri.append(sol_cumle)

        if nodul_cumleleri:
            tiroid_cumleleri.extend(nodul_cumleleri)

        # II. Paratiroid Glandlar Bölümü
        if paratiroid_var1.get():
            paratiroid_cumleleri.append(
                "Tiroid glandın her iki üst polünden başlayarak thymusa kadar olan mesafede parathyroid adenomu olarak değerlendirilebilecek solid lezyon ayırt edilmedi.")

        if paratiroid_var2.get():
            if paratiroid_lob_var.get() != "None":
                paratiroid_cumle = f"Tiroid gland {paratiroid_lob_var.get()} lobu alt polü komşuluğunda ekstakapsüler yerleşimli"
                boyut = paratiroid_boyut_var.get()
                if boyut:
                    if 'x' in boyut.lower() or '×' in boyut.lower():
                        paratiroid_cumle += f" {boyut} mm boyutlarında"
                    else:
                        paratiroid_cumle += f" {boyut} mm çapında"
                paratiroid_cumle += " solid lezyon izlenmiş olup hastanın parathormon seviyeleri ile değerlendirilmesi önerilir."
                paratiroid_cumleleri.append(paratiroid_cumle)

        # III. Thymus Bölümü
        if thymus_var1.get():
            thymus_cumleleri.append("Anterior mediastende thymic remnant izlendi.")
        if thymus_var2.get():
            thymus_cumleleri.append("Anterior mediastende normal boyutlu thymus dokusu izlendi.")
        if thymus_var3.get():
            thymus3_cumle = "Anterior mediastende en geniş yerinde"
            boyut = thymus3_boyut_var.get()
            if boyut:
                thymus3_cumle += f" {boyut} mm boyutlarda,"
            else:
                thymus3_cumle += " _______ mm boyutlarda,"
            if thymus3_kontur_var.get() != "None":
                thymus3_cumle += f" konturları {thymus3_kontur_var.get()}"
            thymus3_cumle += " yumuşak doku lezyonu izlendi (tip A thymoma?)."
            thymus_cumleleri.append(thymus3_cumle)
        if thymus_var4.get():
            thymus4_cumle = "Anterior mediastende en geniş yerinde"
            boyut = thymus4_boyut_var.get()
            if boyut:
                thymus4_cumle += f" {boyut} mm boyutlarda,"
            else:
                thymus4_cumle += " _______ mm boyutlarda,"
            thymus4_cumle += " kalsifikasyon içeren yumuşak doku lezyonu izlendi (tip B thymoma?)."
            thymus_cumleleri.append(thymus4_cumle)
        if thymus_var5.get():
            thymus5_cumle = "Anterior mediastende en geniş yerinde"
            boyut = thymus5_boyut_var.get()
            if boyut:
                thymus5_cumle += f" {boyut} mm boyutlarda,"
            else:
                thymus5_cumle += " _______ mm boyutlarda,"
            if thymus5_inv_var.get() != "None":
                thymus5_cumle += f" {thymus5_inv_var.get()} invaze"
            thymus5_cumle += " yumuşak doku lezyonu izlendi (tip C thymoma?)."
            thymus_cumleleri.append(thymus5_cumle)

        # Her bölümün cümlelerini birleştiriyoruz
        final_metin_list = []

        if tiroid_cumleleri:
            tiroid_metin = " ".join([c for c in tiroid_cumleleri if c and c != "None"])
            final_metin_list.append(tiroid_metin)

        if paratiroid_cumleleri:
            paratiroid_metin = " ".join([c for c in paratiroid_cumleleri if c and c != "None"])
            final_metin_list.append(paratiroid_metin)

        if thymus_cumleleri:
            thymus_metin = " ".join([c for c in thymus_cumleleri if c and c != "None"])
            final_metin_list.append(thymus_metin)

        # Tüm bölümleri satır atlayarak birleştiriyoruz
        final_metin = "\n".join(final_metin_list)

        metin_toplama_kutucugu_text.insert(tk.END, final_metin + "\n")

        # RAPORA EKLE Butonu
        def rapora_ekle():
            metin = metin_toplama_kutucugu_text.get('1.0', tk.END).strip()
            replace_zone_text('ZONE1', metin)
            metin_toplama_kutucugu.destroy()
            pencere.destroy()

        tk.Button(metin_toplama_kutucugu, text="RAPORA EKLE", command=rapora_ekle).pack(pady=5)

    tk.Button(buton_frame, text="KAYDET", command=metin_toplama_kutucugu_goster).pack(side='left', padx=10)
    tk.Button(buton_frame, text="KAPAT", command=pencere.destroy).pack(side='left', padx=10)


def zone2_penceresi():
    pencere = tk.Toplevel()
    pencere.title("Zone 2: Kardiyak Raporlama")
    pencere.state('zoomed')  # Pencere tam ekran açılır

    # Ana çerçeve
    ana_frame = tk.Frame(pencere)
    ana_frame.pack(fill='both', expand=True)

    # Boyut ve Atherosklerosis alanları aynı satırda yan yana
    ust_frame = tk.Frame(ana_frame)
    ust_frame.pack(fill='x', padx=10, pady=10)

    # Boyut Bölümü
    boyut_frame = tk.LabelFrame(ust_frame, text="Boyut", font=("Arial", 12))
    boyut_frame.grid(row=0, column=0, sticky='nsew', padx=10, pady=5)

    boyut_var = tk.StringVar(value="Kardiyotorasik oran normaldir.")

    tk.Radiobutton(boyut_frame, text="Kardiyotorasik oran normaldir.", variable=boyut_var,
                   value="Kardiyotorasik oran normaldir.").pack(anchor='w')
    tk.Radiobutton(boyut_frame, text="Kardiyotorasik oran 0.55'tir", variable=boyut_var,
                   value="Kardiyotorasik oran 0.55'tir.").pack(anchor='w')
    tk.Radiobutton(boyut_frame, text="Kardiyotorasik oran artmıştır.", variable=boyut_var,
                   value="Kardiyotorasik oran artmıştır.").pack(anchor='w')

    # Dilatasyon seçenekleri
    dilatasyon_var = tk.StringVar(value="None")
    dilatasyon_frame = tk.Frame(boyut_frame)
    dilatasyon_frame.pack(anchor='w', padx=20)
    dilatasyon_options = [
        ("Ek veri girilmeyecek.", "Ek veri girilmeyecek"),
        ("Biatriyal dilatasyon izlendi.", "Biatriyal dilatasyon izlendi."),
        ("LA dilatedir.", "LA dilatedir."),
        ("LV belirginleşmiştir.", "LV belirginleşmiştir."),
        ("RA dilatedir.", "RA dilatedir."),
        ("RV belirginleşmiştir.", "RV belirginleşmiştir."),
        ("Sol kalp boşlukları belirgindir.", "Sol kalp boşlukları belirgindir."),
        ("Sağ kalp boşlukları belirgindir.", "Sağ kalp boşlukları belirgindir.")
    ]
    dilatasyon_rbs = []
    for text, value in dilatasyon_options:
        rb = tk.Radiobutton(dilatasyon_frame, text=text, variable=dilatasyon_var, value=value, state='disabled')
        rb.pack(anchor='w')
        dilatasyon_rbs.append(rb)

    def boyut_var_changed(*args):
        if boyut_var.get() == "Kardiyotorasik oran artmıştır.":
            # Radiobuttonları aktif hale getir
            for rb in dilatasyon_rbs:
                rb.config(state='normal')
        else:
            # Radiobuttonları deaktif hale getir ve seçimi temizle
            for rb in dilatasyon_rbs:
                rb.config(state='disabled')
            dilatasyon_var.set("None")

    boyut_var.trace_add('write', boyut_var_changed)

    # Atherosklerosis Bölümü
    athero_frame = tk.LabelFrame(ust_frame, text="Atherosklerosis", font=("Arial", 12))
    athero_frame.grid(row=0, column=1, sticky='nsew', padx=10, pady=5)

    # Checkboxlar ve segmental/non-segmental radiobuttonlar
    athero_vars = {}
    segment_vars = {}
    for i, artery in enumerate(["Tüm koroner arterlerde", "LAD trasesinde", "Cx trasesinde", "RCA trasesinde"]):
        var = tk.IntVar(value=0)
        chk = tk.Checkbutton(athero_frame, text=artery, variable=var)
        chk.grid(row=i, column=0, sticky='w')
        athero_vars[artery] = var

        # Segmental/non-segmental radiobuttonlar
        seg_var = tk.StringVar(value="segmental")
        segment_vars[artery] = seg_var
        rb1 = tk.Radiobutton(athero_frame, text="segmental", variable=seg_var, value="segmental", state='disabled')
        rb2 = tk.Radiobutton(athero_frame, text="non-segmental", variable=seg_var, value="non-segmental",
                             state='disabled')
        rb1.grid(row=i, column=1, sticky='w')
        rb2.grid(row=i, column=2, sticky='w')

        # "kalsifiye plaklar izlendi." metnini ekliyoruz
        tk.Label(athero_frame, text="kalsifiye plaklar izlendi.").grid(row=i, column=3, sticky='w')

        def make_segment_active(var=var, rb1=rb1, rb2=rb2, seg_var=seg_var):
            if var.get():
                rb1.config(state='normal')
                rb2.config(state='normal')
            else:
                rb1.config(state='disabled')
                rb2.config(state='disabled')
                seg_var.set("segmental")

        var.trace_add('write',
                      lambda *args, var=var, rb1=rb1, rb2=rb2, seg_var=seg_var: make_segment_active(var, rb1, rb2,
                                                                                                    seg_var))

    # CABG Checkboxes
    cabg_vars = {}
    cabg_options = [
        "Sternotomi onarımına ait metalik dansitede sütür materyalleri izlendi.",
        "LAD - LIMA CABG bulguları izlendi.",
        "Aorta - Cx CABG izlendi.",
        "RCA - RIMA CABG izlendi.",
        "Aorta - Diagonal arter CABG izlendi.",
        "Aorta - obtuse marginal CABG izlendi."
    ]

    for j, text in enumerate(cabg_options):
        var = tk.IntVar(value=0)
        chk = tk.Checkbutton(athero_frame, text=text, variable=var)
        chk.grid(row=i + 2 + j, column=0, columnspan=4, sticky='w', pady=2)
        cabg_vars[text] = var

    for i, artery in enumerate(["Tüm koroner arterlerde", "LAD trasesinde", "Cx trasesinde", "RCA trasesinde"]):
        var = tk.IntVar(value=0)
        chk = tk.Checkbutton(athero_frame, text=artery, variable=var)
        chk.grid(row=i, column=0, sticky='w')
        athero_vars[artery] = var

        # Segmental/non-segmental radiobuttonlar
        seg_var = tk.StringVar(value="segmental")
        segment_vars[artery] = seg_var
        rb1 = tk.Radiobutton(athero_frame, text="segmental", variable=seg_var, value="segmental", state='disabled')
        rb2 = tk.Radiobutton(athero_frame, text="non-segmental", variable=seg_var, value="non-segmental",
                             state='disabled')
        rb1.grid(row=i, column=1, sticky='w')
        rb2.grid(row=i, column=2, sticky='w')

        # "kalsifiye plaklar izlendi." metnini ekliyoruz
        tk.Label(athero_frame, text="kalsifiye plaklar izlendi.").grid(row=i, column=3, sticky='w')

        def make_segment_active(var=var, rb1=rb1, rb2=rb2, seg_var=seg_var):
            if var.get():
                rb1.config(state='normal')
                rb2.config(state='normal')
            else:
                rb1.config(state='disabled')
                rb2.config(state='disabled')
                seg_var.set("segmental")

        var.trace_add('write',
                      lambda *args, var=var, rb1=rb1, rb2=rb2, seg_var=seg_var: make_segment_active(var, rb1, rb2,
                                                                                                    seg_var))

    # Kapak Kalsifikasyonu ve CCD alanları aynı satırda yan yana
    orta_frame = tk.Frame(ana_frame)
    orta_frame.pack(fill='x', padx=10, pady=10)

    # Kapak Kalsifikasyonu Bölümü
    kapak_frame = tk.LabelFrame(orta_frame, text="Kapak Kalsifikasyonu", font=("Arial", 12))
    kapak_frame.grid(row=0, column=0, sticky='nsew', padx=10, pady=5)

    # AoV seçenekleri
    aov_var = tk.IntVar(value=0)
    aov_chk = tk.Checkbutton(kapak_frame, text="AoV düzeyinde", variable=aov_var)
    aov_chk.grid(row=0, column=0, sticky='w')

    aov_options = [
        ("annulusta", "annulusta"),
        ("leafletler düzeyinde", "leafletler düzeyinde")
    ]
    aov_option_vars = {}
    for i, (text, value) in enumerate(aov_options):
        option_var = tk.IntVar(value=0)
        chk = tk.Checkbutton(kapak_frame, text=text, variable=option_var, state='disabled')
        chk.grid(row=0, column=i + 1, sticky='w')
        aov_option_vars[value] = option_var

        def make_aov_options_active(*args, option_var=option_var, chk=chk):
            if aov_var.get():
                chk.config(state='normal')
            else:
                chk.config(state='disabled')
                option_var.set(0)

        aov_var.trace_add('write', make_aov_options_active)

    # MV seçenekleri
    mv_var = tk.IntVar(value=0)
    mv_chk = tk.Checkbutton(kapak_frame, text="MV düzeyinde", variable=mv_var)
    mv_chk.grid(row=1, column=0, sticky='w')

    mv_options = [
        ("annulusta", "annulusta"),
        ("leafletler düzeyinde", "leafletler düzeyinde"),
        ("papiller kas tendonları düzeyinde", "papiller kas tendonları düzeyinde")
    ]
    mv_option_vars = {}
    for i, (text, value) in enumerate(mv_options):
        option_var = tk.IntVar(value=0)
        chk = tk.Checkbutton(kapak_frame, text=text, variable=option_var, state='disabled')
        chk.grid(row=1, column=i + 1, sticky='w')
        mv_option_vars[value] = option_var

        def make_mv_options_active(*args, option_var=option_var, chk=chk):
            if mv_var.get():
                chk.config(state='normal')
            else:
                chk.config(state='disabled')
                option_var.set(0)

        mv_var.trace_add('write', make_mv_options_active)

    # Yeni eklenen seçenekler
    # AoV düzeyinde yüksek dansiteli oluşumlar
    aov_yuksek_var = tk.IntVar(value=0)
    tk.Checkbutton(kapak_frame,
                   text="AoV düzeyinde yüksek dansiteli oluşumlar izlendi (AoVR prostetik kapağı?, masif kalsifikasyon?)",
                   variable=aov_yuksek_var).grid(row=2, column=0, columnspan=3, sticky='w')

    # MVR düzeyinde yüksek dansiteli oluşumlar
    mvr_yuksek_var = tk.IntVar(value=0)
    tk.Checkbutton(kapak_frame,
                   text="MVR düzeyinde yüksek dansiteli oluşumlar izlendi (MVR prostetik kapağı?, masif kalsifikasyon?)",
                   variable=mvr_yuksek_var).grid(row=3, column=0, columnspan=3, sticky='w')

    # CCD Bölümü
    ccd_frame = tk.LabelFrame(orta_frame, text="CCD", font=("Arial", 12))
    ccd_frame.grid(row=0, column=1, sticky='nsew', padx=10, pady=5)

    ccd_var = tk.IntVar(value=0)
    ccd_chk = tk.Checkbutton(ccd_frame, text="izlendi.", variable=ccd_var)
    ccd_chk.pack(anchor='w')

    # Radiobuttonlar
    ccd_rady_var = tk.StringVar(value="None")
    ccd_rbs = []
    ccd_options = [
        ("elektrotları RV lümeninde sonlanmaktadır.", "Elektrotları RV lümeninde sonlanmaktadır."),
        ("elektrotları RV lümeni ve sinus coronarius vasıtasıyla LV duvarında sonlanmaktadır.",
         "Elektrotları RV lümeni ve sinus coronarius vasıtasıyla LV duvarında sonlanmaktadır.")
    ]
    for text, value in ccd_options:
        rb = tk.Radiobutton(ccd_frame, text=text, variable=ccd_rady_var, value=value, state='disabled')
        rb.pack(anchor='w')
        ccd_rbs.append(rb)

    def ccd_changed(*args):
        if ccd_var.get():
            for rb in ccd_rbs:
                rb.config(state='normal')
        else:
            for rb in ccd_rbs:
                rb.config(state='disabled')
            ccd_rady_var.set("None")

    ccd_var.trace_add('write', ccd_changed)

    # Perikardial Recessler Bölümü
    perikard_frame = tk.LabelFrame(ana_frame, text="Perikardial Recessler", font=("Arial", 12))
    perikard_frame.pack(fill='x', padx=10, pady=10)

    # Radiobuttonlar
    perikard_var = tk.StringVar(value="artmış mayi izlenmedi.")
    perikard_rb1 = tk.Radiobutton(perikard_frame, text="artmış mayi izlenmedi.", variable=perikard_var,
                                  value="artmış mayi izlenmedi.")
    perikard_rb1.grid(row=0, column=0, sticky='w')
    perikard_rb2 = tk.Radiobutton(perikard_frame, text="artmış mayi izlendi.", variable=perikard_var,
                                  value="artmış mayi izlendi.")
    perikard_rb2.grid(row=1, column=0, sticky='w')

    # Checkboxlar
    perikard_chk_vars = {}
    perikard_checks = {}
    perikard_chk_options = [
        ("Superior aortic recesste artmış mayi izlendi", "Superior aortic recesste artmış mayi izlendi"),
        ("Perikardial recesslerde en kalın yerinde", "Perikardial recesslerde en kalın yerinde")
    ]
    for i, (text, value) in enumerate(perikard_chk_options):
        var = tk.IntVar(value=0)
        chk = tk.Checkbutton(perikard_frame, text=text, variable=var, state='disabled')
        chk.grid(row=i + 2, column=0, sticky='w')
        perikard_chk_vars[value] = var
        perikard_checks[value] = chk

    def perikard_var_changed(*args):
        if perikard_var.get() == "artmış mayi izlenmedi.":
            for key in perikard_chk_vars:
                var = perikard_chk_vars[key]
                var.set(0)
                perikard_checks[key].config(state='disabled')
        else:
            for chk in perikard_checks.values():
                chk.config(state='normal')

    perikard_var.trace_add('write', perikard_var_changed)

    # "Perikardial recesslerde en kalın yerinde" seçeneği detayları
    # Lokasyon radiobuttonları
    perikard_dz_var = tk.StringVar(value="None")
    perikard_dz_rbs = []
    perikard_dz_options = [
        ("RV düzeyinde", "RV düzeyinde"),
        ("LV düzeyinde", "LV düzeyinde"),
        ("transvers sinüste", "transvers sinüste"),
        ("basis cordiste", "basis cordiste")
    ]
    for i, (text, value) in enumerate(perikard_dz_options):
        rb = tk.Radiobutton(perikard_frame, text=text, variable=perikard_dz_var, value=value, state='disabled')
        rb.grid(row=2 + i, column=1, padx=5, sticky='w')
        perikard_dz_rbs.append(rb)

    # Milimetrik ve mm kalınlıkta seçenekleri
    perikard_milim_var = tk.StringVar(value="None")
    perikard_milim_rbs = []
    perikard_milim_options = [
        ("milimetrik", "milimetrik"),
        ("mm kalınlıkta", "mm kalınlıkta")
    ]
    for i, (text, value) in enumerate(perikard_milim_options):
        if value == "mm kalınlıkta":
            frame = tk.Frame(perikard_frame)
            frame.grid(row=2 + i, column=2, padx=5, sticky='w')
            rb = tk.Radiobutton(frame, text="", variable=perikard_milim_var, value=value, state='disabled')
            rb.pack(side='left')
            entry_var = tk.StringVar()
            entry = tk.Entry(frame, textvariable=entry_var, width=5, state='disabled')
            entry.pack(side='left')
            tk.Label(frame, text="mm kalınlıkta").pack(side='left')
            perikard_milim_rbs.append((rb, entry, entry_var))
        else:
            rb = tk.Radiobutton(perikard_frame, text=text, variable=perikard_milim_var, value=value, state='disabled')
            rb.grid(row=2 + i, column=2, padx=5, sticky='w')
            perikard_milim_rbs.append((rb, None, None))

    # Sabit cümle
    tk.Label(perikard_frame, text="perikardiyal effüzyon izlendi.").grid(row=2, column=3, rowspan=4, sticky='w')

    def perikard_enkalin_changed(*args):
        if perikard_chk_vars["Perikardial recesslerde en kalın yerinde"].get():
            for rb in perikard_dz_rbs:
                rb.config(state='normal')
            for item in perikard_milim_rbs:
                rb, entry, entry_var = item
                rb.config(state='normal')
                if entry:
                    entry.config(state='normal')
        else:
            perikard_dz_var.set("None")
            for rb in perikard_dz_rbs:
                rb.config(state='disabled')
            perikard_milim_var.set("None")
            for item in perikard_milim_rbs:
                rb, entry, entry_var = item
                rb.config(state='disabled')
                if entry:
                    entry.delete(0, tk.END)
                    entry.config(state='disabled')

    perikard_chk_vars["Perikardial recesslerde en kalın yerinde"].trace_add('write', perikard_enkalin_changed)

    # Metin Toplama Kutucuğu fonksiyonunu buraya taşıyoruz
    def metin_toplama_kutucugu_goster():
        # Global değişken kaldırıldı
        metin_toplama_kutucugu = tk.Toplevel()
        metin_toplama_kutucugu.title("Metin Toplama Kutucuğu")
        metin_toplama_kutucuğu_text = tk.Text(metin_toplama_kutucugu, wrap=tk.WORD)
        metin_toplama_kutucuğu_text.pack(expand=True, fill='both')

        # Metin Oluşturma
        cumleler = []

        # Boyut Bölümü
        boyut = boyut_var.get()
        if boyut != "None":
            cumle = boyut
            if boyut == "Kardiyotorasik oran artmıştır.":
                if dilatasyon_var.get() != "None" and dilatasyon_var.get() != "Ek veri girilmeyecek":
                    cumle += " " + dilatasyon_var.get()
            cumleler.append(cumle)

        # Atherosklerosis Bölümü
        for artery in athero_vars:
            if athero_vars[artery].get():
                segment = segment_vars[artery].get()
                cumle = f"{artery} {segment} kalsifiye plaklar izlendi."
                cumleler.append(cumle)

        # CABG Bölümü
        for text, var in cabg_vars.items():
            if var.get():
                cumleler.append(text)

        # Kapak Kalsifikasyonu Bölümü
        if aov_var.get():
            options = [key for key, var in aov_option_vars.items() if var.get()]
            if options:
                cumle = "AoV düzeyinde " + ", ".join(options) + " kalsifikasyonlar izlendi."
                cumleler.append(cumle)
        if mv_var.get():
            options = [key for key, var in mv_option_vars.items() if var.get()]
            if options:
                cumle = "MV düzeyinde " + ", ".join(options) + " kalsifikasyonlar izlendi."
                cumleler.append(cumle)
        # Yeni eklenen seçenekler için
        if aov_yuksek_var.get():
            cumleler.append(
                "AoV düzeyinde yüksek dansiteli oluşumlar izlendi (AoVR prostetik kapağı?, masif kalsifikasyon?).")
        if mvr_yuksek_var.get():
            cumleler.append(
                "MVR düzeyinde yüksek dansiteli oluşumlar izlendi (MVR prostetik kapağı?, masif kalsifikasyon?).")

        # CCD Bölümü
        if ccd_var.get():
            cumle = "CCD izlendi."
            if ccd_rady_var.get() != "None":
                cumle += f" {ccd_rady_var.get()}"
            cumleler.append(cumle)

        # Perikardial Recessler Bölümü
        if perikard_var.get() == "artmış mayi izlenmedi.":
            cumleler.append("Perikardial recesslerde artmış mayi izlenmedi.")
        else:
            if perikard_chk_vars["Superior aortic recesste artmış mayi izlendi"].get():
                cumleler.append("Superior aortic recesste artmış mayi izlendi.")
            if perikard_chk_vars["Perikardial recesslerde en kalın yerinde"].get():
                cumle = "Perikardial recesslerde en kalın yerinde"
                if perikard_dz_var.get() != "None":
                    cumle += f" {perikard_dz_var.get()}"
                if perikard_milim_var.get() == "milimetrik":
                    cumle += " milimetrik perikardiyal effüzyon izlendi."
                elif perikard_milim_var.get() == "mm kalınlıkta":
                    for item in perikard_milim_rbs:
                        rb, entry, entry_var = item
                        if rb.cget('value') == "mm kalınlıkta":
                            mm_value = entry_var.get()
                            if mm_value:
                                cumle += f" {mm_value} mm kalınlıkta perikardiyal effüzyon izlendi."
                            else:
                                cumle += " perikardiyal effüzyon izlendi."
                else:
                    cumle += " perikardiyal effüzyon izlendi."
                cumleler.append(cumle)

        # Metin alanına ekleme
        for cumle in cumleler:
            metin_toplama_kutucuğu_text.insert(tk.END, cumle + "\n")

        # RAPORA EKLE Butonu
        def rapora_ekle():
            metin = metin_toplama_kutucuğu_text.get('1.0', tk.END).strip()
            replace_zone_text('ZONE2', metin)
            metin_toplama_kutucugu.destroy()

        tk.Button(metin_toplama_kutucugu, text="RAPORA EKLE", command=rapora_ekle).pack(pady=5)

    # En altta butonları eklemek için yeni bir çerçeve
    buton_frame = tk.Frame(ana_frame)
    buton_frame.pack(side='bottom', pady=10)

    # KAYDET ve KAPAT butonları
    tk.Button(buton_frame, text="KAYDET", command=metin_toplama_kutucugu_goster).pack(side='left', padx=10)
    tk.Button(buton_frame, text="KAPAT", command=pencere.destroy).pack(side='left', padx=10)



def zone3_penceresi():
    pencere = tk.Toplevel()
    pencere.title("Zone 3: MPA ve Dalları")
    pencere.geometry("1000x700")
    # Pencereyi ortalamak için
    pencere.update_idletasks()
    width = pencere.winfo_width()
    height = pencere.winfo_height()
    x = (pencere.winfo_screenwidth() // 2) - (width // 2)
    y = (pencere.winfo_screenheight() // 2) - (height // 2)
    pencere.geometry('{}x{}+{}+{}'.format(width, height, x, y))

    ana_frame = tk.Frame(pencere)
    ana_frame.pack(fill='both', expand=True, padx=10, pady=10)

    # Başlık
    tk.Label(ana_frame, text="Zone 3: MPA ve Dalları", font=("Arial", 16)).pack(pady=10)

    # MPA Ölçümü Bölümü
    mpa_frame = tk.LabelFrame(ana_frame, text="MPA Ölçümü", font=("Arial", 12))
    mpa_frame.pack(fill='x', padx=10, pady=5)

    mpa_var = tk.IntVar()
    mpa_olcum_var = tk.StringVar()
    mpa_chk = tk.Checkbutton(mpa_frame, text="MPA _____ mm çaplı olup normalden geniştir. PAB ölçümü önerilir.",
                             variable=mpa_var)
    mpa_chk.grid(row=0, column=0, sticky='w')

    mpa_entry = tk.Entry(mpa_frame, textvariable=mpa_olcum_var, state='disabled', width=5)
    mpa_entry.grid(row=0, column=1, sticky='w')
    tk.Label(mpa_frame, text="mm").grid(row=0, column=2, sticky='w')

    def mpa_var_changed(*args):
        if mpa_var.get():
            mpa_entry.config(state='normal')
        else:
            mpa_entry.config(state='disabled')
            mpa_olcum_var.set("")

    mpa_var.trace_add('write', mpa_var_changed)

    # MPA, RPA, LPA Ölçümü Bölümü
    mpa_rpa_lpa_frame = tk.LabelFrame(ana_frame, text="MPA, RPA, LPA Ölçümü", font=("Arial", 12))
    mpa_rpa_lpa_frame.pack(fill='x', padx=10, pady=5)

    mpa_rpa_lpa_var = tk.IntVar()
    mpa_rpa_lpa_chk = tk.Checkbutton(mpa_rpa_lpa_frame,
                                     text="MPA _____ mm, RPA _____ mm, LPA _____ mm çapa sahiptir. PAB ölçümü önerilir.",
                                     variable=mpa_rpa_lpa_var)
    mpa_rpa_lpa_chk.grid(row=0, column=0, sticky='w')

    mpa_rpa_lpa_entries = {}
    for i, label_text in enumerate(["MPA", "RPA", "LPA"]):
        tk.Label(mpa_rpa_lpa_frame, text=label_text).grid(row=1, column=i * 2, sticky='e')
        var = tk.StringVar()
        entry = tk.Entry(mpa_rpa_lpa_frame, textvariable=var, state='disabled', width=5)
        entry.grid(row=1, column=i * 2 + 1, sticky='w')
        mpa_rpa_lpa_entries[label_text] = var

    def mpa_rpa_lpa_var_changed(*args):
        if mpa_rpa_lpa_var.get():
            for var in mpa_rpa_lpa_entries.values():
                var.set("")
            for widget in mpa_rpa_lpa_frame.winfo_children():
                if isinstance(widget, tk.Entry):
                    widget.config(state='normal')
        else:
            for var in mpa_rpa_lpa_entries.values():
                var.set("")
            for widget in mpa_rpa_lpa_frame.winfo_children():
                if isinstance(widget, tk.Entry):
                    widget.config(state='disabled')

    mpa_rpa_lpa_var.trace_add('write', mpa_rpa_lpa_var_changed)

    # MPA, RPA ve LPA normal kalibrededir
    normal_kalibre_var = tk.IntVar()
    normal_kalibre_chk = tk.Checkbutton(ana_frame, text="MPA, RPA ve LPA normal kalibrededir.",
                                        variable=normal_kalibre_var)
    normal_kalibre_chk.pack(anchor='w', padx=10, pady=5)

    # Emboli Çalışması Bölümü
    emboli_frame = tk.LabelFrame(ana_frame, text="Emboli Çalışması", font=("Arial", 12))
    emboli_frame.pack(fill='x', padx=10, pady=5)

    # Emboli seçenekleri
    emboli_vars = {}
    emboli_options = [
        "MPA, RPA ve LPA normal kalibrede olup bu arterlerin lober ve segmental dallarında dolum defekti izlenmedi.",
        "MPA, RPA ve LPA ile bu arterlerin lober ve segmental dallarında dolum defekti izlenmedi.",
        "MPA, RPA ve LPA'da dolum defekti izlenmedi. Segmental dallar çekim kalitesi / teknik sorunlar nedeniyle değerlendirilemedi.",
        "Embolik dolum defektleri izlenmiştir:"
    ]
    for i, option in enumerate(emboli_options):
        var = tk.IntVar()
        chk = tk.Checkbutton(emboli_frame, text=option, variable=var)
        chk.pack(anchor='w')
        emboli_vars[option] = var

    # Embolik Dolum Defektleri Bölümü
    defekt_frame = tk.Frame(emboli_frame)
    defekt_frame.pack(fill='x', padx=20, pady=5)

    # Defekt seçenekleri
    defekt_vars = {}

    defekt_options = [
        ("MPA düzeyi",),
        ("RPA / LPA ayrımı (saddle embolus)",),
        ("RPA", "LPA"),
        ("Sağ üst lob pulmoner arteri", "Sol üst lob pulmoner arteri"),
        ("Sağ üst lob apikal segment pulmoner arteri", "Sol üst lob apikal segment pulmoner arteri"),
        ("Sağ üst lob anterior segment pulmoner arteri", "Sol üst lob anterior segment pulmoner arteri"),
        ("Sağ üst lob posterior segment pulmoner arteri", "Sol üst lob posterior segment pulmoner arteri"),
        ("Orta lob pulmoner arteri", "Linguler lob pulmoner arteri"),
        ("Sağ alt lob pulmoner arteri", "Sol alt lob pulmoner arteri"),
        ("Sağ alt lob superior segment pulmoner arteri", "Sol alt lob superior segment pulmoner arteri"),
        ("Sağ alt lob anterior bazal segment pulmoner arteri", "Sol alt lob anterior bazal segment pulmoner arteri"),
        ("Sağ alt lob medial bazal segment pulmoner arteri", "Sol alt lob medial bazal segment pulmoner arteri"),
        ("Sağ alt lob posterior bazal segment pulmoner arteri", "Sol alt lob posterior bazal segment pulmoner arteri")
        # "bazal" kelimesi eklendi
    ]

    for i, options in enumerate(defekt_options):
        for j, option in enumerate(options):
            var = tk.IntVar()
            chk = tk.Checkbutton(defekt_frame, text=option, variable=var, state='disabled')
            chk.grid(row=i, column=j, sticky='w', padx=5)
            defekt_vars[option] = var

    # Embolik dolum defektleri seçeneği seçildiğinde defekt seçeneklerini aktif etme
    def emboli_vars_changed(*args):
        if emboli_vars["Embolik dolum defektleri izlenmiştir:"].get():
            for chk in defekt_frame.winfo_children():
                chk.config(state='normal')
        else:
            for var in defekt_vars.values():
                var.set(0)
            for chk in defekt_frame.winfo_children():
                chk.config(state='disabled')

    emboli_vars["Embolik dolum defektleri izlenmiştir:"].trace_add('write', emboli_vars_changed)

    # Metin Toplama Kutucuğu fonksiyonu
    def metin_toplama_kutucugu_goster():
        metin_toplama_kutucugu = tk.Toplevel()
        metin_toplama_kutucugu.title("Metin Toplama Kutucuğu")
        metin_toplama_kutucugu_text = tk.Text(metin_toplama_kutucugu, wrap=tk.WORD)
        metin_toplama_kutucugu_text.pack(expand=True, fill='both')

        # Metin Oluşturma
        cumleler = []

        # MPA Ölçümü
        if mpa_var.get():
            olcum = mpa_olcum_var.get()
            if olcum:
                cumle = f"MPA {olcum} mm çaplı olup normalden geniştir. PAB ölçümü önerilir."
            else:
                cumle = "MPA çaplı olup normalden geniştir. PAB ölçümü önerilir."
            cumleler.append(cumle)

        # MPA, RPA, LPA Ölçümü
        if mpa_rpa_lpa_var.get():
            mpa_olcum = mpa_rpa_lpa_entries["MPA"].get()
            rpa_olcum = mpa_rpa_lpa_entries["RPA"].get()
            lpa_olcum = mpa_rpa_lpa_entries["LPA"].get()
            cumle = f"MPA {mpa_olcum} mm, RPA {rpa_olcum} mm, LPA {lpa_olcum} mm çapa sahiptir. PAB ölçümü önerilir."
            cumleler.append(cumle)

        # Normal Kalibre
        if normal_kalibre_var.get():
            cumleler.append("MPA, RPA ve LPA normal kalibrededir.")

        # Emboli Çalışması
        for option, var in emboli_vars.items():
            if var.get():
                if option != "Embolik dolum defektleri izlenmiştir:":
                    cumleler.append(option)
                else:
                    # Embolik Dolum Defektleri
                    secilen_defektler = []
                    for option_text, var in defekt_vars.items():
                        if var.get():
                            secilen_defektler.append(option_text)

                    if secilen_defektler:
                        # Arter isimlerini düzenleme
                        arter_listesi = secilen_defektler
                        if len(arter_listesi) == 1:
                            cumle = f"{arter_listesi[0]}nde pulmoner tromboemboli ile uyumlu dolum defekti izlenmiştir."
                        else:
                            # İlk arter büyük harf, diğerleri küçük harf ile başlayacak
                            arter_listesi = [arter_listesi[0]] + [arter.lower() for arter in arter_listesi[1:]]
                            # Son arterden önce "ve" ekleme
                            cumle = ", ".join(arter_listesi[:-1])
                            cumle += f" ve {arter_listesi[-1]}nde pulmoner tromboemboli ile uyumlu dolum defekti izlenmiştir."
                        cumleler.append(cumle)

        # Metin alanına ekleme
        for cumle in cumleler:
            metin_toplama_kutucugu_text.insert(tk.END, cumle + "\n")

        # RAPORA EKLE Butonu
        def rapora_ekle():
            metin = metin_toplama_kutucugu_text.get('1.0', tk.END).strip()
            replace_zone_text('ZONE3', metin)
            metin_toplama_kutucugu.destroy()

        tk.Button(metin_toplama_kutucugu, text="RAPORA EKLE", command=rapora_ekle).pack(pady=5)

    # Buton çerçevesi
    buton_frame = tk.Frame(ana_frame)
    buton_frame.pack(pady=10)

    # KAYDET ve KAPAT butonları
    tk.Button(buton_frame, text="KAYDET", command=metin_toplama_kutucugu_goster).pack(side='left', padx=10)
    tk.Button(buton_frame, text="KAPAT", command=pencere.destroy).pack(side='left', padx=10)


def zone4_penceresi():
    pencere = tk.Toplevel()
    pencere.title("Zone 4: Torasik Aorta")
    pencere.geometry("1000x800")
    # Pencereyi ortalamak için
    pencere.update_idletasks()
    width = pencere.winfo_width()
    height = pencere.winfo_height()
    x = (pencere.winfo_screenwidth() // 2) - (width // 2)
    y = (pencere.winfo_screenheight() // 2) - (height // 2)
    pencere.geometry('{}x{}+{}+{}'.format(width, height, x, y))

    ana_frame = tk.Frame(pencere)
    ana_frame.pack(fill='both', expand=True, padx=10, pady=10)

    # Boyut ve Uzanım Bölümü
    boyut_frame = tk.LabelFrame(ana_frame, text="Boyut ve Uzanım", font=("Arial", 12))
    boyut_frame.pack(fill='x', padx=10, pady=5)

    # Yeni Checkbox: Asendan, arcus ve desendan aorta normal kalibrasyondadır.
    normal_kalibre_var = tk.IntVar()
    normal_kalibre_chk = tk.Checkbutton(boyut_frame, text="Asendan, arcus ve desendan aorta normal kalibrasyondadır.",
                                        variable=normal_kalibre_var)
    normal_kalibre_chk.grid(row=0, column=0, sticky='w')

    # Mevcut Checkbox: Asendan aorta ____ mm, arcus aorta ____ mm, desendan aorta ____ mm kalibrasyondadır.
    boyut_var = tk.IntVar()
    boyut_chk = tk.Checkbutton(boyut_frame, text="Asendan, arcus ve desendan aorta kalibrasyonu", variable=boyut_var)
    boyut_chk.grid(row=1, column=0, sticky='w')

    # Ölçüm girişleri
    asendan_var = tk.StringVar()
    arcus_var = tk.StringVar()
    desendan_var = tk.StringVar()

    tk.Label(boyut_frame, text="Asendan aorta:").grid(row=2, column=0, sticky='e')
    asendan_entry = tk.Entry(boyut_frame, textvariable=asendan_var, state='disabled', width=5)
    asendan_entry.grid(row=2, column=1, sticky='w')
    tk.Label(boyut_frame, text="mm").grid(row=2, column=2, sticky='w')

    tk.Label(boyut_frame, text="Arcus aorta:").grid(row=3, column=0, sticky='e')
    arcus_entry = tk.Entry(boyut_frame, textvariable=arcus_var, state='disabled', width=5)
    arcus_entry.grid(row=3, column=1, sticky='w')
    tk.Label(boyut_frame, text="mm").grid(row=3, column=2, sticky='w')

    tk.Label(boyut_frame, text="Desendan aorta:").grid(row=4, column=0, sticky='e')
    desendan_entry = tk.Entry(boyut_frame, textvariable=desendan_var, state='disabled', width=5)
    desendan_entry.grid(row=4, column=1, sticky='w')
    tk.Label(boyut_frame, text="mm").grid(row=4, column=2, sticky='w')

    # Kalsifikasyon Radiobuttonları (Estetik düzenleme yapıldı)
    kalsifikasyon_var = tk.StringVar(value="None")
    kalsifikasyon_frame = tk.Frame(boyut_frame)
    kalsifikasyon_frame.grid(row=2, column=3, rowspan=3, sticky='w', padx=20)
    tk.Radiobutton(kalsifikasyon_frame, text="Aortada cidar kalsifikasyonları izlendi.", variable=kalsifikasyon_var,
                   value="Aortada cidar kalsifikasyonları izlendi.", state='disabled').pack(anchor='w')
    tk.Radiobutton(kalsifikasyon_frame, text="Aortada cidar kalsifikasyonları izlenmedi.", variable=kalsifikasyon_var,
                   value="Aortada cidar kalsifikasyonları izlenmedi.", state='disabled').pack(anchor='w')

    # Event handler fonksiyonları
    def boyut_var_changed(*args):
        if boyut_var.get():
            asendan_entry.config(state='normal')
            arcus_entry.config(state='normal')
            desendan_entry.config(state='normal')
            # Kalsifikasyon radiobutton'larını kontrol et
            if not normal_kalibre_var.get():
                for rb in kalsifikasyon_frame.winfo_children():
                    rb.config(state='normal')
        else:
            asendan_entry.config(state='disabled')
            arcus_entry.config(state='disabled')
            desendan_entry.config(state='disabled')
            asendan_var.set("")
            arcus_var.set("")
            desendan_var.set("")
            # Eğer normal kalibre seçili değilse radiobutton'ları devre dışı bırak
            if not normal_kalibre_var.get():
                for rb in kalsifikasyon_frame.winfo_children():
                    rb.config(state='disabled')
                kalsifikasyon_var.set("None")

    def normal_kalibre_var_changed(*args):
        if normal_kalibre_var.get():
            # Kalsifikasyon radiobutton'larını etkinleştir
            for rb in kalsifikasyon_frame.winfo_children():
                rb.config(state='normal')
            # Eğer boyut_var seçili ise onların girişlerini devre dışı bırak
            if boyut_var.get():
                boyut_var.set(0)
            asendan_entry.config(state='disabled')
            arcus_entry.config(state='disabled')
            desendan_entry.config(state='disabled')
            asendan_var.set("")
            arcus_var.set("")
            desendan_var.set("")
        else:
            # Eğer boyut_var seçili değilse radiobutton'ları devre dışı bırak
            if not boyut_var.get():
                for rb in kalsifikasyon_frame.winfo_children():
                    rb.config(state='disabled')
                kalsifikasyon_var.set("None")

    boyut_var.trace_add('write', boyut_var_changed)
    normal_kalibre_var.trace_add('write', normal_kalibre_var_changed)

    # Diğer Checkboxlar
    innominate_var = tk.IntVar()
    lcca_var = tk.IntVar()
    lsca_var = tk.IntVar()
    sag_aberan_var = tk.IntVar()

    tk.Checkbutton(boyut_frame, text="Innominate arter origininde kalsifikasyon izlendi.",
                   variable=innominate_var).grid(row=5, column=0, columnspan=4, sticky='w')
    tk.Checkbutton(boyut_frame, text="LCCA origininde kalsifikasyon izlendi.", variable=lcca_var).grid(row=6, column=0,
                                                                                                       columnspan=4,
                                                                                                       sticky='w')
    tk.Checkbutton(boyut_frame, text="LSCA origininde kalsifikasyon izlendi.", variable=lsca_var).grid(row=7, column=0,
                                                                                                       columnspan=4,
                                                                                                       sticky='w')
    tk.Checkbutton(boyut_frame, text="Sağ aberan subklavian arter izlendi.", variable=sag_aberan_var).grid(row=8,
                                                                                                           column=0,
                                                                                                           columnspan=4,
                                                                                                           sticky='w')

    # Anevrizma Bölümü
    anevrizma_frame = tk.LabelFrame(ana_frame, text="Anevrizma", font=("Arial", 12))
    anevrizma_frame.pack(fill='x', padx=10, pady=5)

    # Torasik aortada Checkbox ve Radiobuttonları
    anevrizma_var = tk.IntVar()
    anevrizma_chk = tk.Checkbutton(anevrizma_frame, text="Torasik aortada", variable=anevrizma_var)
    anevrizma_chk.grid(row=0, column=0, sticky='w')

    anevrizma_bolum_var = tk.StringVar(value="None")
    anevrizma_rbs = []
    anevrizma_options = [
        ("asendan aorta", "asendan aorta"),
        ("arcus aorta", "arcus aorta"),
        ("desendan aorta", "desendan aorta")
    ]
    for i, (text, value) in enumerate(anevrizma_options):
        rb = tk.Radiobutton(anevrizma_frame, text=text, variable=anevrizma_bolum_var, value=value, state='disabled')
        rb.grid(row=0, column=i + 1, sticky='w')
        anevrizma_rbs.append(rb)

    # Ölçüm Girişi
    anevrizma_olcum_var = tk.StringVar()
    anevrizma_entry = tk.Entry(anevrizma_frame, textvariable=anevrizma_olcum_var, state='disabled', width=5)
    anevrizma_entry.grid(row=1, column=0, sticky='w')
    tk.Label(anevrizma_frame, text="hizasından başlayan anevrizmatik dilatasyon mevcut olup en geniş yerinde").grid(
        row=1, column=1, columnspan=5, sticky='w')
    tk.Label(anevrizma_frame, text="mm'dir.").grid(row=1, column=7, sticky='w')

    # Ek Checkboxlar
    intramural_var = tk.IntVar()
    cidar_kals_var = tk.IntVar()
    hiatus_var = tk.IntVar()
    hiatus_olcum_var = tk.StringVar()
    hiatus_entry = tk.Entry(anevrizma_frame, textvariable=hiatus_olcum_var, state='disabled', width=5)

    tk.Checkbutton(anevrizma_frame, text="İntramural thrombus izlendi", variable=intramural_var).grid(row=2, column=0,
                                                                                                      columnspan=8,
                                                                                                      sticky='w')
    tk.Checkbutton(anevrizma_frame, text="Cidar kalsifikasyonları izlendi.", variable=cidar_kals_var).grid(row=3,
                                                                                                           column=0,
                                                                                                           columnspan=8,
                                                                                                           sticky='w')

    hiatus_chk = tk.Checkbutton(anevrizma_frame, text="Hiatus aorticusta aorta çapı", variable=hiatus_var)
    hiatus_chk.grid(row=4, column=0, sticky='w')
    hiatus_entry.grid(row=4, column=1, sticky='w')
    tk.Label(anevrizma_frame, text="mm'dir.").grid(row=4, column=2, sticky='w')

    def anevrizma_var_changed(*args):
        if anevrizma_var.get():
            for rb in anevrizma_rbs:
                rb.config(state='normal')
            anevrizma_entry.config(state='normal')
        else:
            for rb in anevrizma_rbs:
                rb.config(state='disabled')
            anevrizma_bolum_var.set("None")
            anevrizma_entry.config(state='disabled')
            anevrizma_olcum_var.set("")

    anevrizma_var.trace_add('write', anevrizma_var_changed)

    def hiatus_var_changed(*args):
        if hiatus_var.get():
            hiatus_entry.config(state='normal')
        else:
            hiatus_entry.config(state='disabled')
            hiatus_olcum_var.set("")

    hiatus_var.trace_add('write', hiatus_var_changed)

    # Diseksiyon Bölümü
    diseksiyon_frame = tk.LabelFrame(ana_frame, text="Diseksiyon", font=("Arial", 12))
    diseksiyon_frame.pack(fill='x', padx=10, pady=5)

    # Torasik aortada Checkbox ve Radiobuttonları
    diseksiyon_var = tk.IntVar()
    diseksiyon_chk = tk.Checkbutton(diseksiyon_frame, text="Torasik aortada", variable=diseksiyon_var)
    diseksiyon_chk.grid(row=0, column=0, sticky='w')

    diseksiyon_bolum_var = tk.StringVar(value="None")
    diseksiyon_rbs = []
    diseksiyon_options = [
        ("asendan aorta", "asendan aorta"),
        ("arcus aorta", "arcus aorta"),
        ("desendan aorta", "desendan aorta")
    ]
    for i, (text, value) in enumerate(diseksiyon_options):
        rb = tk.Radiobutton(diseksiyon_frame, text=text, variable=diseksiyon_bolum_var, value=value, state='disabled')
        rb.grid(row=0, column=i + 1, sticky='w')
        diseksiyon_rbs.append(rb)

    tk.Label(diseksiyon_frame, text="hizasından başlayan intimal flep izlendi.").grid(row=1, column=0, columnspan=4,
                                                                                      sticky='w')

    def diseksiyon_var_changed(*args):
        if diseksiyon_var.get():
            for rb in diseksiyon_rbs:
                rb.config(state='normal')
        else:
            for rb in diseksiyon_rbs:
                rb.config(state='disabled')
            diseksiyon_bolum_var.set("None")

    diseksiyon_var.trace_add('write', diseksiyon_var_changed)

    # Abdominal aortada Checkbox ve Alt Başlıkları
    abd_aorta_var = tk.IntVar()
    abd_aorta_chk = tk.Checkbutton(diseksiyon_frame, text="Abdominal aortada", variable=abd_aorta_var)
    abd_aorta_chk.grid(row=2, column=0, sticky='w')

    # Abdominal Aorta Alt Bölümü
    abd_frame = tk.Frame(diseksiyon_frame)
    abd_frame.grid(row=3, column=0, columnspan=4, sticky='w', padx=20)

    # Abdominal aorta seçilmedikçe içerikler devre dışı
    def abd_aorta_var_changed(*args):
        if abd_aorta_var.get():
            for widget in abd_frame.winfo_children():
                widget.config(state='normal')
            # Alt değişkenleri başlat
            tc_var_changed()
            sma_var_changed()
            sra_var_changed()
            solra_var_changed()
            iliak_var_changed()
        else:
            for widget in abd_frame.winfo_children():
                widget.config(state='disabled')
            # Değerleri sıfırla
            tc_var.set(0)
            sma_var.set(0)
            sra_var.set(0)
            solra_var.set(0)
            infrarenal_var.set(0)
            iliak_var.set(0)
            tc_lumen_var.set("None")
            sma_lumen_var.set("None")
            sra_lumen_var.set("None")
            solra_lumen_var.set("None")
            iliak_options_var.set("None")

    abd_aorta_var.trace_add('write', abd_aorta_var_changed)

    # Truncus coeliacus
    tc_var = tk.IntVar()
    tk.Checkbutton(abd_frame, text="Truncus coeliacus", variable=tc_var).grid(row=0, column=0, sticky='w')

    tc_lumen_var = tk.StringVar(value="None")
    tc_rb1 = tk.Radiobutton(abd_frame, text="gerçek lümen içindedir.", variable=tc_lumen_var,
                            value="gerçek lümen içindedir.", state='disabled')
    tc_rb2 = tk.Radiobutton(abd_frame, text="yalancı lümen içindedir.", variable=tc_lumen_var,
                            value="yalancı lümen içindedir.", state='disabled')
    tc_rb1.grid(row=0, column=1, sticky='w')
    tc_rb2.grid(row=0, column=2, sticky='w')

    def tc_var_changed(*args):
        if tc_var.get():
            tc_rb1.config(state='normal')
            tc_rb2.config(state='normal')
        else:
            tc_rb1.config(state='disabled')
            tc_rb2.config(state='disabled')
            tc_lumen_var.set("None")

    tc_var.trace_add('write', tc_var_changed)

    # SMA
    sma_var = tk.IntVar()
    tk.Checkbutton(abd_frame, text="SMA", variable=sma_var).grid(row=1, column=0, sticky='w')

    sma_lumen_var = tk.StringVar(value="None")
    sma_rb1 = tk.Radiobutton(abd_frame, text="gerçek lümen içindedir.", variable=sma_lumen_var,
                             value="gerçek lümen içindedir.", state='disabled')
    sma_rb2 = tk.Radiobutton(abd_frame, text="yalancı lümen içindedir.", variable=sma_lumen_var,
                             value="yalancı lümen içindedir.", state='disabled')
    sma_rb1.grid(row=1, column=1, sticky='w')
    sma_rb2.grid(row=1, column=2, sticky='w')

    def sma_var_changed(*args):
        if sma_var.get():
            sma_rb1.config(state='normal')
            sma_rb2.config(state='normal')
        else:
            sma_rb1.config(state='disabled')
            sma_rb2.config(state='disabled')
            sma_lumen_var.set("None")

    sma_var.trace_add('write', sma_var_changed)

    # Sağ renal arter
    sra_var = tk.IntVar()
    tk.Checkbutton(abd_frame, text="Sağ renal arter", variable=sra_var).grid(row=2, column=0, sticky='w')

    sra_lumen_var = tk.StringVar(value="None")
    sra_rb1 = tk.Radiobutton(abd_frame, text="gerçek lümen içindedir.", variable=sra_lumen_var,
                             value="gerçek lümen içindedir.", state='disabled')
    sra_rb2 = tk.Radiobutton(abd_frame, text="yalancı lümen içindedir.", variable=sra_lumen_var,
                             value="yalancı lümen içindedir.", state='disabled')
    sra_rb1.grid(row=2, column=1, sticky='w')
    sra_rb2.grid(row=2, column=2, sticky='w')

    def sra_var_changed(*args):
        if sra_var.get():
            sra_rb1.config(state='normal')
            sra_rb2.config(state='normal')
        else:
            sra_rb1.config(state='disabled')
            sra_rb2.config(state='disabled')
            sra_lumen_var.set("None")

    sra_var.trace_add('write', sra_var_changed)

    # Sol renal arter
    solra_var = tk.IntVar()
    tk.Checkbutton(abd_frame, text="Sol renal arter", variable=solra_var).grid(row=3, column=0, sticky='w')

    solra_lumen_var = tk.StringVar(value="None")
    solra_rb1 = tk.Radiobutton(abd_frame, text="gerçek lümen içindedir.", variable=solra_lumen_var,
                               value="gerçek lümen içindedir.", state='disabled')
    solra_rb2 = tk.Radiobutton(abd_frame, text="yalancı lümen içindedir.", variable=solra_lumen_var,
                               value="yalancı lümen içindedir.", state='disabled')
    solra_rb1.grid(row=3, column=1, sticky='w')
    solra_rb2.grid(row=3, column=2, sticky='w')

    def solra_var_changed(*args):
        if solra_var.get():
            solra_rb1.config(state='normal')
            solra_rb2.config(state='normal')
        else:
            solra_rb1.config(state='disabled')
            solra_rb2.config(state='disabled')
            solra_lumen_var.set("None")

    solra_var.trace_add('write', solra_var_changed)

    # Diseksiyon infrarenal seviyede sonlanmaktadır
    infrarenal_var = tk.IntVar()
    tk.Checkbutton(abd_frame, text="Diseksiyon infrarenal seviyede sonlanmaktadır.", variable=infrarenal_var,
                   state='disabled').grid(row=4, column=0, columnspan=3, sticky='w')

    # Diseksiyon iliak arterlerde devam ediyor
    iliak_var = tk.IntVar()
    iliak_chk = tk.Checkbutton(abd_frame, text="Diseksiyon", variable=iliak_var, state='disabled')
    iliak_chk.grid(row=5, column=0, sticky='w')

    iliak_options_var = tk.StringVar(value="None")
    iliak_options = [
        ("sağ ana iliak arter", "sağ ana iliak arter"),
        ("sol ana iliak arter", "sol ana iliak arter"),
        ("her iki ana iliak arter", "her iki ana iliak arter")
    ]
    iliak_rbs = []
    for i, (text, value) in enumerate(iliak_options):
        rb = tk.Radiobutton(abd_frame, text=text, variable=iliak_options_var, value=value, state='disabled')
        rb.grid(row=5, column=i + 1, sticky='w')
        iliak_rbs.append(rb)

    tk.Label(abd_frame, text="lümeninde devam etmektedir.", state='disabled').grid(row=5, column=4, sticky='w')

    def iliak_var_changed(*args):
        if iliak_var.get():
            for rb in iliak_rbs:
                rb.config(state='normal')
            # Etiket etkinleştir
            abd_frame.grid_slaves(row=5, column=4)[0].config(state='normal')
        else:
            for rb in iliak_rbs:
                rb.config(state='disabled')
            iliak_options_var.set("None")
            # Etiket devre dışı
            abd_frame.grid_slaves(row=5, column=4)[0].config(state='disabled')

    iliak_var.trace_add('write', iliak_var_changed)

    # Metin Toplama Kutucuğu fonksiyonu
    def metin_toplama_kutucugu_goster():
        metin_toplama_kutucugu = tk.Toplevel()
        metin_toplama_kutucugu.title("Metin Toplama Kutucuğu")
        metin_toplama_kutucugu_text = tk.Text(metin_toplama_kutucugu, wrap=tk.WORD)
        metin_toplama_kutucugu_text.pack(expand=True, fill='both')

        # Metin Oluşturma
        cumleler = []

        # Boyut ve Uzanım Bölümü
        if normal_kalibre_var.get():
            cumle = "Asendan, arcus ve desendan aorta normal kalibrasyondadır."
            cumleler.append(cumle)
            if kalsifikasyon_var.get() != "None":
                cumleler.append(kalsifikasyon_var.get())
        elif boyut_var.get():
            asendan = asendan_var.get()
            arcus = arcus_var.get()
            desendan = desendan_var.get()
            cumle = "Asendan aorta"
            if asendan:
                cumle += f" {asendan} mm"
            cumle += ", arcus aorta"
            if arcus:
                cumle += f" {arcus} mm"
            cumle += ", desendan aorta"
            if desendan:
                cumle += f" {desendan} mm"
            cumle += " kalibrasyondadır."
            cumleler.append(cumle)
            if kalsifikasyon_var.get() != "None":
                cumleler.append(kalsifikasyon_var.get())

        if innominate_var.get():
            cumleler.append("Innominate arter origininde kalsifikasyon izlendi.")

        if lcca_var.get():
            cumleler.append("LCCA origininde kalsifikasyon izlendi.")

        if lsca_var.get():
            cumleler.append("LSCA origininde kalsifikasyon izlendi.")

        if sag_aberan_var.get():
            cumleler.append("Sağ aberan subklavian arter izlendi.")

        # Anevrizma Bölümü
        if anevrizma_var.get():
            if anevrizma_bolum_var.get() != "None":
                bolum = anevrizma_bolum_var.get()
                olcum = anevrizma_olcum_var.get()
                cumle = f"Torasik aortada {bolum} hizasından başlayan anevrizmatik dilatasyon mevcut olup en geniş yerinde {olcum} mm'dir."
                cumleler.append(cumle)
        if intramural_var.get():
            cumleler.append("İntramural thrombus izlendi.")
        if cidar_kals_var.get():
            cumleler.append("Cidar kalsifikasyonları izlendi.")
        if hiatus_var.get():
            olcum = hiatus_olcum_var.get()
            cumle = f"Hiatus aorticusta aorta çapı {olcum} mm'dir."
            cumleler.append(cumle)

        # Diseksiyon Bölümü
        if diseksiyon_var.get():
            if diseksiyon_bolum_var.get() != "None":
                bolum = diseksiyon_bolum_var.get()
                cumle = f"Torasik aortada {bolum} hizasından başlayan intimal flep izlendi."
                cumleler.append(cumle)

        if abd_aorta_var.get():
            cumle = "Abdominal aortada"
            alt_cumleler = []
            # Truncus coeliacus
            if tc_var.get() and tc_lumen_var.get() != "None":
                alt_cumleler.append(f"Truncus coeliacus {tc_lumen_var.get()}")
            # SMA
            if sma_var.get() and sma_lumen_var.get() != "None":
                alt_cumleler.append(f"SMA {sma_lumen_var.get()}")
            # Sağ renal arter
            if sra_var.get() and sra_lumen_var.get() != "None":
                alt_cumleler.append(f"Sağ renal arter {sra_lumen_var.get()}")
            # Sol renal arter
            if solra_var.get() and solra_lumen_var.get() != "None":
                alt_cumleler.append(f"Sol renal arter {solra_lumen_var.get()}")
            if alt_cumleler:
                cumle += " " + ", ".join(alt_cumleler) + "."
                cumleler.append(cumle)
            # Diseksiyon infrarenal seviyede sonlanmaktadır
            if infrarenal_var.get():
                cumleler.append("Diseksiyon infrarenal seviyede sonlanmaktadır.")
            # Diseksiyon iliak arterlerde devam etmektedir
            if iliak_var.get() and iliak_options_var.get() != "None":
                cumle = f"Diseksiyon {iliak_options_var.get()} lümeninde devam etmektedir."
                cumleler.append(cumle)

        # Metin alanına ekleme
        for cumle in cumleler:
            metin_toplama_kutucugu_text.insert(tk.END, cumle + "\n")

        # RAPORA EKLE Butonu
        def rapora_ekle():
            metin = metin_toplama_kutucugu_text.get('1.0', tk.END).strip()
            replace_zone_text('ZONE4', metin)
            metin_toplama_kutucugu.destroy()

        tk.Button(metin_toplama_kutucugu, text="RAPORA EKLE", command=rapora_ekle).pack(pady=5)

    # Buton çerçevesi
    buton_frame = tk.Frame(ana_frame)
    buton_frame.pack(pady=10)

    # KAYDET ve KAPAT butonları
    tk.Button(buton_frame, text="KAYDET", command=metin_toplama_kutucugu_goster).pack(side='left', padx=10)
    tk.Button(buton_frame, text="KAPAT", command=pencere.destroy).pack(side='left', padx=10)


def zone5_penceresi():
    def guncellenen_cumleyi_olustur():
        cumleler = []

        # Non-patolojik lenf nodları
        for option, var in np_vars.items():
            if var.get():
                cumleler.append(option)

        # Patolojik lenf nodları
        if patolojik_var.get():
            # Tüm istasyonların isimlerini al
            buyuk_istasyon = buyuk_istasyon_var.get()
            olcum = patolojik_olcum_var.get()
            olcum_text = ""
            if olcum:
                if any(x in olcum for x in ['x', 'X', '×']):
                    olcum_text = f"{olcum} mm boyutlarda"
                elif olcum.replace('.', '', 1).isdigit():  # Sadece bir rakamsal ifade içeriyorsa
                    olcum_text = f"{olcum} mm çapında"
                else:
                    olcum_text = f"{olcum} (geçersiz format)"

            cumle = f"Paratracheal, prekarinal, subkarinal, prevasküler, subaortik, bilateral hiler büyüğü {buyuk_istasyon} yerleşimli {olcum_text} olmak üzere lenf nodları izlendi."
            cumleler.append(cumle)

        # Konglomere lenf nodları
        secilen_istasyonlar = [istasyon for istasyon, var in konglomere_vars.items() if var.get()]
        if secilen_istasyonlar:
            def format_istasyon(istasyon):
                words = istasyon.split()
                formatted_words = []
                for word in words:
                    if '(' in word and ')' in word:
                        base, parens = word.split('(')
                        parens = parens.strip(')')
                        formatted_parens = ''.join([char if char in 'RL' else char.lower() for char in parens])
                        formatted_word = base.lower() + '(' + formatted_parens + ')'
                    else:
                        formatted_word = word.lower()
                    formatted_words.append(formatted_word)
                return ' '.join(formatted_words)

            ilk_istasyon = format_istasyon(secilen_istasyonlar[0]).capitalize()
            diger_istasyonlar = [format_istasyon(istasyon) for istasyon in secilen_istasyonlar[1:]]
            if len(diger_istasyonlar) == 0:
                istasyonlar_text = ilk_istasyon
            elif len(diger_istasyonlar) == 1:
                istasyonlar_text = f"{ilk_istasyon} ve {diger_istasyonlar[0]}"
            else:
                istasyonlar_text = f"{ilk_istasyon}, " + ", ".join(
                    diger_istasyonlar[:-1]) + f" ve {diger_istasyonlar[-1]}"
            olcum = konglomere_olcum_var.get()
            if olcum:
                cumle = f"{istasyonlar_text} istasyonlarda birbiri ile sınırları ayırt edilemeyen, en geniş yerinde {olcum} mm boyutlarda lenfadenopatiler izlendi."
            else:
                cumle = f"{istasyonlar_text} istasyonlarda birbiri ile sınırları ayırt edilemeyen lenfadenopatiler izlendi."
            cumleler.append(cumle)

        return "\n".join(cumleler)

    def guncelle_rapor_cumlesi():
        guncel_cumle = guncellenen_cumleyi_olustur()
        guncel_cumle_var.set(guncel_cumle)

    def metin_toplama_kutucugu_goster():
        metin_toplama_kutucugu = tk.Toplevel()
        metin_toplama_kutucugu.title("Metin Toplama Kutucuğu")
        metin_toplama_kutucugu.geometry("600x400")

        metin_toplama_kutucugu_text = tk.Text(metin_toplama_kutucugu, wrap=tk.WORD)
        metin_toplama_kutucugu_text.pack(expand=True, fill='both')

        # Cümleyi ekliyoruz
        metin = guncel_cumle_var.get()
        metin_toplama_kutucugu_text.insert(tk.END, metin + "\n")

        # RAPORA EKLE butonu
        def rapora_ekle():
            metin = metin_toplama_kutucugu_text.get('1.0', tk.END).strip()
            replace_zone_text('ZONE5', metin)
            metin_toplama_kutucugu.destroy()

        tk.Button(metin_toplama_kutucugu, text="RAPORA EKLE", command=rapora_ekle).pack(pady=5)

    pencere = tk.Toplevel()
    pencere.title("Zone 5: Lenf Nodu Penceresi")
    pencere.geometry("1100x500")

    # Pencereyi ortalamak için
    pencere.update_idletasks()
    width = pencere.winfo_width()
    height = pencere.winfo_height()
    x = (pencere.winfo_screenwidth() // 2) - (width // 2)
    y = (pencere.winfo_screenheight() // 2) - (height // 2)
    pencere.geometry('{}x{}+{}+{}'.format(width, height, x, y))

    ana_frame = tk.Frame(pencere)
    ana_frame.pack(fill='both', expand=True, padx=10, pady=10)

    # Başlık
    tk.Label(ana_frame, text="Lenf Nodu Penceresi", font=("Arial", 16)).pack(pady=10)

    # Non-patolojik ancak yaygın lenf nodları Bölümü
    non_patolojik_frame = tk.LabelFrame(ana_frame, text="Non-patolojik ancak yaygın lenf nodları", font=("Arial", 12))
    non_patolojik_frame.pack(fill='x', padx=10, pady=5)

    np_options = [
        "Paratracheal, prekarinal, subkarinal, prevasküler, subaortik, bilateral hiler kısa aksı patolojik sınıra ulaşmayan lenf nodları izlendi.",
        "Paratracheal, prekarinal, subkarinal, prevasküler, subaortik, bilateral hiler, paraesophageal kısa aksı patolojik sınıra ulaşmayan lenf nodları izlendi."
    ]
    np_vars = {}
    for i, option in enumerate(np_options):
        var = tk.IntVar()
        chk = tk.Checkbutton(non_patolojik_frame, text=option, variable=var, command=guncelle_rapor_cumlesi)
        chk.pack(anchor='w')
        np_vars[option] = var

    # Patolojik lenf nodları Bölümü
    patolojik_frame = tk.LabelFrame(ana_frame, text="En büyüğünü tarif ederek lenf nodlarını tanımlama",
                                    font=("Arial", 12))
    patolojik_frame.pack(fill='x', padx=10, pady=5)

    # Patolojik lenf nodları Checkbox
    patolojik_var = tk.IntVar()
    patolojik_chk = tk.Checkbutton(patolojik_frame, text="Patolojik lenf nodları", variable=patolojik_var,
                                   command=guncelle_rapor_cumlesi)
    patolojik_chk.grid(row=0, column=0, sticky='w')

    # İstasyonların listesi
    istasyon_listesi = [
        "üst paratrakeal",
        "alt paratrakeal (4R)",
        "alt paratrakeal (4L)",
        "subkarinal",
        "prevasküler",
        "subaortik",
        "sağ hiler",
        "sol hiler"
    ]

    # Radiobutton ile en büyük lenf nodunun istasyonunu seçme
    buyuk_istasyon_var = tk.StringVar(value="None")
    buyuk_istasyon_rbs = []
    for i, istasyon in enumerate(istasyon_listesi):
        rb = tk.Radiobutton(patolojik_frame, text=istasyon, variable=buyuk_istasyon_var, value=istasyon,
                            state='disabled', command=guncelle_rapor_cumlesi)
        rb.grid(row=1 + i // 4, column=(i % 4) * 2, sticky='w')
        buyuk_istasyon_rbs.append(rb)

    # Ölçüm girişi
    olcum_label = tk.Label(patolojik_frame, text="Ölçüm:")
    olcum_label.grid(row=1, column=7, sticky='e')
    patolojik_olcum_var = tk.StringVar()
    patolojik_entry = tk.Entry(patolojik_frame, textvariable=patolojik_olcum_var, state='disabled', width=10)
    patolojik_entry.grid(row=1, column=8, sticky='w')
    tk.Label(patolojik_frame, text="mm").grid(row=1, column=9, sticky='w')
    patolojik_olcum_var.trace_add('write', lambda *args: guncelle_rapor_cumlesi())

    def patolojik_var_changed(*args):
        if patolojik_var.get():
            for rb in buyuk_istasyon_rbs:
                rb.config(state='normal')
            patolojik_entry.config(state='normal')
            olcum_label.config(state='normal')
        else:
            for rb in buyuk_istasyon_rbs:
                rb.config(state='disabled')
            buyuk_istasyon_var.set("None")
            patolojik_entry.config(state='disabled')
            patolojik_olcum_var.set('')
            olcum_label.config(state='disabled')

    patolojik_var.trace_add('write', patolojik_var_changed)

    # Konglomere lenf nodları Bölümü
    konglomere_frame = tk.LabelFrame(ana_frame, text="Konglomere lenf nodları", font=("Arial", 12))
    konglomere_frame.pack(fill='x', padx=10, pady=5)

    # Konglomere seçenekleri
    konglomere_istasyonlar = [
        "üst paratrakeal (2R)",
        "üst paratrakeal (2L)",
        "alt paratrakeal (4R)",
        "alt paratrakeal (4L)",
        "subkarinal",
        "prevasküler",
        "subaortik",
        "sağ hiler",
        "sol hiler",
        "paraesophageal"
    ]

    konglomere_vars = {}
    for i, istasyon in enumerate(konglomere_istasyonlar):
        var = tk.IntVar()
        chk = tk.Checkbutton(konglomere_frame, text=istasyon, variable=var, command=guncelle_rapor_cumlesi)
        chk.grid(row=i // 5, column=i % 5, sticky='w')
        konglomere_vars[istasyon] = var

    # Ölçüm girişi
    tk.Label(konglomere_frame, text="Ölçüm:").grid(row=2, column=0, sticky='e')
    konglomere_olcum_var = tk.StringVar()
    konglomere_entry = tk.Entry(konglomere_frame, textvariable=konglomere_olcum_var, state='disabled', width=10)
    konglomere_entry.grid(row=2, column=1, sticky='w')
    tk.Label(konglomere_frame, text="mm").grid(row=2, column=2, sticky='w')
    konglomere_olcum_var.trace_add('write', lambda *args: guncelle_rapor_cumlesi())

    def konglomere_var_changed(*args):
        if any(var.get() for var in konglomere_vars.values()):
            konglomere_entry.config(state='normal')
        else:
            konglomere_entry.config(state='disabled')
            konglomere_olcum_var.set("")

    for var in konglomere_vars.values():
        var.trace_add('write', konglomere_var_changed)

    # Sürekli Güncellenen Cümleyi Gösteren Label
    guncel_cumle_var = tk.StringVar()
    guncel_cumle_label = tk.Label(ana_frame, textvariable=guncel_cumle_var, font=("Arial", 12), fg="black", anchor='w',
                                  justify='left')
    guncel_cumle_label.pack(fill='x', padx=10, pady=10)

    # Buton çerçevesi
    buton_frame = tk.Frame(ana_frame)
    buton_frame.pack(pady=10)

    # KAYDET ve KAPAT butonları
    tk.Button(buton_frame, text="KAYDET", command=metin_toplama_kutucugu_goster).pack(side='left', padx=10)
    tk.Button(buton_frame, text="KAPAT", command=pencere.destroy).pack(side='left', padx=10)


def zone6_penceresi():
    import tkinter as tk
    from tkinter import ttk
    from tkinter import messagebox

    pencere = tk.Toplevel()
    pencere.title("Zone 6: Trakea ve Bronşlar")
    pencere.geometry("1200x800")
    # Pencereyi ortalamak için
    pencere.update_idletasks()
    width = pencere.winfo_width()
    height = pencere.winfo_height()
    x = (pencere.winfo_screenwidth() // 2) - (width // 2)
    y = (pencere.winfo_screenheight() // 2) - (height // 2)
    pencere.geometry('{}x{}+{}+{}'.format(width, height, x, y))

    ana_frame = tk.Frame(pencere)
    ana_frame.pack(fill='both', expand=True, padx=10, pady=10)

    # Başlık
    tk.Label(ana_frame, text="Trakea ve Bronşlar", font=("Arial", 16)).pack(pady=10)

    # Non-neoplastik bulgular bölümü
    non_neoplastik_frame = tk.LabelFrame(ana_frame, text="Non-neoplastik bulgular", font=("Arial", 12))
    non_neoplastik_frame.pack(fill='x', padx=10, pady=5)

    non_neoplastik_options = [
        "Hasta entübedir.",
        "Trakeostomi kanülü izlendi.",
        "Trakeomegali izlendi.",
        "Trakea sağ-posterior duvarda divertikül izlendi.",
        "Trakea lümeninde sekresyon izlendi.",
        "Sağ ana bronş lümeninde sekresyon izlendi.",
        "Sol ana bronş lümeninde sekresyon izlendi.",
        "Tracheobronchopathia osteochondroplastica izlendi."
    ]

    non_neoplastik_vars = {}
    for i, option in enumerate(non_neoplastik_options):
        var = tk.IntVar(value=0)
        chk = tk.Checkbutton(non_neoplastik_frame, text=option, variable=var)
        chk.grid(row=i % 4, column=i // 4, sticky='w')
        non_neoplastik_vars[option] = var

    # Neoplastik bulgular bölümü
    neoplastik_frame = tk.LabelFrame(ana_frame, text="Neoplastik bulgular", font=("Arial", 12))
    neoplastik_frame.pack(fill='x', padx=10, pady=5)

    # 1. Lobar seviye seçimi
    tk.Label(neoplastik_frame, text="Lobar Seviye:").grid(row=0, column=0, sticky='e')
    lobar_seviye_var = tk.StringVar(value='__NO_SELECTION__')
    lobar_seviye_combobox = ttk.Combobox(neoplastik_frame, textvariable=lobar_seviye_var, state='readonly')
    lobar_seviye_combobox['values'] = [
        "Sağ üst lob",
        "Orta lob",
        "Sağ alt lob",
        "Sol üst lob",
        "Lingular lob",
        "Sol alt lob"
    ]
    lobar_seviye_combobox.grid(row=0, column=1, sticky='w')

    # 2. Segmental seviye seçimi
    tk.Label(neoplastik_frame, text="Segmental Seviye:").grid(row=0, column=2, sticky='e')
    segmental_seviye_var = tk.StringVar(value='__NO_SELECTION__')
    segmental_seviye_combobox = ttk.Combobox(neoplastik_frame, textvariable=segmental_seviye_var, state='disabled')
    segmental_seviye_combobox.grid(row=0, column=3, sticky='w')

    # Segmental seçenekler
    segment_options = {
        "Sağ üst lob": ["Segmental tutulum yok", "Apikal segment", "Anterior segment", "Posterior segment"],
        "Orta lob": ["Segmental tutulum yok", "Medial segment", "Lateral segment"],
        "Sağ alt lob": ["Segmental tutulum yok", "Superior segment", "Anterior bazal segment", "Medial bazal segment",
                        "Lateral bazal segment", "Posterior bazal segment"],
        "Sol üst lob": ["Segmental tutulum yok", "Apikoposterior segment", "Anterior segment"],
        "Lingular lob": ["Segmental tutulum yok", "Superior segment", "Inferior segment"],
        "Sol alt lob": ["Segmental tutulum yok", "Superior segment", "Anteromedial bazal segment",
                        "Lateral bazal segment", "Posterior bazal segment"]
    }

    def lobar_seviye_changed(event):
        selected_lob = lobar_seviye_var.get()
        segments = segment_options.get(selected_lob, [])
        segmental_seviye_combobox.config(state='readonly')
        segmental_seviye_combobox['values'] = segments
        segmental_seviye_var.set(segments[0])

    lobar_seviye_combobox.bind("<<ComboboxSelected>>", lobar_seviye_changed)

    # 'bronşunda' sabit ifadesi
    tk.Label(neoplastik_frame, text="bronşunda").grid(row=0, column=4, padx=10)

    # 3. Tutulum seviyesi
    tk.Label(neoplastik_frame, text="Tutulum Seviyesi:").grid(row=1, column=0, sticky='e')
    tutulum_seviye_var = tk.StringVar(value='__NO_SELECTION__')
    tutulum_seviye_combobox = ttk.Combobox(neoplastik_frame, textvariable=tutulum_seviye_var, state='readonly')
    tutulum_seviye_combobox['values'] = [
        "bronşu oklude eden",
        "bronş lümenini daraltan",
        "bronşu çevreleyen"
    ]
    tutulum_seviye_combobox.grid(row=1, column=1, sticky='w')

    # 4. Boyut girişi
    tk.Label(neoplastik_frame, text="Boyut:").grid(row=1, column=2, sticky='e')
    boyut_var = tk.StringVar(value='')
    boyut_entry = tk.Entry(neoplastik_frame, textvariable=boyut_var)
    boyut_entry.grid(row=1, column=3, sticky='w')
    tk.Label(neoplastik_frame, text="mm").grid(row=1, column=4, sticky='w')

    # 'neoplastik lezyon izlendi.' sabit ifadesi
    tk.Label(neoplastik_frame, text="neoplastik lezyon izlendi.").grid(row=1, column=5, padx=10)

    # Yayılım bölümü
    yayilim_frame = tk.LabelFrame(ana_frame, text="Yayılım", font=("Arial", 12))
    yayilim_frame.pack(fill='x', padx=10, pady=5)

    # Yayılım seçenekleri
    yayilim_options = [
        "Lezyon ile ipsilateral lenf nodlarının ara planı ayırt edilemedi.",
        "Lezyon ile neden olduğu obstruktif pnömoninin ara sınırları ayırt edilemedi."
    ]

    yayilim_vars = {}
    for i, option in enumerate(yayilim_options):
        var = tk.IntVar(value=0)
        chk = tk.Checkbutton(yayilim_frame, text=option, variable=var)
        chk.grid(row=i, column=0, sticky='w')
        yayilim_vars[option] = var

    # Tümoral doku bölümü
    td_frame = tk.Frame(yayilim_frame)
    td_frame.grid(row=2, column=0, sticky='w', pady=5)

    td_var = tk.IntVar(value=0)
    td_chk = tk.Checkbutton(td_frame, text="Tümoral doku", variable=td_var)
    td_chk.grid(row=0, column=0, sticky='w')

    # Sağ/Sol seçimi
    taraf_var = tk.StringVar(value='__NO_SELECTION__')
    sag_rb = tk.Radiobutton(td_frame, text="Sağ", variable=taraf_var, value="sağ", state='disabled')
    sol_rb = tk.Radiobutton(td_frame, text="Sol", variable=taraf_var, value="sol", state='disabled')
    sag_rb.grid(row=1, column=0, sticky='w')
    sol_rb.grid(row=2, column=0, sticky='w')

    # Pulmoner arter seviyeleri
    pa_seviyesi_var = tk.StringVar(value='__NO_SELECTION__')
    pa_seviyeleri = [
        "pulmoner arter seviyesi",
        "üst lob pulmoner arteri",
        "orta lob pulmoner arteri",
        "lingular lob pulmoner arteri",
        "alt lob pulmoner arteri"
    ]
    pa_radiobuttons = []
    for i, pa in enumerate(pa_seviyeleri):
        rb = tk.Radiobutton(td_frame, text=pa, variable=pa_seviyesi_var, value=pa, state='disabled')
        rb.grid(row=i + 1, column=1, sticky='w')
        pa_radiobuttons.append(rb)

    # Temas/Çevreleme seçimi
    temas_var = tk.StringVar(value='__NO_SELECTION__')
    temas_rb1 = tk.Radiobutton(td_frame, text="temas etmekte", variable=temas_var, value="temas etmekte",
                               state='disabled')
    temas_rb2 = tk.Radiobutton(td_frame, text="çevreleyip inceltilmiş (invazyon)", variable=temas_var,
                               value="çevreleyip inceltilmiş (invazyon)", state='disabled')
    temas_rb1.grid(row=1, column=2, sticky='w')
    temas_rb2.grid(row=2, column=2, sticky='w')

    # Taraf seçimi değiştiğinde
    def taraf_var_changed(*args):
        taraf = taraf_var.get()
        if taraf and taraf != '__NO_SELECTION__':
            for rb in pa_radiobuttons:
                pa_text = rb['text']
                if (taraf == "sağ" and pa_text == "lingular lob pulmoner arteri") or (
                        taraf == "sol" and pa_text == "orta lob pulmoner arteri"):
                    rb.config(state='disabled')
                    if pa_seviyesi_var.get() == pa_text:
                        pa_seviyesi_var.set('__NO_SELECTION__')
                else:
                    rb.config(state='normal')
            temas_rb1.config(state='normal')
            temas_rb2.config(state='normal')
        else:
            pa_seviyesi_var.set('__NO_SELECTION__')
            for rb in pa_radiobuttons:
                rb.config(state='disabled')
            temas_var.set('__NO_SELECTION__')
            temas_rb1.config(state='disabled')
            temas_rb2.config(state='disabled')

    # Tümoral doku seçimi değiştiğinde
    def td_var_changed():
        if td_var.get():
            sag_rb.config(state='normal')
            sol_rb.config(state='normal')
        else:
            taraf_var.set('__NO_SELECTION__')
            sag_rb.config(state='disabled')
            sol_rb.config(state='disabled')
            pa_seviyesi_var.set('__NO_SELECTION__')
            for rb in pa_radiobuttons:
                rb.config(state='disabled')
            temas_var.set('__NO_SELECTION__')
            temas_rb1.config(state='disabled')
            temas_rb2.config(state='disabled')

    taraf_var.trace_add('write', taraf_var_changed)
    td_var.trace_add('write', lambda *args: td_var_changed())

    # Perikard ara planı bölümü
    perikard_frame = tk.Frame(yayilim_frame)
    perikard_frame.grid(row=3, column=0, sticky='w', pady=5)

    perikard_var = tk.IntVar(value=0)
    perikard_chk = tk.Checkbutton(perikard_frame, text="Lezyon ile", variable=perikard_var)
    perikard_chk.grid(row=0, column=0, sticky='w')

    # Perikard seçenekleri
    perikard_secenek_var = tk.StringVar(value='__NO_SELECTION__')
    perikard_options = [
        "perikard ara planı seçilebilmektedir.",
        "superior recess düzeyinde perikard ara planı seçilemedi.",
        "RA düzeyinde perikard ara planı seçilemedi.",
        "LA düzeyinde perikard ara planı seçilemedi.",
        "RV düzeyinde perikard ara planı seçilemedi.",
        "LV düzeyinde perikard ara planı seçilemedi."
    ]

    for i, option in enumerate(perikard_options):
        rb = tk.Radiobutton(perikard_frame, text=option, variable=perikard_secenek_var, value=option, state='disabled')
        rb.grid(row=i, column=1, sticky='w')

    def perikard_var_changed():
        if perikard_var.get():
            for child in perikard_frame.winfo_children():
                if isinstance(child, tk.Radiobutton):
                    child.config(state='normal')
        else:
            perikard_secenek_var.set('__NO_SELECTION__')
            for child in perikard_frame.winfo_children():
                if isinstance(child, tk.Radiobutton):
                    child.config(state='disabled')

    perikard_var.trace_add('write', lambda *args: perikard_var_changed())

    # Esophagus ara planı
    esophagus_var = tk.IntVar(value=0)
    esophagus_frame = tk.Frame(yayilim_frame)
    esophagus_frame.grid(row=4, column=0, sticky='w')
    esophagus_chk = tk.Checkbutton(esophagus_frame, text="Lezyon ile esophagus ara planı", variable=esophagus_var)
    esophagus_chk.pack(side='left')

    esophagus_secenek_var = tk.StringVar(value='__NO_SELECTION__')
    esophagus_rb1 = tk.Radiobutton(esophagus_frame, text="seçilmektedir.", variable=esophagus_secenek_var,
                                   value="seçilmektedir.", state='disabled')
    esophagus_rb2 = tk.Radiobutton(esophagus_frame, text="seçilemedi.", variable=esophagus_secenek_var,
                                   value="seçilemedi.", state='disabled')
    esophagus_rb1.pack(side='left')
    esophagus_rb2.pack(side='left')

    def esophagus_var_changed():
        if esophagus_var.get():
            esophagus_rb1.config(state='normal')
            esophagus_rb2.config(state='normal')
        else:
            esophagus_secenek_var.set('__NO_SELECTION__')
            esophagus_rb1.config(state='disabled')
            esophagus_rb2.config(state='disabled')

    esophagus_var.trace_add('write', lambda *args: esophagus_var_changed())

    # Mediastinal plevra ara planı
    mediastinal_var = tk.IntVar(value=0)
    mediastinal_frame = tk.Frame(yayilim_frame)
    mediastinal_frame.grid(row=5, column=0, sticky='w')
    mediastinal_chk = tk.Checkbutton(mediastinal_frame, text="Lezyon ile mediastinal plevra ara planı",
                                     variable=mediastinal_var)
    mediastinal_chk.pack(side='left')

    mediastinal_secenek_var = tk.StringVar(value='__NO_SELECTION__')
    mediastinal_rb1 = tk.Radiobutton(mediastinal_frame, text="seçilmektedir.", variable=mediastinal_secenek_var,
                                     value="seçilmektedir.", state='disabled')
    mediastinal_rb2 = tk.Radiobutton(mediastinal_frame, text="seçilemedi.", variable=mediastinal_secenek_var,
                                     value="seçilemedi.", state='disabled')
    mediastinal_rb1.pack(side='left')
    mediastinal_rb2.pack(side='left')

    def mediastinal_var_changed():
        if mediastinal_var.get():
            mediastinal_rb1.config(state='normal')
            mediastinal_rb2.config(state='normal')
        else:
            mediastinal_secenek_var.set('__NO_SELECTION__')
            mediastinal_rb1.config(state='disabled')
            mediastinal_rb2.config(state='disabled')

    mediastinal_var.trace_add('write', lambda *args: mediastinal_var_changed())

    # Fissür tarafından sınırlandırılma
    fissur_var = tk.IntVar(value=0)
    fissur_chk = tk.Checkbutton(yayilim_frame, text="Lezyon fissür tarafından sınırlandırılmaktadır",
                                variable=fissur_var)
    fissur_chk.grid(row=6, column=0, sticky='w')

    # Metin Toplama Kutucuğu fonksiyonu
    def metin_toplama_kutucugu_goster():
        metin_toplama_kutucugu = tk.Toplevel()
        metin_toplama_kutucugu.title("Metin Toplama Kutucuğu")
        metin_toplama_kutucugu_text = tk.Text(metin_toplama_kutucugu, wrap=tk.WORD)
        metin_toplama_kutucugu_text.pack(expand=True, fill='both')

        # Metin Oluşturma
        cumleler = []

        # Non-neoplastik bulgular
        for option, var in non_neoplastik_vars.items():
            if var.get():
                cumleler.append(option)

        # Neoplastik bulgular
        if lobar_seviye_var.get() != '__NO_SELECTION__' and tutulum_seviye_var.get() != '__NO_SELECTION__' and boyut_var.get():
            lob = lobar_seviye_var.get()
            segment = segmental_seviye_var.get()
            if segment != "Segmental tutulum yok":
                bronş_text = f"{lob} {segment.lower()} bronşunda"
            else:
                bronş_text = f"{lob} bronşunda"
            tutulum = tutulum_seviye_var.get()
            boyut = boyut_var.get()
            # Boyut ifadesi
            if any(x in boyut for x in ['x', 'X', '×']):
                boyut_text = f"{boyut} mm boyutlarda"
            else:
                boyut_text = f"{boyut} mm kalınlıkta"
            cumle = f"{bronş_text} {tutulum} {boyut_text} neoplastik lezyon izlendi."
            cumleler.append(cumle)

        # Yayılım bölümü
        for option, var in yayilim_vars.items():
            if var.get():
                cumleler.append(option)

        # Tümoral doku
        if td_var.get():
            taraf = taraf_var.get()
            pa_seviyesi = pa_seviyesi_var.get()
            temas = temas_var.get()
            if taraf != '__NO_SELECTION__' and pa_seviyesi != '__NO_SELECTION__' and temas != '__NO_SELECTION__':
                if temas == "temas etmekte":
                    cumle = f"Tümoral doku {taraf} {pa_seviyesi} ile temas etmektedir."
                else:
                    if pa_seviyesi.endswith("seviyesi"):
                        ekli_pa = pa_seviyesi + "ni"
                    else:
                        ekli_pa = pa_seviyesi + "ni"
                    cumle = f"Tümoral doku {taraf} {ekli_pa} çevreleyip inceltmiştir (invazyon)."
                cumleler.append(cumle)

        # Perikard ara planı
        if perikard_var.get():
            perikard_secenek = perikard_secenek_var.get()
            if perikard_secenek != '__NO_SELECTION__':
                cumle = f"Lezyon ile {perikard_secenek}"
                cumleler.append(cumle)

        # Esophagus ara planı
        if esophagus_var.get():
            secenek = esophagus_secenek_var.get()
            if secenek != '__NO_SELECTION__':
                cumle = f"Lezyon ile esophagus ara planı {secenek}"
                cumleler.append(cumle)

        # Mediastinal plevra ara planı
        if mediastinal_var.get():
            secenek = mediastinal_secenek_var.get()
            if secenek != '__NO_SELECTION__':
                cumle = f"Lezyon ile mediastinal plevra ara planı {secenek}"
                cumleler.append(cumle)

        # Fissür tarafından sınırlandırılma
        if fissur_var.get():
            cumle = "Lezyon fissür tarafından sınırlandırılmaktadır."
            cumleler.append(cumle)

        # Metin alanına ekleme
        for cumle in cumleler:
            metin_toplama_kutucugu_text.insert(tk.END, cumle + "\n")

        # KAYDET butonuna basıldığında alanları sıfırlama
        def kaydet_ve_sifirla():
            metin = metin_toplama_kutucugu_text.get('1.0', tk.END).strip()
            replace_zone_text('ZONE6', metin)
            metin_toplama_kutucugu.destroy()
            # Alanları sıfırla
            for var in non_neoplastik_vars.values():
                var.set(0)
            lobar_seviye_var.set('__NO_SELECTION__')
            segmental_seviye_var.set('__NO_SELECTION__')
            segmental_seviye_combobox.config(state='disabled')
            tutulum_seviye_var.set('__NO_SELECTION__')
            boyut_var.set('')
            # Yayılım
            for var in yayilim_vars.values():
                var.set(0)
            td_var.set(0)
            taraf_var.set('__NO_SELECTION__')
            pa_seviyesi_var.set('__NO_SELECTION__')
            temas_var.set('__NO_SELECTION__')
            perikard_var.set(0)
            perikard_secenek_var.set('__NO_SELECTION__')
            esophagus_var.set(0)
            esophagus_secenek_var.set('__NO_SELECTION__')
            mediastinal_var.set(0)
            mediastinal_secenek_var.set('__NO_SELECTION__')
            fissur_var.set(0)

        tk.Button(metin_toplama_kutucugu, text="RAPORA EKLE", command=kaydet_ve_sifirla).pack(pady=5)

    # Buton çerçevesi
    buton_frame = tk.Frame(ana_frame)
    buton_frame.pack(pady=10)

    # KAYDET ve KAPAT butonları
    tk.Button(buton_frame, text="KAYDET", command=metin_toplama_kutucugu_goster).pack(side='left', padx=10)
    tk.Button(buton_frame, text="KAPAT", command=pencere.destroy).pack(side='left', padx=10)


def zone7_penceresi():
    import tkinter as tk
    from tkinter import ttk
    from tkinter import messagebox

    pencere = tk.Toplevel()
    pencere.title("Parankimal Lezyonlar")
    pencere.geometry("400x450")  # Yükseklik azaltıldı

    ana_frame = tk.Frame(pencere)
    ana_frame.pack(fill='both', expand=True)

    lezyon_tipleri = [
        "Atelektazi",
        "Amfizem",
        "Konsolidasyon",
        "Buzlu cam, Mozaik patern, Tree-in-bud",
        "Septal kalınlaşma",
        "Kitle",
        "Nodül",
        "Kavite",
        "Bronşektazi",
        "Bül",
        "Interstisiyel Suit",
        "Pnx",
        "Travma",
        "Diğer"
    ]

    buton_frame = tk.Frame(ana_frame)
    buton_frame.pack(pady=10)

    # Metin toplama kutucuğu
    metin_toplama_kutucugu = tk.Toplevel()
    metin_toplama_kutucugu.title("Metin Toplama Kutucuğu")
    metin_toplama_kutucugu.geometry("400x500+800+500")  # Yükseklik ayarlandı
    metin_toplama_kutucugu_text = tk.Text(metin_toplama_kutucugu, wrap=tk.WORD)
    metin_toplama_kutucugu_text.pack(expand=True, fill='both')

    def rapora_ekle():
        metin = metin_toplama_kutucugu_text.get('1.0', tk.END).strip()
        replace_zone_text('ZONE7', metin)
        metin_toplama_kutucugu.destroy()
        pencere.destroy()

    tk.Button(metin_toplama_kutucugu, text="RAPORA EKLE", command=rapora_ekle).pack(pady=5)

    for lezyon in lezyon_tipleri:
        btn = tk.Button(buton_frame, text=lezyon, width=30, command=lambda l=lezyon: lezyon_penceresi(l))
        btn.pack(pady=2)

    # 'Diğer' butonunun altına boşluk bırakmak için
    tk.Label(buton_frame, text="").pack(pady=5)
    tk.Button(buton_frame, text="KAPAT", width=30, command=pencere.destroy).pack(pady=5)

    def lezyon_penceresi(lezyon_tipi):
        alt_pencere = tk.Toplevel()
        alt_pencere.title(lezyon_tipi)
        alt_pencere.geometry("800x600")

        ana_frame = tk.Frame(alt_pencere)
        ana_frame.pack(fill='both', expand=True, padx=10, pady=10)

        # Scrollbar eklemek için Canvas kullanımı
        canvas = tk.Canvas(ana_frame)
        scrollbar = tk.Scrollbar(ana_frame, orient="vertical", command=canvas.yview)
        scrollable_frame = tk.Frame(canvas)

        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(
                scrollregion=canvas.bbox("all")
            )
        )

        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)

        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")

        # Ortak kullanılacak metin değişkeni
        cumle_var = tk.StringVar()
        cumle_label = tk.Label(scrollable_frame, textvariable=cumle_var, font=("Arial", 12), wraplength=750,
                               justify='left')
        cumle_label.pack(pady=10)

        # Lokalizasyon checkboxlarını tanımlama
        lokalizasyon_vars = {}

        def lokalizasyon_secimi(parent_frame):
            lokalizasyon_frame = tk.Frame(parent_frame)
            lokalizasyon_frame.pack(fill='x', padx=10, pady=5)

            first_column = [
                "Her iki akciğerde",
                "Her iki apekste",
                "Her iki üst lobda",
                "Her iki alt lobda",
                "Her iki kostofrenik sinüs düzeyinde"
            ]

            second_column = [
                "Sağ üst lob apikal segmentte",
                "Sağ üst lob posterior segmentte",
                "Sağ üst lob anterior segmentte",
                "Orta lobda",
                "Orta lob medial segmentte",
                "Orta lob lateral segmentte",
                "Sağ alt lob superior segmentte",
                "Sağ alt lob anterior bazal segmentte",
                "Sağ alt lob lateral bazal segmentte",
                "Sağ alt lob medial bazal segmentte",
                "Sağ alt lob posterior bazal segmentte"
            ]

            third_column = [
                "Sol üst lob apikal segmentte",
                "Sol üst lob posterior segmentte",
                "Sol üst lob anterior segmentte",
                "Lingular lobda",
                "Lingula superior segmentte",
                "Lingula inferior segmentte",
                "Sol alt lob superior segmentte",
                "Sol alt lob anteromedial bazal segmentte",
                "Sol alt lob lateral bazal segmentte",
                "Sol alt lob posterior bazal segmentte"
            ]

            max_rows = max(len(first_column), len(second_column), len(third_column))
            for i in range(max_rows):
                if i < len(first_column):
                    secenek = first_column[i]
                    var = tk.IntVar(value=0)
                    chk = tk.Checkbutton(lokalizasyon_frame, text=secenek, variable=var,
                                         command=lambda: guncelle_cumle())
                    chk.grid(row=i, column=0, sticky='w')
                    lokalizasyon_vars[secenek] = var

                if i < len(second_column):
                    secenek = second_column[i]
                    var = tk.IntVar(value=0)
                    chk = tk.Checkbutton(lokalizasyon_frame, text=secenek, variable=var,
                                         command=lambda: guncelle_cumle())
                    chk.grid(row=i, column=1, sticky='w')
                    lokalizasyon_vars[secenek] = var

                if i < len(third_column):
                    secenek = third_column[i]
                    var = tk.IntVar(value=0)
                    chk = tk.Checkbutton(lokalizasyon_frame, text=secenek, variable=var,
                                         command=lambda: guncelle_cumle())
                    chk.grid(row=i, column=2, sticky='w')
                    lokalizasyon_vars[secenek] = var

        # Lezyon tipine göre arayüz oluşturma
        if lezyon_tipi == "Atelektazi":
            # Ortak kullanılacak sözlükler
            secenek_vars = {}

            # Lokalizasyon seçimi
            lokalizasyon_secimi(scrollable_frame)

            secenekler = [
                "[LOKALİZASYON] subsegmental atelektazi izlendi.",
                "[LOKALİZASYON] band atelektazi izlendi.",
                "[LOKALİZASYON] atelektatik değişiklikler ve çevresel septal kalınlaşmalar izlendi.",
                "[LOKALİZASYON] plevral effüzyona bağlı pasif atelektazi izlendi.",
                "[LOKALİZASYON] kompresyon atelektazisi izlendi.",
                "[LOKALİZASYON] atelektazi izlendi. Mediastinal sağa/sola shift izlendi.",
                "[LOKALİZASYON] düzeyinde bronş-açık atelektazi ayırt edildi."
            ]

            # Seçenekleri oluşturma
            tk.Label(scrollable_frame, text="Seçenekler:", font=("Arial", 12)).pack(anchor='w', pady=5)
            secenek_frame = tk.Frame(scrollable_frame)
            secenek_frame.pack(fill='both', expand=True, padx=10, pady=5)
            for i, secenek in enumerate(secenekler):
                var = tk.IntVar()
                chk = tk.Checkbutton(
                    secenek_frame,
                    text=secenek.replace('[LOKALİZASYON]', ''),
                    variable=var,
                    command=lambda: guncelle_cumle(),
                    wraplength=700,
                    justify='left'
                )
                chk.pack(anchor='w')
                secenek_vars[secenek] = var

            def guncelle_cumle():
                cumleler = []
                secilen_lokalizasyonlar = [secenek for secenek, var in lokalizasyon_vars.items() if var.get()]
                if secilen_lokalizasyonlar:
                    if len(secilen_lokalizasyonlar) == 1:
                        lokalizasyon = secilen_lokalizasyonlar[0]
                    elif len(secilen_lokalizasyonlar) == 2:
                        lokalizasyon = f"{secilen_lokalizasyonlar[0]} ve {secilen_lokalizasyonlar[1]}"
                    else:
                        lokalizasyon = ", ".join(secilen_lokalizasyonlar[:-1]) + f" ve {secilen_lokalizasyonlar[-1]}"
                else:
                    lokalizasyon = "_________"

                for secenek, var in secenek_vars.items():
                    if var.get():
                        cumle = secenek.replace('[LOKALİZASYON]', lokalizasyon)
                        cumleler.append(cumle)
                cumle_var.set('\n'.join(cumleler))

            # Lokalizasyon değiştiğinde cümleyi güncelle
            for var in lokalizasyon_vars.values():
                var.trace_add('write', lambda *args: guncelle_cumle())

            # Başlangıçta cümleyi güncelle
            guncelle_cumle()

            # Butonlar
            buton_frame = tk.Frame(scrollable_frame)
            buton_frame.pack(pady=10)
            ekle_btn = tk.Button(buton_frame, text="EKLE", command=lambda: metni_ekle())
            ekle_btn.pack(side='left', padx=10)
            kapat_btn = tk.Button(buton_frame, text="KAPAT", command=alt_pencere.destroy)
            kapat_btn.pack(side='left', padx=10)

            def metni_ekle():
                metin = cumle_var.get()
                metin_toplama_kutucugu_text.insert(tk.END, metin + "\n")
                alt_pencere.destroy()

        elif lezyon_tipi == "Amfizem":
            # Ortak kullanılacak sözlükler
            secenek_vars = {}

            # Lokalizasyon seçimi
            lokalizasyon_secimi(scrollable_frame)

            secenekler = [
                "Her iki üst lobda paraseptal amfizem izlendi.",
                "Her iki üst lobda Fleischner mild CL amfizem izlendi.",
                "Her iki üst lobda Fleischner mioderate CL amfizem izlendi.",
                "Her iki üst lobda Fleischner confluent CL amfizem izlenmiş olup ekspanse olmuş sekonder pulmoner lobüller mevcuttur.",
                "Her iki üst lobda Fleischner advanced destructive CL amfizem izlendi."
                "[LOKALİZASYON] amfizematöz değişiklikler izlendi."
            ]

            # Seçenekleri oluşturma
            tk.Label(scrollable_frame, text="Seçenekler:", font=("Arial", 12)).pack(anchor='w', pady=5)
            secenek_frame = tk.Frame(scrollable_frame)
            secenek_frame.pack(fill='both', expand=True, padx=10, pady=5)
            for i, secenek in enumerate(secenekler):
                var = tk.IntVar()
                chk = tk.Checkbutton(
                    secenek_frame,
                    text=secenek.replace('[LOKALİZASYON]', ''),
                    variable=var,
                    command=lambda: guncelle_cumle(),
                    wraplength=700,
                    justify='left'
                )
                chk.pack(anchor='w')
                secenek_vars[secenek] = var

            def guncelle_cumle():
                cumleler = []
                secilen_lokalizasyonlar = [secenek for secenek, var in lokalizasyon_vars.items() if var.get()]
                if secilen_lokalizasyonlar:
                    if len(secilen_lokalizasyonlar) == 1:
                        lokalizasyon = secilen_lokalizasyonlar[0]
                    elif len(secilen_lokalizasyonlar) == 2:
                        lokalizasyon = f"{secilen_lokalizasyonlar[0]} ve {secilen_lokalizasyonlar[1]}"
                    else:
                        lokalizasyon = ", ".join(secilen_lokalizasyonlar[:-1]) + f" ve {secilen_lokalizasyonlar[-1]}"
                else:
                    lokalizasyon = "_________"

                for secenek, var in secenek_vars.items():
                    if var.get():
                        cumle = secenek.replace('[LOKALİZASYON]', lokalizasyon)
                        cumleler.append(cumle)
                cumle_var.set('\n'.join(cumleler))

            # Lokalizasyon değiştiğinde cümleyi güncelle
            for var in lokalizasyon_vars.values():
                var.trace_add('write', lambda *args: guncelle_cumle())

            # Başlangıçta cümleyi güncelle
            guncelle_cumle()

            # Butonlar
            buton_frame = tk.Frame(scrollable_frame)
            buton_frame.pack(pady=10)
            ekle_btn = tk.Button(buton_frame, text="EKLE", command=lambda: metni_ekle())
            ekle_btn.pack(side='left', padx=10)
            kapat_btn = tk.Button(buton_frame, text="KAPAT", command=alt_pencere.destroy)
            kapat_btn.pack(side='left', padx=10)

            def metni_ekle():
                metin = cumle_var.get()
                metin_toplama_kutucugu_text.insert(tk.END, metin + "\n")
                alt_pencere.destroy()

        elif lezyon_tipi == "Konsolidasyon":
            # Ortak kullanılacak sözlükler
            secenek_vars = {}

            # Lokalizasyon seçimi
            lokalizasyon_secimi(scrollable_frame)

            secenekler = [
                "[LOKALİZASYON] tree-in-bud izlendi.",
                "[LOKALİZASYON] pnömonik konsolidasyon izlendi.",
                "[LOKALİZASYON] çevresel buzlu camın eşlik ettiği konsolidasyon izlendi.",
                "[LOKALİZASYON] hava bronkogramları içeren konsolidasyon izlendi.",
                "[LOKALİZASYON] tümüyle konsolidedir.",
                "[LOKALİZASYON] yama tarzında konsolide alanlar izlendi.",
                "[LOKALİZASYON] yama tarzında konsolide alanlar ve çevresel buzlu cam izlendi.",
                "[LOKALİZASYON] konsolidasyon izlenmiş olup parapnömonik mayi izlendi.",
            ]

            # Seçenekleri oluşturma
            tk.Label(scrollable_frame, text="Seçenekler:", font=("Arial", 12)).pack(anchor='w', pady=5)
            secenek_frame = tk.Frame(scrollable_frame)
            secenek_frame.pack(fill='both', expand=True, padx=10, pady=5)
            for i, secenek in enumerate(secenekler):
                var = tk.IntVar()
                chk = tk.Checkbutton(
                    secenek_frame,
                    text=secenek.replace('[LOKALİZASYON]', ''),
                    variable=var,
                    command=lambda: guncelle_cumle(),
                    wraplength=700,
                    justify='left'
                )
                chk.pack(anchor='w')
                secenek_vars[secenek] = var

            def guncelle_cumle():
                cumleler = []
                secilen_lokalizasyonlar = [secenek for secenek, var in lokalizasyon_vars.items() if var.get()]
                if secilen_lokalizasyonlar:
                    if len(secilen_lokalizasyonlar) == 1:
                        lokalizasyon = secilen_lokalizasyonlar[0]
                    elif len(secilen_lokalizasyonlar) == 2:
                        lokalizasyon = f"{secilen_lokalizasyonlar[0]} ve {secilen_lokalizasyonlar[1]}"
                    else:
                        lokalizasyon = ", ".join(secilen_lokalizasyonlar[:-1]) + f" ve {secilen_lokalizasyonlar[-1]}"
                else:
                    lokalizasyon = "_________"

                for secenek, var in secenek_vars.items():
                    if var.get():
                        cumle = secenek.replace('[LOKALİZASYON]', lokalizasyon)
                        cumleler.append(cumle)
                cumle_var.set('\n'.join(cumleler))

            # Lokalizasyon değiştiğinde cümleyi güncelle
            for var in lokalizasyon_vars.values():
                var.trace_add('write', lambda *args: guncelle_cumle())

            # Başlangıçta cümleyi güncelle
            guncelle_cumle()

            # Butonlar
            buton_frame = tk.Frame(scrollable_frame)
            buton_frame.pack(pady=10)
            ekle_btn = tk.Button(buton_frame, text="EKLE", command=lambda: metni_ekle())
            ekle_btn.pack(side='left', padx=10)
            kapat_btn = tk.Button(buton_frame, text="KAPAT", command=alt_pencere.destroy)
            kapat_btn.pack(side='left', padx=10)

            def metni_ekle():
                metin = cumle_var.get()
                metin_toplama_kutucugu_text.insert(tk.END, metin + "\n")
                alt_pencere.destroy()

        elif lezyon_tipi == "Buzlu cam, Mozaik patern, Tree-in-bud":
            # Ortak kullanılacak sözlükler
            secenek_vars = {}

            # Lokalizasyon seçimi
            lokalizasyon_secimi(scrollable_frame)

            secenekler = [
                "Her iki akciğerde dependent akciğer alanlarında staza ait atenuasyon artışı izlendi.",
                "[LOKALİZASYON] buzlu cam infiltrasyonu ayırt edildi.",
                "[LOKALİZASYON] sekonder pulmoner lobül büyüklüğünde buzlu cam alanlar mevcuttur.",
                "[LOKALİZASYON] mozaik atenuasyon izlendi. Tetkik inspirium fazına aittir.",
                "[LOKALİZASYON] mozaik atenuasyon izlendi. Tetkik ekspirium fazına aittir. Küçük hava yolu hastalığı yönünden değerlendirilmesi önerilir."
                "[LOKALİZASYON] tree-in-bud paterni oluşturan nodüller izlendi",
            ]

            # Seçenekleri oluşturma
            tk.Label(scrollable_frame, text="Seçenekler:", font=("Arial", 12)).pack(anchor='w', pady=5)
            secenek_frame = tk.Frame(scrollable_frame)
            secenek_frame.pack(fill='both', expand=True, padx=10, pady=5)
            for i, secenek in enumerate(secenekler):
                var = tk.IntVar()
                chk = tk.Checkbutton(
                    secenek_frame,
                    text=secenek.replace('[LOKALİZASYON]', ''),
                    variable=var,
                    command=lambda: guncelle_cumle(),
                    wraplength=700,
                    justify='left'
                )
                chk.pack(anchor='w')
                secenek_vars[secenek] = var

            def guncelle_cumle():
                cumleler = []
                secilen_lokalizasyonlar = [secenek for secenek, var in lokalizasyon_vars.items() if var.get()]
                if secilen_lokalizasyonlar:
                    if len(secilen_lokalizasyonlar) == 1:
                        lokalizasyon = secilen_lokalizasyonlar[0]
                    elif len(secilen_lokalizasyonlar) == 2:
                        lokalizasyon = f"{secilen_lokalizasyonlar[0]} ve {secilen_lokalizasyonlar[1]}"
                    else:
                        lokalizasyon = ", ".join(secilen_lokalizasyonlar[:-1]) + f" ve {secilen_lokalizasyonlar[-1]}"
                else:
                    lokalizasyon = "_________"

                for secenek, var in secenek_vars.items():
                    if var.get():
                        cumle = secenek.replace('[LOKALİZASYON]', lokalizasyon)
                        cumleler.append(cumle)
                cumle_var.set('\n'.join(cumleler))

            # Lokalizasyon değiştiğinde cümleyi güncelle
            for var in lokalizasyon_vars.values():
                var.trace_add('write', lambda *args: guncelle_cumle())

            # Başlangıçta cümleyi güncelle
            guncelle_cumle()

            # Butonlar
            buton_frame = tk.Frame(scrollable_frame)
            buton_frame.pack(pady=10)
            ekle_btn = tk.Button(buton_frame, text="EKLE", command=lambda: metni_ekle())
            ekle_btn.pack(side='left', padx=10)
            kapat_btn = tk.Button(buton_frame, text="KAPAT", command=alt_pencere.destroy)
            kapat_btn.pack(side='left', padx=10)

            def metni_ekle():
                metin = cumle_var.get()
                metin_toplama_kutucugu_text.insert(tk.END, metin + "\n")
                alt_pencere.destroy()

        elif lezyon_tipi == "Septal kalınlaşma":
            # Ortak kullanılacak sözlükler
            secenek_vars = {}

            # Lokalizasyon seçimi
            lokalizasyon_secimi(scrollable_frame)

            secenekler = [
                "[LOKALİZASYON] septal kalınlaşmalar izlendi.",
                "[LOKALİZASYON] septal ve aksiyal interstisiyumda kalınlaşmalar izlendi.",
                "Her iki akciğerde apikobazal gradient göstermeksizin periferal alanlarda yoğunlaşan septal kalınlaşmalar izlendi.",
                "[LOKALİZASYON] periferal alanlarda yoğunlaşan septal kalınlaşmalar izlendi.",
                "Alt lob segmentlerinde sekonder pulmoner lobüllerin sınırlarının belirginleştiği 'smooth' interlobular septal kalınlaşmalar izlendi.",
                "[LOKALİZASYON] santral kesimde peribronşiyal cuffing izlenmiştir.",
                "Yaygın interlobular septal kalınlaşmalar izlenmiş olup lenfanjitik yayılım açısından anlamlı bulundu.",
                "[LOKALİZASYON] noduler tarzda septal kalınlaşmalar izlendi."
            ]

            # Seçenekleri oluşturma
            tk.Label(scrollable_frame, text="Seçenekler:", font=("Arial", 12)).pack(anchor='w', pady=5)
            secenek_frame = tk.Frame(scrollable_frame)
            secenek_frame.pack(fill='both', expand=True, padx=10, pady=5)
            for i, secenek in enumerate(secenekler):
                var = tk.IntVar()
                chk = tk.Checkbutton(
                    secenek_frame,
                    text=secenek.replace('[LOKALİZASYON]', ''),
                    variable=var,
                    command=lambda: guncelle_cumle(),
                    wraplength=700,
                    justify='left'
                )
                chk.pack(anchor='w')
                secenek_vars[secenek] = var

            def guncelle_cumle():
                cumleler = []
                secilen_lokalizasyonlar = [secenek for secenek, var in lokalizasyon_vars.items() if var.get()]
                if secilen_lokalizasyonlar:
                    if len(secilen_lokalizasyonlar) == 1:
                        lokalizasyon = secilen_lokalizasyonlar[0]
                    elif len(secilen_lokalizasyonlar) == 2:
                        lokalizasyon = f"{secilen_lokalizasyonlar[0]} ve {secilen_lokalizasyonlar[1]}"
                    else:
                        lokalizasyon = ", ".join(secilen_lokalizasyonlar[:-1]) + f" ve {secilen_lokalizasyonlar[-1]}"
                else:
                    lokalizasyon = "_________"

                for secenek, var in secenek_vars.items():
                    if var.get():
                        cumle = secenek.replace('[LOKALİZASYON]', lokalizasyon)
                        cumleler.append(cumle)
                cumle_var.set('\n'.join(cumleler))

            # Lokalizasyon değiştiğinde cümleyi güncelle
            for var in lokalizasyon_vars.values():
                var.trace_add('write', lambda *args: guncelle_cumle())

            # Başlangıçta cümleyi güncelle
            guncelle_cumle()

            # Butonlar
            buton_frame = tk.Frame(scrollable_frame)
            buton_frame.pack(pady=10)
            ekle_btn = tk.Button(buton_frame, text="EKLE", command=lambda: metni_ekle())
            ekle_btn.pack(side='left', padx=10)
            kapat_btn = tk.Button(buton_frame, text="KAPAT", command=alt_pencere.destroy)
            kapat_btn.pack(side='left', padx=10)

            def metni_ekle():
                metin = cumle_var.get()
                metin_toplama_kutucugu_text.insert(tk.END, metin + "\n")
                alt_pencere.destroy()

        elif lezyon_tipi == "Kitle":
            # Ortak kullanılacak sözlükler
            secenek_vars = {}

            # Lokalizasyon seçimi
            lokalizasyon_secimi(scrollable_frame)

            secenekler = [
                "[LOKALİZASYON] lokalizasyonunda [ÖLÇÜM] mm boyutlarında kitle lezyonu izlendi.",
                "[LOKALİZASYON] kitle lezyonu izlenmiş olup mediastinal yapılarla ilişkisi açısından ileri tetkik önerilir.",
                "[LOKALİZASYON] kitle lezyonu izlenmiş olup çevre dokulara invazyon göstermektedir.",
                "Yaygın interlobular septal kalınlaşmalar izlenmiş olup lenfanjitik yayılım açısından anlamlı bulundu.",
            ]

            # Ölçüm girişi
            tk.Label(scrollable_frame, text="Ölçüm (mm):", font=("Arial", 12)).pack(anchor='w', pady=5)
            olcum_var = tk.StringVar()
            olcum_entry = tk.Entry(scrollable_frame, textvariable=olcum_var)
            olcum_entry.pack(anchor='w', padx=10)
            olcum_var.trace_add('write', lambda *args: guncelle_cumle())

            # Seçenekleri oluşturma
            tk.Label(scrollable_frame, text="Seçenekler:", font=("Arial", 12)).pack(anchor='w', pady=5)
            secenek_frame = tk.Frame(scrollable_frame)
            secenek_frame.pack(fill='both', expand=True, padx=10, pady=5)
            for i, secenek in enumerate(secenekler):
                var = tk.IntVar()
                chk = tk.Checkbutton(
                    secenek_frame,
                    text=secenek.replace('[LOKALİZASYON]', '').replace('[ÖLÇÜM]', ''),
                    variable=var,
                    command=lambda: guncelle_cumle(),
                    wraplength=700,
                    justify='left'
                )
                chk.pack(anchor='w')
                secenek_vars[secenek] = var

            def guncelle_cumle():
                cumleler = []
                secilen_lokalizasyonlar = [secenek for secenek, var in lokalizasyon_vars.items() if var.get()]
                if secilen_lokalizasyonlar:
                    if len(secilen_lokalizasyonlar) == 1:
                        lokalizasyon = secilen_lokalizasyonlar[0]
                    elif len(secilen_lokalizasyonlar) == 2:
                        lokalizasyon = f"{secilen_lokalizasyonlar[0]} ve {secilen_lokalizasyonlar[1]}"
                    else:
                        lokalizasyon = ", ".join(secilen_lokalizasyonlar[:-1]) + f" ve {secilen_lokalizasyonlar[-1]}"
                else:
                    lokalizasyon = "_________"

                olcum = olcum_var.get().strip()

                for secenek, var in secenek_vars.items():
                    if var.get():
                        cumle = secenek.replace('[LOKALİZASYON]', lokalizasyon)
                        if '[ÖLÇÜM]' in cumle:
                            cumle = cumle.replace('[ÖLÇÜM]', olcum if olcum else '____')
                        cumleler.append(cumle)
                cumle_var.set('\n'.join(cumleler))

            # Lokalizasyon ve ölçüm değiştiğinde cümleyi güncelle
            for var in lokalizasyon_vars.values():
                var.trace_add('write', lambda *args: guncelle_cumle())

            # Başlangıçta cümleyi güncelle
            guncelle_cumle()

            # Butonlar
            buton_frame = tk.Frame(scrollable_frame)
            buton_frame.pack(pady=10)
            ekle_btn = tk.Button(buton_frame, text="EKLE", command=lambda: metni_ekle())
            ekle_btn.pack(side='left', padx=10)
            kapat_btn = tk.Button(buton_frame, text="KAPAT", command=alt_pencere.destroy)
            kapat_btn.pack(side='left', padx=10)

            def metni_ekle():
                metin = cumle_var.get()
                metin_toplama_kutucugu_text.insert(tk.END, metin + "\n")
                alt_pencere.destroy()

        elif lezyon_tipi == "Nodül":
            # Nodül için özel arayüz
            lokalizasyon_secimi(scrollable_frame)

            buyugu_var = tk.IntVar()
            buyugu_chk = tk.Checkbutton(scrollable_frame, text="Büyüğü ile başlat", variable=buyugu_var,
                                        command=lambda: buyugu_changed())
            buyugu_chk.pack(anchor='w', pady=5)

            olcum_var = tk.StringVar()
            tk.Label(scrollable_frame, text="Ölçüm (mm):", font=("Arial", 12)).pack(anchor='w', pady=5)
            olcum_entry = tk.Entry(scrollable_frame, textvariable=olcum_var)
            olcum_entry.pack(anchor='w', padx=10)
            olcum_var.trace_add('write', lambda *args: guncelle_cumle())

            alan3_var = tk.StringVar(value="None")
            alan3_frame = tk.Frame(scrollable_frame)
            alan3_frame.pack(fill='x', padx=10, pady=5)
            tk.Label(alan3_frame, text="Yerleşim:", font=("Arial", 12)).grid(row=0, column=0, sticky='w')

            alan3_options = [
                "subplevral",
                "parankimal",
                "perifissürel",
                "jukstaplevral",
                "mediastinal plevraya komşu",
                "diaframatik plevraya oturan"
            ]
            for i, option in enumerate(alan3_options):
                rb = tk.Radiobutton(alan3_frame, text=option, variable=alan3_var, value=option,
                                    command=lambda: guncelle_cumle())
                rb.grid(row=0, column=i + 1, sticky='w')

            alan4_var = tk.StringVar(value="None")
            alan4_frame = tk.Frame(scrollable_frame)
            alan4_frame.pack(fill='x', padx=10, pady=5)
            tk.Label(alan4_frame, text="Yapı:", font=("Arial", 12)).grid(row=0, column=0, sticky='w')

            alan4_options = ["solid", "partsolid", "buzlu cam", "kalsifiye"]
            for i, option in enumerate(alan4_options):
                rb = tk.Radiobutton(alan4_frame, text=option, variable=alan4_var, value=option,
                                    command=lambda: guncelle_cumle())
                rb.grid(row=0, column=i + 1, sticky='w')

            alan7_frame = tk.Frame(scrollable_frame)
            alan7_frame.pack(fill='x', padx=10, pady=5)
            tk.Label(alan7_frame, text="Kenar Özellikleri:", font=("Arial", 12)).grid(row=0, column=0, sticky='w')

            alan7_options = ["düzgün konturlu", "lobule konturlu", "spiküle konturlu", "sınırları düzensiz",
                             "buzlu cam halolu", "ters halo bulgulu"]
            alan7_vars = {}
            for i, option in enumerate(alan7_options):
                var = tk.IntVar()
                chk = tk.Checkbutton(alan7_frame, text=option, variable=var, command=lambda: guncelle_cumle())
                chk.grid(row=0, column=i + 1, sticky='w')
                alan7_vars[option] = var

            alan5_frame = tk.Frame(scrollable_frame)
            alan5_frame.pack(fill='x', padx=10, pady=5)
            tk.Label(alan5_frame, text="Diğer Nodüllerin Yapısı:", font=("Arial", 12)).grid(row=0, column=0, sticky='w')

            alan5_options = ["solid", "partsolid", "buzlu cam", "kalsifiye"]
            alan5_var = tk.StringVar(value="None")
            for i, option in enumerate(alan5_options):
                rb = tk.Radiobutton(alan5_frame, text=option, variable=alan5_var, value=option,
                                    command=lambda: guncelle_cumle())
                rb.grid(row=0, column=i + 1, sticky='w')

            alan6_var = tk.StringVar(value="nodül izlendi")
            alan6_frame = tk.Frame(scrollable_frame)
            alan6_frame.pack(fill='x', padx=10, pady=5)
            tk.Label(alan6_frame, text="Son ifade:", font=("Arial", 12)).grid(row=0, column=0, sticky='w')

            alan6_options = ["nodül izlendi", "kitle izlendi"]
            for i, option in enumerate(alan6_options):
                rb = tk.Radiobutton(alan6_frame, text=option, variable=alan6_var, value=option,
                                    command=lambda: guncelle_cumle())
                rb.grid(row=0, column=i + 1, sticky='w')

            def guncelle_cumle():
                cumle = ""
                if buyugu_var.get() == 1:
                    cumle += "Büyüğü "
                    secilen_lokalizasyonlar = [secenek.lower() for secenek, var in lokalizasyon_vars.items() if
                                               var.get()]
                    if secilen_lokalizasyonlar:
                        if len(secilen_lokalizasyonlar) == 1:
                            cumle += f"{secilen_lokalizasyonlar[0]}"
                        elif len(secilen_lokalizasyonlar) == 2:
                            cumle += f"{secilen_lokalizasyonlar[0]} ve {secilen_lokalizasyonlar[1]}"
                        else:
                            cumle += ", ".join(secilen_lokalizasyonlar[:-1])
                            cumle += f" ve {secilen_lokalizasyonlar[-1]}"
                    else:
                        cumle += "_________"

                    olcum = olcum_var.get().strip()
                    if olcum:
                        if any(x in olcum for x in ['x', 'X', '×']):
                            cumle += f", {olcum} mm boyutlarında"
                        else:
                            cumle += f", {olcum} mm çapında"
                    else:
                        cumle += ", ölçüm yapılmadı"

                    yerlesim = alan3_var.get()
                    if yerlesim != "None":
                        cumle += f", {yerlesim}"

                    yapi = alan4_var.get()
                    if yapi != "None":
                        cumle += f" {yapi}"

                    cumle += " nodül olmak üzere her iki akciğerde dağınık yerleşimli birkaç adet"

                    diger_yapi = alan5_var.get()
                    if diger_yapi != "None":
                        cumle += f" {diger_yapi}"

                    cumle += f" {alan6_var.get()}."
                else:
                    secilen_lokalizasyonlar = [secenek for secenek, var in lokalizasyon_vars.items() if var.get()]
                    if secilen_lokalizasyonlar:
                        if len(secilen_lokalizasyonlar) == 1:
                            cumle += f"{secilen_lokalizasyonlar[0]}"
                        elif len(secilen_lokalizasyonlar) == 2:
                            cumle += f"{secilen_lokalizasyonlar[0]} ve {secilen_lokalizasyonlar[1]}"
                        else:
                            cumle += ", ".join(secilen_lokalizasyonlar[:-1])
                            cumle += f" ve {secilen_lokalizasyonlar[-1]}"
                    else:
                        cumle += "_________"

                    olcum = olcum_var.get().strip()
                    if olcum:
                        if any(x in olcum for x in ['x', 'X', '×']):
                            cumle += f", {olcum} mm boyutlarında"
                        else:
                            cumle += f", {olcum} mm çapında"
                    else:
                        cumle += ", ölçüm yapılmadı"

                    yerlesim = alan3_var.get()
                    if yerlesim != "None":
                        cumle += f", {yerlesim}"

                    yapi = alan4_var.get()
                    if yapi != "None":
                        cumle += f" {yapi}"

                    secilen_konturlar = [option for option, var in alan7_vars.items() if var.get()]
                    if secilen_konturlar:
                        cumle += ", " + ", ".join(secilen_konturlar)

                    cumle += f" {alan6_var.get()}."

                cumle_var.set(cumle)

            guncelle_cumle()

            def buyugu_changed():
                if buyugu_var.get() == 1:
                    for widget in alan7_frame.winfo_children():
                        widget.config(state='disabled')
                    for widget in alan5_frame.winfo_children():
                        widget.config(state='normal')
                else:
                    for widget in alan7_frame.winfo_children():
                        widget.config(state='normal')
                    for widget in alan5_frame.winfo_children():
                        widget.config(state='disabled')
                        alan5_var.set("None")
                guncelle_cumle()

            buyugu_changed()

            # Butonlar
            buton_frame = tk.Frame(scrollable_frame)
            buton_frame.pack(pady=10)
            ekle_btn = tk.Button(buton_frame, text="EKLE", command=lambda: metni_ekle())
            ekle_btn.pack(side='left', padx=10)
            kapat_btn = tk.Button(buton_frame, text="KAPAT", command=alt_pencere.destroy)
            kapat_btn.pack(side='left', padx=10)

            def metni_ekle():
                metin = cumle_var.get()
                metin_toplama_kutucugu_text.insert(tk.END, metin + "\n")
                alt_pencere.destroy()

        elif lezyon_tipi == "Kavite":
            # Kavite için özel arayüz
            secenekler = [
                "[LOKALİZASYON] kaviter lezyon izlendi.",
                "[LOKALİZASYON] kaviter lezyon lümeninde sekresyon izlendi.",
                "[LOKALİZASYON] kaviter lezyon lümeninde hava-sıvı seviyesi izlendi.",
                "[LOKALİZASYON] kaviter lezyon lümeninde fungus ball ile uyumlu olabilecek görünüm izlendi.",
                "[LOKALİZASYON] cidar kalınlığı [CİDAR_KALINLIĞI] mm olan kaviter lezyon izlendi."
            ]

            # Değişkenleri tanımlayın
            secenek_vars = {}
            cidar_kalinligi_var = tk.StringVar()

            # Lokalizasyon seçimi
            lokalizasyon_secimi(scrollable_frame)

            # Seçenekleri oluşturma
            tk.Label(scrollable_frame, text="Seçenekler:", font=("Arial", 12)).pack(anchor='w', pady=5)
            secenek_frame = tk.Frame(scrollable_frame)
            secenek_frame.pack(fill='both', expand=True, padx=10, pady=5)
            for i, secenek in enumerate(secenekler):
                var = tk.IntVar()
                if "[CİDAR_KALINLIĞI]" in secenek:
                    # Son seçenek için özel işlem
                    def on_check_cidar(s=secenek):
                        if secenek_vars[s].get():
                            cidar_kalinligi_entry.config(state='normal')
                        else:
                            cidar_kalinligi_entry.config(state='disabled')
                            cidar_kalinligi_var.set('')
                        guncelle_cumle()

                    chk = tk.Checkbutton(secenek_frame,
                                         text=secenek.replace('[LOKALİZASYON]', '').replace('[CİDAR_KALINLIĞI]', ''),
                                         variable=var, command=on_check_cidar)
                else:
                    chk = tk.Checkbutton(secenek_frame, text=secenek.replace('[LOKALİZASYON]', ''), variable=var,
                                         command=lambda: guncelle_cumle())
                chk.pack(anchor='w')
                secenek_vars[secenek] = var

            # Cidar Kalınlığı Giriş Alanı (başlangıçta devre dışı)
            cidar_kalinligi_label = tk.Label(scrollable_frame, text="Cidar Kalınlığı (mm):", font=("Arial", 12))
            cidar_kalinligi_entry = tk.Entry(scrollable_frame, textvariable=cidar_kalinligi_var)
            cidar_kalinligi_label.pack(anchor='w', pady=5)
            cidar_kalinligi_entry.pack(anchor='w', padx=10)
            cidar_kalinligi_entry.config(state='disabled')

            def guncelle_cumle():
                cumleler = []
                secilen_lokalizasyonlar = [secenek for secenek, var in lokalizasyon_vars.items() if var.get()]
                if secilen_lokalizasyonlar:
                    if len(secilen_lokalizasyonlar) == 1:
                        lokalizasyon = secilen_lokalizasyonlar[0]
                    elif len(secilen_lokalizasyonlar) == 2:
                        lokalizasyon = f"{secilen_lokalizasyonlar[0]} ve {secilen_lokalizasyonlar[1]}"
                    else:
                        lokalizasyon = ", ".join(secilen_lokalizasyonlar[:-1]) + f" ve {secilen_lokalizasyonlar[-1]}"
                else:
                    lokalizasyon = "_________"

                for secenek, var in secenek_vars.items():
                    if var.get():
                        cumle = secenek
                        cumle = cumle.replace('[LOKALİZASYON]', lokalizasyon)
                        if "[CİDAR_KALINLIĞI]" in cumle:
                            cidar_kalinligi = cidar_kalinligi_var.get().strip()
                            if cidar_kalinligi:
                                cumle = cumle.replace('[CİDAR_KALINLIĞI]', cidar_kalinligi)
                            else:
                                cumle = cumle.replace('[CİDAR_KALINLIĞI]', '____')
                        cumleler.append(cumle)
                cumle_var.set('\n'.join(cumleler))

            # Değişiklikleri izleme
            for var in lokalizasyon_vars.values():
                var.trace_add('write', lambda *args: guncelle_cumle())

            cidar_kalinligi_var.trace_add('write', lambda *args: guncelle_cumle())

            # Başlangıçta cümleyi güncelle
            guncelle_cumle()

            # Butonlar
            buton_frame = tk.Frame(scrollable_frame)
            buton_frame.pack(pady=10)
            ekle_btn = tk.Button(buton_frame, text="EKLE", command=lambda: metni_ekle())
            ekle_btn.pack(side='left', padx=10)
            kapat_btn = tk.Button(buton_frame, text="KAPAT", command=alt_pencere.destroy)
            kapat_btn.pack(side='left', padx=10)

            def metni_ekle():
                metin = cumle_var.get()
                metin_toplama_kutucugu_text.insert(tk.END, metin + "\n")
                alt_pencere.destroy()

        elif lezyon_tipi == "Bronşektazi":
            # Bronşektazi için özel arayüz
            secenekler = [
                "[LOKALİZASYON] fibrotik değişiklikler ve traksiyon ektazisi izlendi.",
                "[LOKALİZASYON] tübüler bronşektazi izlendi.",
                "[LOKALİZASYON] kistik bronşektazi izlendi.",
                "[LOKALİZASYON] tübüler ve kistik bronşektaziler izlendi.",
                "[LOKALİZASYON] bronşektazik değişiklikler izlendi."
            ]

            secenek_vars = {}

            # Lokalizasyon seçimi
            lokalizasyon_secimi(scrollable_frame)

            # Ana çerçeve (ince çerçeve ile)
            main_options_frame = tk.Frame(scrollable_frame, bd=1, relief="solid")
            main_options_frame.pack(fill='both', expand=True, padx=10, pady=5)

            # Seçenekler (Checkboxlar)
            secenek_frame = tk.Frame(main_options_frame)
            secenek_frame.grid(row=0, column=0, sticky='nsew', padx=10, pady=5)
            tk.Label(secenek_frame, text="Seçenekler:", font=("Arial", 12)).pack(anchor='w', pady=5)
            for i, secenek in enumerate(secenekler):
                var = tk.IntVar()
                chk = tk.Checkbutton(secenek_frame, text=secenek.replace('[LOKALİZASYON]', ''), variable=var,
                                     command=lambda: guncelle_cumle())
                chk.pack(anchor='w')
                secenek_vars[secenek] = var

            # Sekresyon Radiobuttonları
            sekresyon_frame = tk.Frame(main_options_frame)
            sekresyon_frame.grid(row=0, column=1, sticky='nsew', padx=10, pady=5)
            tk.Label(sekresyon_frame, text="Sekresyon:", font=("Arial", 12)).pack(anchor='w', pady=5)
            sekresyon_var = tk.StringVar(value="")
            sekresyon_options = [
                "Lümende sekresyon ayırt edilmedi.",
                "Lümende sekresyon mevcuttur.",
                "Mucus plug izlenmiştir."
            ]
            for option in sekresyon_options:
                rb = tk.Radiobutton(sekresyon_frame, text=option, variable=sekresyon_var, value=option,
                                    command=lambda: guncelle_cumle())
                rb.pack(anchor='w')

            # Distal inflamasyon Radiobuttonları
            distal_frame = tk.Frame(main_options_frame)
            distal_frame.grid(row=0, column=2, sticky='nsew', padx=10, pady=5)
            tk.Label(distal_frame, text="Distal inflamasyon:", font=("Arial", 12)).pack(anchor='w', pady=5)
            distal_var = tk.StringVar(value="")
            distal_options = [
                "Ektazik bronşun distalinde konstriktif bronşiyolit bulguları oluşmuştur.",
                "Bronşektaziye eşlik eden konsolidasyon mevcuttur."
            ]
            for option in distal_options:
                rb = tk.Radiobutton(distal_frame, text=option, variable=distal_var, value=option,
                                    command=lambda: guncelle_cumle())
                rb.pack(anchor='w')

            def guncelle_cumle():
                cumleler = []
                secilen_lokalizasyonlar = [secenek for secenek, var in lokalizasyon_vars.items() if var.get()]
                if secilen_lokalizasyonlar:
                    if len(secilen_lokalizasyonlar) == 1:
                        lokalizasyon = secilen_lokalizasyonlar[0]
                    elif len(secilen_lokalizasyonlar) == 2:
                        lokalizasyon = f"{secilen_lokalizasyonlar[0]} ve {secilen_lokalizasyonlar[1]}"
                    else:
                        lokalizasyon = ", ".join(secilen_lokalizasyonlar[:-1]) + f" ve {secilen_lokalizasyonlar[-1]}"
                else:
                    lokalizasyon = "_________"

                for secenek, var in secenek_vars.items():
                    if var.get():
                        cumle = secenek.replace('[LOKALİZASYON]', lokalizasyon)
                        if sekresyon_var.get():
                            cumle += " " + sekresyon_var.get()
                        if distal_var.get():
                            cumle += " " + distal_var.get()
                        cumleler.append(cumle)
                cumle_var.set('\n'.join(cumleler))

            # Lokalizasyon değiştiğinde cümleyi güncelle
            for var in lokalizasyon_vars.values():
                var.trace_add('write', lambda *args: guncelle_cumle())

            # Başlangıçta cümleyi güncelle
            guncelle_cumle()

            # Butonlar
            buton_frame = tk.Frame(scrollable_frame)
            buton_frame.pack(pady=10)
            ekle_btn = tk.Button(buton_frame, text="EKLE", command=lambda: metni_ekle())
            ekle_btn.pack(side='left', padx=10)
            kapat_btn = tk.Button(buton_frame, text="KAPAT", command=alt_pencere.destroy)
            kapat_btn.pack(side='left', padx=10)

            def metni_ekle():
                metin = cumle_var.get()
                metin_toplama_kutucugu_text.insert(tk.END, metin + "\n")
                alt_pencere.destroy()

        elif lezyon_tipi == "Bül":
            # Bül için özel arayüz
            secenekler = [
                "Üst lob segmentlerinde amfizem bülleri izlendi.",
                "[LOKALİZASYON] büller dikkati çekti.",
                "Her iki akciğerde kostofrenik sinüsleri ayıran, boyut ve şekilleri değişkenlik gösteren bizarre büller izlenmiş olup Langerhans hücreli histiyositoz ön planda düşünüldü."
            ]

            secenek_vars = {}

            # Lokalizasyon seçimi
            lokalizasyon_secimi(scrollable_frame)

            # Seçenekleri oluşturma
            tk.Label(scrollable_frame, text="Seçenekler:", font=("Arial", 12)).pack(anchor='w', pady=5)
            secenek_frame = tk.Frame(scrollable_frame)
            secenek_frame.pack(fill='both', expand=True, padx=10, pady=5)
            for i, secenek in enumerate(secenekler):
                var = tk.IntVar()
                chk = tk.Checkbutton(
                    secenek_frame,
                    text=secenek.replace('[LOKALİZASYON]', ''),
                    variable=var,
                    command=lambda: guncelle_cumle(),
                    wraplength=700,
                    justify='left'
                )
                chk.pack(anchor='w')
                secenek_vars[secenek] = var

            def guncelle_cumle():
                cumleler = []
                secilen_lokalizasyonlar = [secenek for secenek, var in lokalizasyon_vars.items() if var.get()]
                if secilen_lokalizasyonlar:
                    if len(secilen_lokalizasyonlar) == 1:
                        lokalizasyon = secilen_lokalizasyonlar[0]
                    elif len(secilen_lokalizasyonlar) == 2:
                        lokalizasyon = f"{secilen_lokalizasyonlar[0]} ve {secilen_lokalizasyonlar[1]}"
                    else:
                        lokalizasyon = ", ".join(secilen_lokalizasyonlar[:-1]) + f" ve {secilen_lokalizasyonlar[-1]}"
                else:
                    lokalizasyon = "_________"

                for secenek, var in secenek_vars.items():
                    if var.get():
                        cumle = secenek.replace('[LOKALİZASYON]', lokalizasyon)
                        cumleler.append(cumle)
                cumle_var.set('\n'.join(cumleler))

            # Lokalizasyon değiştiğinde cümleyi güncelle
            for var in lokalizasyon_vars.values():
                var.trace_add('write', lambda *args: guncelle_cumle())

            # Başlangıçta cümleyi güncelle
            guncelle_cumle()

            # Butonlar
            buton_frame = tk.Frame(scrollable_frame)
            buton_frame.pack(pady=10)
            ekle_btn = tk.Button(buton_frame, text="EKLE", command=lambda: metni_ekle())
            ekle_btn.pack(side='left', padx=10)
            kapat_btn = tk.Button(buton_frame, text="KAPAT", command=alt_pencere.destroy)
            kapat_btn.pack(side='left', padx=10)

            def metni_ekle():
                metin = cumle_var.get()
                metin_toplama_kutucugu_text.insert(tk.END, metin + "\n")
                alt_pencere.destroy()

        elif lezyon_tipi == "Interstisiyel Suit":
            # İnterstisiyel Suit için özel arayüz
            # (Daha önce birlikte yazdığımız kod)

            # Ana çerçeve
            inter_frame = tk.Frame(scrollable_frame)
            inter_frame.pack(fill='both', expand=True, padx=10, pady=5)

            # UIP ve NSIP yan yana
            top_frame = tk.Frame(inter_frame)
            top_frame.pack(fill='x', pady=5)

            # UIP Frame
            uip_frame = tk.Frame(top_frame, bd=1, relief="solid", padx=10, pady=5)
            uip_frame.pack(side='left', fill='both', expand=True, padx=5)
            tk.Label(uip_frame, text="UIP", font=("Arial", 12, "bold")).pack(anchor='w')

            uip_var = tk.StringVar(value="")
            uip_options = [
                ("Definitive",
                 "Her iki akciğerde apikobazal gradient gösteren balpeteği, traksiyon ektazisi, retiküler bir patern yaratan subplevral septal kalınlaşmalar izlenmiş olup bulgular UIP ile uyumludur. Alternatif tanıları gerektiren nodüler infiltrasyon, buzlu cam infiltrasyonu izlenmedi."),
                ("Probable",
                 "Periferal subplevral alanda ince retiküler infiltrasyon, periferal traksiyon bronşiyolektazileri izlenmiş olup balpeteği saptanmadı. Bulgu probable UIP olarak değerlendirildi."),
                ("Indeterminate",
                 "Periferal ince retiküler infiltrasyon izlenmiş, bal peteği ya da traksiyon ektazisi ayırt edilmemiştir. Bulgu UIP yönünden indeterminedir. Radyolojik takip önerilir."),
                ("Alternative diagnosis",
                 "Hastada izlenen periferal septal kalınlaşmalar ve retikülasyon üst lob predominanttır. Bu bulgu UIP paterni için uyumsuzdur."),
                (
                    "Alternative diagnosis",
                    "Yaygın bir mikronodüler infiltrasyon izlenmiş olup UIP ile uyumlu değildir."),
                ("Alternative diagnosis", "Yaygın bir airtrapping izlenmiş olup UIP ile uyumlu değildir."),
                ("Alternative diagnosis",
                 "Plevral plaklar ve kalsifikasyonlar izlenmiş olup asbest maruziyetini ön planda düşündürmektedir.")
            ]
            for text, value in uip_options:
                rb = tk.Radiobutton(uip_frame, text=text, variable=uip_var, value=value,
                                    command=lambda: guncelle_cumle())
                rb.pack(anchor='w', pady=2)
                # Altındaki açıklama metni
                lbl = tk.Label(uip_frame, text=value, wraplength=350, justify='left', font=("Arial", 9))
                lbl.pack(anchor='w', padx=20)

            # NSIP Frame
            nsip_frame = tk.Frame(top_frame, bd=1, relief="solid", padx=10, pady=5)
            nsip_frame.pack(side='left', fill='both', expand=True, padx=5)
            tk.Label(nsip_frame, text="NSIP", font=("Arial", 12, "bold")).pack(anchor='w')

            nsip_vars = {}
            nsip_options = [
                "Bilateral ve simetrik, subplevral sparing gösteren periferal buzlu cam infiltrasyon izlenmiş olup NSIP ile uyumludur.",
                "Periferal buzlu cam zemininde retiküler infiltrasyon izlenmiş olup fibrotik NSIP ayırıcı tanıda yer alır.",
                "Bu zeminde bronkovasküler bundle kalınlaşması izlenmektedir.",
                "Bu zeminde ayrıca traksiyon bronşektazileri de ayırt edilmiş olup fibrotik NSIP ayırıcı tanıda yer alır.",
                "Alt lob segmentlerinde hacim kaybı ayırt edildi."
            ]
            for option in nsip_options:
                var = tk.IntVar()
                chk = tk.Checkbutton(nsip_frame, text=option, variable=var, command=lambda: guncelle_cumle())
                chk.pack(anchor='w')
                chk.config(wraplength=350, justify='left', font=("Arial", 9))
                nsip_vars[option] = var

            # Hipersensitivite pnömonisi ve RB yan yana
            bottom_frame = tk.Frame(inter_frame)
            bottom_frame.pack(fill='x', pady=5)

            # Hipersensitivite pnömonisi Frame
            hp_frame = tk.Frame(bottom_frame, bd=1, relief="solid", padx=10, pady=5)
            hp_frame.pack(side='left', fill='both', expand=True, padx=5)
            tk.Label(hp_frame, text="Hipersensitivite Pnömonisi", font=("Arial", 12, "bold")).pack(anchor='w')

            hp_var = tk.StringVar(value="")
            hp_options = [
                ("Non-fibrotik tipik",
                 "Non-fibrotik hipersensitivite pnömonisi için tipik bulgular izlenmektedir. Alt lobların görece korunduğu diffüz dağılımlı;"),
                ("Non-fibrotik uyumlu",
                 "Non-fibrotik hipersensitivite pnömonisi için uyumlu bulgular izlenmektedir. Diffüz dağılımlı;"),
                ("Fibrotik tipik",
                 "Fibrotik hipersensitivite pnömonisi için tipik bulgular izlenmiştir. Alt lobların görece korunduğu, üst lob segmentleri ve mid-zone'larda izlenen;"),
                ("Fibrotik uyumlu",
                 "Fibrotik hipersensitivite pnömonisi için tipik bulgular izlenmiştir. Alt lobların görece korunduğu, üst lob ağırlıklı;"),
                ("Indetermine", "Hipersensitivite pnömonisi için indetermine bir patern mevcuttur.")
            ]
            hp_checks = {
                "Non-fibrotik tipik": [
                    "Buzlu cam opasiteler izlendi.",
                    "Mozaik atenuasyon mevcuttur.",
                    "Kötü sınırlı sentrilobular nodüller izlendi.",
                    "Air-trapping izlendi."
                ],
                "Non-fibrotik uyumlu": [
                    "Parankimde uniform buzlu cam infiltrasyonlar ayırt edildi.",
                    "Parankimde dağınık uniform konsolidasyonlar ayırt edildi.",
                    "Parankimde kistik değişiklikler ayırt edildi."
                ],
                "Fibrotik tipik": [
                    "Parankimde kaba retikülasyonlar mevcuttur.",
                    "Parankim distorsiyonları ayırt edilse de traksiyon ektazisi ve bal peteği hakim değildir.",
                    "Kötü sınırlı sentriasiner nodüller eşlik etmektedir.",
                    "Mozaik atenuasyon izlendi.",
                    "Head-cheese bulgusu mevcuttur."
                ],
                "Fibrotik uyumlu": [
                    "UIP uyumlu bir patern izlendi.",
                    "Fibrotik değişikliklerin ayırt edildiği yaygın bir buzlu cam paterni izlendi.",
                    "Kötü sınırlı sentriasiner nodüller eşlik etmektedir.",
                    "Üç dansite bulgusu mevcuttur."
                ],
                "Indetermine": [
                    "Üst lob predominant bir UIP paterni izlendi. Ancak eşlik eden parankim ya da küçük hava yolu bulgusu izlenmedi.",
                    "Üst lob predominant bir NSIP paterni izlendi. Ancak eşlik eden parankim ya da küçük hava yolu bulgusu izlenmedi."
                ]
            }
            hp_check_vars = {}

            def hp_option_selected():
                guncelle_cumle()
                for frame in hp_check_frames.values():
                    for widget in frame.winfo_children():
                        widget.destroy()
                selected_option = hp_var.get()
                if selected_option:
                    base_text = dict(hp_options)[selected_option]
                    checks = hp_checks[selected_option]
                    frame = hp_check_frames[selected_option]
                    for option in checks:
                        var = tk.IntVar()
                        chk = tk.Checkbutton(frame, text=option, variable=var, command=lambda: guncelle_cumle())
                        chk.pack(anchor='w')
                        hp_check_vars[option] = var

            hp_check_frames = {}
            for text, value in hp_options:
                rb = tk.Radiobutton(hp_frame, text=text, variable=hp_var, value=text, command=hp_option_selected)
                rb.pack(anchor='w', pady=2)
                # Altındaki açıklama metni
                lbl = tk.Label(hp_frame, text=value, wraplength=350, justify='left', font=("Arial", 9))
                lbl.pack(anchor='w', padx=20)
                hp_check_frames[text] = tk.Frame(hp_frame)
                hp_check_frames[text].pack(fill='x', padx=20, pady=5)

            # RB Frame
            rb_frame = tk.Frame(bottom_frame, bd=1, relief="solid", padx=10, pady=5)
            rb_frame.pack(side='left', fill='both', expand=True, padx=5)
            tk.Label(rb_frame, text="RB", font=("Arial", 12, "bold")).pack(anchor='w')

            rb_vars = {}
            rb_options = [
                "Her iki akciğerde üst lob segmentlerinde yaygın kötü sınırlı sentriasiner buzlu cam dansitesinde nodüller izlenmiş olup RB/HP ayırıcı tanısı endikedir."
            ]
            for option in rb_options:
                var = tk.IntVar()
                chk = tk.Checkbutton(rb_frame, text=option, variable=var, command=lambda: guncelle_cumle())
                chk.pack(anchor='w')
                chk.config(wraplength=350, justify='left', font=("Arial", 9))
                rb_vars[option] = var

            # Cümle güncelleme fonksiyonu
            def guncelle_cumle():
                cumleler = []
                # UIP
                if uip_var.get():
                    cumleler.append(uip_var.get())

                # NSIP
                for option, var in nsip_vars.items():
                    if var.get():
                        cumleler.append(option)

                # RB
                for option, var in rb_vars.items():
                    if var.get():
                        cumleler.append(option)

                # Hipersensitivite pnömonisi
                if hp_var.get():
                    selected_option = hp_var.get()
                    base_text = dict(hp_options)[selected_option]
                    cumle = base_text
                    selected_checks = [option for option, var in hp_check_vars.items() if var.get()]
                    if selected_checks:
                        cumle += " " + " ".join(selected_checks)
                    cumleler.append(cumle)

                cumle_var.set('\n'.join(cumleler))

            # Başlangıçta cümleyi güncelle
            guncelle_cumle()

            # Butonlar
            buton_frame = tk.Frame(scrollable_frame)
            buton_frame.pack(pady=10)
            ekle_btn = tk.Button(buton_frame, text="EKLE", command=lambda: metni_ekle())
            ekle_btn.pack(side='left', padx=10)
            kapat_btn = tk.Button(buton_frame, text="KAPAT", command=alt_pencere.destroy)
            kapat_btn.pack(side='left', padx=10)

            def metni_ekle():
                metin = cumle_var.get()

            metin_toplama_kutucugu_text.insert(tk.END, metin + "\n")
            alt_pencere.destroy()

        elif lezyon_tipi == "Pnx":
            # Ortak kullanılacak sözlükler
            secenek_vars = {}

            # Lokalizasyon seçimi
            lokalizasyon_secimi(scrollable_frame)

            # Güncellenen cümle etiketi (en üste yerleştirildi)
            cumle_var = tk.StringVar()
            cumle_label = tk.Label(scrollable_frame, textvariable=cumle_var, wraplength=700, justify='left',
                                   font=("Arial", 12))
            cumle_label.pack(pady=10)

            secenekler = [
                "Sağ hemitoraksta apeksde _____ mm, orta kesimde _____ mm, basiste _____ mm kalınlıkta pnömotoraks izlenmiştir.",
                "Sol hemitoraksta apeksde _____ mm, orta kesimde _____ mm, basiste _____ mm kalınlıkta pnömotoraks izlenmiştir.",
                # Boşluk
                "",
                "Hastaya ___. interkostal aralıktan göğüs tüpü uygulanmış olup ucu ___ sonlanmaktadır.",
                "Subkutan amfizem izlendi.",
                # Boşluk
                "",
                "Sağ hemitoraksta hidropnömotoraks izlendi.",
                "Sol hemitoraksta hidropnömotoraks izlendi.",
                # Boşluk
                "",
                "Pnömomediastinum izlendi.",
                "[LOKALİZASYON] alveoler dolum örnekleri ayırt edildi."
            ]

            # Seçenekleri oluşturma
            tk.Label(scrollable_frame, text="Seçenekler:", font=("Arial", 12)).pack(anchor='w', pady=5)
            secenek_frame = tk.Frame(scrollable_frame)
            secenek_frame.pack(fill='both', expand=True, padx=10, pady=5)

            input_vars = {}
            for i, secenek in enumerate(secenekler):
                if secenek == "":
                    # Boşluk bırak
                    tk.Label(secenek_frame, text="").pack()
                    continue

                var = tk.IntVar()
                chk = tk.Checkbutton(
                    secenek_frame,
                    text=secenek.replace('_____', '').replace('___', '').replace('[LOKALİZASYON]', ''),
                    variable=var,
                    command=lambda s=secenek: toggle_inputs(s),
                    wraplength=700,
                    justify='left'
                )
                chk.pack(anchor='w')
                secenek_vars[secenek] = var

                # Gerekli giriş alanlarını oluşturma
                if '_____' in secenek or 'Hastaya ___. interkostal aralıktan göğüs tüpü uygulanmış olup ucu ___ sonlanmaktadır.' in secenek or '[LOKALİZASYON]' in secenek:
                    input_frame = tk.Frame(secenek_frame)
                    input_frame.pack(anchor='w', padx=20)
                    input_vars[secenek] = input_frame

            def toggle_inputs(secenek):
                if secenek_vars[secenek].get():
                    if secenek in input_vars:
                        input_frame = input_vars[secenek]
                        input_frame_children = input_frame.winfo_children()
                        if not input_frame_children:
                            create_inputs(secenek, input_frame)
                else:
                    if secenek in input_vars:
                        input_frame = input_vars[secenek]
                        for widget in input_frame.winfo_children():
                            widget.destroy()
                guncelle_cumle()

            def create_inputs(secenek, frame):
                if 'apeksde _____ mm, orta kesimde _____ mm, basiste _____ mm kalınlıkta pnömotoraks izlenmiştir' in secenek:
                    apeks_var = tk.StringVar()
                    orta_var = tk.StringVar()
                    bazal_var = tk.StringVar()
                    tk.Label(frame, text="Apeks (mm):").pack(side='left')
                    tk.Entry(frame, textvariable=apeks_var, width=5).pack(side='left')
                    tk.Label(frame, text="Orta (mm):").pack(side='left')
                    tk.Entry(frame, textvariable=orta_var, width=5).pack(side='left')
                    tk.Label(frame, text="Basal (mm):").pack(side='left')
                    tk.Entry(frame, textvariable=bazal_var, width=5).pack(side='left')
                    apeks_var.trace_add('write', lambda *args: guncelle_cumle())
                    orta_var.trace_add('write', lambda *args: guncelle_cumle())
                    bazal_var.trace_add('write', lambda *args: guncelle_cumle())
                    input_vars[secenek] = (apeks_var, orta_var, bazal_var)
                elif 'Hastaya ___. interkostal aralıktan göğüs tüpü uygulanmış olup ucu ___ sonlanmaktadır.' in secenek:
                    interkostal_var = tk.StringVar()
                    sonlanma_var = tk.StringVar()

                    tk.Label(frame, text="İnterkostal aralık:").pack(side='left')
                    tk.Entry(frame, textvariable=interkostal_var, width=5).pack(side='left')

                    tk.Label(frame, text="Sonlanma:").pack(side='left')
                    sonlanma_options = ["apekste", "üst lob segmentleri düzeyinde", "alt lob segmentleri düzeyinde"]
                    for option in sonlanma_options:
                        rb = tk.Radiobutton(frame, text=option, variable=sonlanma_var, value=option,
                                            command=guncelle_cumle)
                        rb.pack(side='left')

                    sonlanma_var.set('')  # Varsayılan olarak hiçbir seçenek seçili değil

                    interkostal_var.trace_add('write', lambda *args: guncelle_cumle())
                    input_vars[secenek] = (interkostal_var, sonlanma_var)
                elif '[LOKALİZASYON]' in secenek:
                    # Lokalizasyon seçimi zaten yapıldı
                    pass

            def guncelle_cumle():
                cumleler = []
                # Lokalizasyonları al
                secilen_lokalizasyonlar = [secenek for secenek, var in lokalizasyon_vars.items() if var.get()]
                if secilen_lokalizasyonlar:
                    if len(secilen_lokalizasyonlar) == 1:
                        lokalizasyon = secilen_lokalizasyonlar[0]
                    elif len(secilen_lokalizasyonlar) == 2:
                        lokalizasyon = f"{secilen_lokalizasyonlar[0]} ve {secilen_lokalizasyonlar[1]}"
                    else:
                        lokalizasyon = ", ".join(secilen_lokalizasyonlar[:-1]) + f" ve {secilen_lokalizasyonlar[-1]}"
                else:
                    lokalizasyon = "_________"

                for secenek, var in secenek_vars.items():
                    if var.get():
                        cumle = secenek
                        if secenek in input_vars:
                            inputs = input_vars[secenek]
                            if isinstance(inputs, tuple):
                                if len(inputs) == 3:
                                    # Apeks, Orta, Bazal ölçümleri
                                    apeks_var, orta_var, bazal_var = inputs
                                    apeks = apeks_var.get().strip() if apeks_var.get().strip() else '____'
                                    orta = orta_var.get().strip() if orta_var.get().strip() else '____'
                                    bazal = bazal_var.get().strip() if bazal_var.get().strip() else '____'
                                    cumle = cumle.replace('_____', '{}').format(apeks, orta, bazal)
                                elif len(inputs) == 2:
                                    # İnterkostal aralık ve sonlanma
                                    interkostal_var, sonlanma_var = inputs
                                    interkostal = interkostal_var.get().strip() if interkostal_var.get().strip() else '____'
                                    sonlanma = sonlanma_var.get().strip() if sonlanma_var.get().strip() else '____'
                                    cumle = cumle.replace('___', interkostal, 1)
                                    cumle = cumle.replace('___', sonlanma, 1)
                        cumle = cumle.replace('[LOKALİZASYON]', lokalizasyon)
                        cumleler.append(cumle)
                # Eğer hiçbir seçenek işaretli değilse cümleyi boşalt
                if cumleler:
                    cumle_var.set('\n'.join(cumleler))
                else:
                    cumle_var.set('')

            # Lokalizasyon değiştiğinde cümleyi güncelle
            for var in lokalizasyon_vars.values():
                var.trace_add('write', lambda *args: guncelle_cumle())

            # Başlangıçta cümleyi güncelle
            guncelle_cumle()

            # Butonlar
            buton_frame = tk.Frame(scrollable_frame)
            buton_frame.pack(pady=10)
            ekle_btn = tk.Button(buton_frame, text="EKLE", command=lambda: metni_ekle())
            ekle_btn.pack(side='left', padx=10)
            kapat_btn = tk.Button(buton_frame, text="KAPAT", command=alt_pencere.destroy)
            kapat_btn.pack(side='left', padx=10)

            def metni_ekle():
                metin = cumle_var.get()
                metin_toplama_kutucugu_text.insert(tk.END, metin + "\n")
                alt_pencere.destroy()

        else:
            # Diğer lezyon tipleri için
            tk.Label(scrollable_frame, text=f"{lezyon_tipi} için seçenekler henüz tanımlanmadı.",
                     font=("Arial", 12)).pack(pady=20)
            tk.Button(scrollable_frame, text="KAPAT", command=alt_pencere.destroy).pack(pady=10)


def zone8_penceresi():
    # Ana pencere tanımı
    pencere = tk.Toplevel()
    pencere.title("Zone 8: Plevra Raporlama")
    pencere.geometry("900x800")

    # Ana çerçeve
    ana_frame = tk.Frame(pencere)
    ana_frame.pack(fill='both', expand=True)

    # Canvas ve scrollbar için bir üst çerçeve oluşturuyoruz
    canvas_frame = tk.Frame(ana_frame)
    canvas_frame.pack(fill='both', expand=True)

    # Canvas ve scrollbar
    canvas = tk.Canvas(canvas_frame)
    scrollbar = ttk.Scrollbar(canvas_frame, orient="vertical", command=canvas.yview)
    scrollable_frame = tk.Frame(canvas)

    scrollable_frame.bind(
        "<Configure>",
        lambda e: canvas.configure(
            scrollregion=canvas.bbox("all")
        )
    )

    canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
    canvas.configure(yscrollcommand=scrollbar.set)

    canvas.pack(side="left", fill="both", expand=True)
    scrollbar.pack(side="right", fill="y")

    # Lokalizasyon Seçimi (En üstte)
    tk.Label(scrollable_frame, text="Lokalizasyon Seçimi (Seçilen Lob / Segment):", font=("Arial", 12, "bold")).pack(
        anchor='w', pady=5)

    lokalizasyon_frame = tk.Frame(scrollable_frame)
    lokalizasyon_frame.pack(anchor='w', padx=20)

    # SAGPLEVRA (Sağ Plevra) - Birinci sütun
    SAGPLEVRA_vars = {}
    sag_frame = tk.Frame(lokalizasyon_frame)
    sag_frame.pack(side='left', padx=10)

    sag_options = ["apeks", "üst lob segmentleri", "orta lob", "alt lob superior segment", "alt lob bazal segmentleri"]
    tk.Label(sag_frame, text="Sağ Plevra:", font=("Arial", 10, "bold")).pack(anchor='w')
    for option in sag_options:
        var = tk.IntVar()
        SAGPLEVRA_vars[option] = var
        tk.Checkbutton(sag_frame, text=option, variable=var, command=lambda: guncelle_cumle()).pack(anchor='w')

    # SOLPLEVRA (Sol Plevra) - İkinci sütun
    SOLPLEVRA_vars = {}
    sol_frame = tk.Frame(lokalizasyon_frame)
    sol_frame.pack(side='left', padx=10)

    sol_options = ["apeks", "üst lob segmentleri", "lingular lob", "alt lob superior segment",
                   "alt lob bazal segmentleri"]
    tk.Label(sol_frame, text="Sol Plevra:", font=("Arial", 10, "bold")).pack(anchor='w')
    for option in sol_options:
        var = tk.IntVar()
        SOLPLEVRA_vars[option] = var
        tk.Checkbutton(sol_frame, text=option, variable=var, command=lambda: guncelle_cumle()).pack(anchor='w')

    # Güncellenen cümle etiketi
    cumle_var = tk.StringVar()
    cumle_label = tk.Label(scrollable_frame, textvariable=cumle_var, wraplength=800, justify='left', font=("Arial", 11))
    cumle_label.pack(pady=10)

    # Lezyon Tanımlama Alanları
    # Plevral Effüzyon
    tk.Label(scrollable_frame, text="I. Plevral Effüzyon", font=("Arial", 12, "bold")).pack(anchor='w', pady=5)
    efuzyon_frame = tk.Frame(scrollable_frame, relief=tk.GROOVE, borderwidth=2)
    efuzyon_frame.pack(fill='both', expand=True, padx=20, pady=5, anchor='w')

    efuzyon_options = [
        "Her iki hemitoraksta, sağda [SAGPLEVRA] düzeyine kadar yükselen, en kalın yerinde __ mm, solda [SOLPLEVRA] düzeyine kadar yükselen, en kalın yerinde __ mm kalınlıkta plevral effüzyon izlendi.",
        "Sağ hemitoraksın tamamını kaplayan ve sağ akciğerde kollapsın eşlik ettiği masif atelektazi izlenmiştir.",
        "Sol hemitoraksın tamamını kaplayan ve sol akciğerde kollapsın eşlik ettiği masif atelektazi izlenmiştir.",
        "Sağ hemitoraksta, [SAGPLEVRA] düzeyine kadar yükselen, en kalın yerinde __ mm kalınlıkta plevral effüzyon izlendi.",
        "Sol hemitoraksta, [SOLPLEVRA] düzeyine kadar yükselen, en kalın yerinde __ mm kalınlıkta plevral effüzyon izlendi.",
        "Pasif atelektazi eşlik etmektedir.",
        "Sağ kostofrenik sinüsünde __ mm kalınlıkta effüzyon izlendi.",
        "Sol kostofrenik sinüsünde __ mm kalınlıkta effüzyon izlendi.",
        "Sağ hemitorakstaki effüzyon lentiform görünümde olup ankiste olma eğilimi olarak değerlendirildi.",
        "Sol hemitorakstaki effüzyon lentiform görünümde olup ankiste olma eğilimi olarak değerlendirildi."
    ]

    efuzyon_vars = {}
    efuzyon_input_vars = {}
    for option in efuzyon_options:
        var = tk.IntVar()
        efuzyon_vars[option] = var
        chk_frame = tk.Frame(efuzyon_frame)
        chk_frame.pack(anchor='w', fill='x', pady=2)

        # Checkbox metni Bloklar halinde ayırıyoruz
        option_blocks = option.split('__')
        chk_text = option_blocks[0]
        chk = tk.Checkbutton(chk_frame, text=chk_text, variable=var, command=lambda: guncelle_cumle(), justify='left',
                             wraplength=700)
        chk.pack(side='left', anchor='w')

        # Boşluk olan yerlere giriş kutusu ekleme
        entry_vars = []
        for idx in range(len(option_blocks) - 1):
            entry_var = tk.StringVar()
            entry = tk.Entry(chk_frame, textvariable=entry_var, width=5)
            entry.pack(side='left', padx=5)
            entry_var.trace_add('write', lambda *args: guncelle_cumle())
            entry_vars.append(entry_var)
            tk.Label(chk_frame, text=option_blocks[idx + 1]).pack(side='left', anchor='w')
        efuzyon_input_vars[option] = entry_vars

    # II. Plevral Kalınlaşma
    tk.Label(scrollable_frame, text="II. Plevral Kalınlaşma", font=("Arial", 12, "bold")).pack(anchor='w', pady=5)
    kalinlasma_frame = tk.Frame(scrollable_frame, relief=tk.GROOVE, borderwidth=2)
    kalinlasma_frame.pack(fill='both', expand=True, padx=20, pady=5, anchor='w')

    kalinlasma_options = [
        "Sağ hemitoraksta [SAGPLEVRA] düzeyinde plevrada plak tarzı ",
        "Sol hemitoraksta [SOLPLEVRA] düzeyinde plevrada plak tarzı ",
        "Sağ hemitoraksta [SAGPLEVRA] düzeyinde plevrada _____ mm kalınlıkta kalınlaşma izlenmiştir.",
        "Sol hemitoraksta [SOLPLEVRA] düzeyinde plevrada _____ mm kalınlıkta kalınlaşma izlenmiştir."
    ]

    kalinlasma_vars = {}
    kalinlasma_input_vars = {}
    for option in kalinlasma_options:
        var = tk.IntVar()
        kalinlasma_vars[option] = var
        chk_frame = tk.Frame(kalinlasma_frame)
        chk_frame.pack(anchor='w', fill='x', pady=2)

        # Checkbox metni Bloklar halinde ayırıyoruz
        if "plak tarzı " in option:
            chk_text = option + "kalınlaşma izlenmiştir."
            chk = tk.Checkbutton(chk_frame, text=chk_text, variable=var, command=lambda: guncelle_cumle(),
                                 justify='left', wraplength=700)
            chk.pack(side='left', anchor='w')

            # Combobox ekleyelim
            combo_var = tk.StringVar(value="Seçiniz")
            combo = ttk.Combobox(chk_frame, textvariable=combo_var,
                                 values=["tümüyle kalsifiye", "nonkalsifiye", "içerisinde kalsifikasyon bulunan"],
                                 state="readonly")
            combo.pack(side='left', padx=5)
            combo.bind("<<ComboboxSelected>>", lambda e: guncelle_cumle())
            kalinlasma_input_vars[option] = combo_var

        # Boşluk olan yerlere giriş kutusu ekleme
        elif '____' in option:
            chk = tk.Checkbutton(chk_frame, text=option, variable=var, command=lambda: guncelle_cumle(), justify='left',
                                 wraplength=700)
            chk.pack(side='left', anchor='w')
            entry_var = tk.StringVar()
            entry = tk.Entry(chk_frame, textvariable=entry_var, width=5)
            entry.pack(side='left', padx=5)
            entry_var.trace_add('write', lambda *args: guncelle_cumle())
            kalinlasma_input_vars[option] = entry_var

    # Fonksiyonlar
    def format_lokalizasyon(lok_listesi):
        if not lok_listesi:
            return "_________"
        elif len(lok_listesi) == 1:
            return lok_listesi[0]
        else:
            return ', '.join(lok_listesi[:-1]) + ' ve ' + lok_listesi[-1]

    def guncelle_cumle():
        cumleler = []

        # Seçilen lokalizasyonları alalım
        selected_SAGPLEVRA = [option for option, var in SAGPLEVRA_vars.items() if var.get()]
        selected_SOLPLEVRA = [option for option, var in SOLPLEVRA_vars.items() if var.get()]

        # Lokalizasyonları formatlayalım
        sag_lok = format_lokalizasyon(selected_SAGPLEVRA)
        sol_lok = format_lokalizasyon(selected_SOLPLEVRA)

        # Plevral effüzyon cümleleri
        for option, var in efuzyon_vars.items():
            if var.get():
                cumle = option.replace('[SAGPLEVRA]', sag_lok).replace('[SOLPLEVRA]', sol_lok)
                if option in efuzyon_input_vars:
                    for entry_var in efuzyon_input_vars[option]:
                        value = entry_var.get().strip() if entry_var.get().strip() else '____'
                        cumle = cumle.replace('__', value + ' mm', 1)
                cumleler.append(cumle)

        # Plevral kalınlaşma cümleleri
        for option, var in kalinlasma_vars.items():
            if var.get():
                cumle = option.replace('[SAGPLEVRA]', sag_lok).replace('[SOLPLEVRA]', sol_lok)
                if "plak tarzı " in option and option in kalinlasma_input_vars:
                    combo_value = kalinlasma_input_vars[option].get()
                    if combo_value != "Seçiniz":
                        cumle = cumle.replace('plak tarzı', f'plak tarzı {combo_value}')
                elif '____' in option and option in kalinlasma_input_vars:
                    entry_var = kalinlasma_input_vars[option]
                    value = entry_var.get().strip() if entry_var.get().strip() else '____'
                    cumle = cumle.replace('____', value + ' mm', 1)
                cumle += " kalınlaşma izlenmiştir."
                cumleler.append(cumle)

        cumle_var.set('\n'.join(cumleler))

    def metin_toplama_kutucugu_goster():
        # Plevra metin toplama kutucuğu
        metin_toplama_kutucugu = tk.Toplevel()
        metin_toplama_kutucugu.title("Plevra Metin Toplama Kutucuğu")
        metin_toplama_kutucugu.geometry("600x400+800+500")

        metin_toplama_kutucugu_text = tk.Text(metin_toplama_kutucugu, wrap=tk.WORD)
        metin_toplama_kutucugu_text.pack(expand=True, fill='both')

        # Cümleyi ekliyoruz
        metin = cumle_var.get()
        metin_toplama_kutucugu_text.insert(tk.END, metin + "\n")

        # RAPORA EKLE butonu
        def rapora_ekle():
            metin = metin_toplama_kutucugu_text.get('1.0', tk.END).strip()
            replace_zone_text('ZONE8', metin)
            metin_toplama_kutucugu.destroy()

        tk.Button(metin_toplama_kutucugu, text="RAPORA EKLE", command=rapora_ekle).pack(pady=5)

    def metni_ekle():
        # Plevranın metin toplama kutucuğuna metin ekleme
        metin_toplama_kutucugu_goster()
        pencere.destroy()

    # EKLE ve KAPAT butonları en altta, kaydırılabilir alanın dışında
    buton_frame = tk.Frame(ana_frame)
    buton_frame.pack(fill='x', side='bottom', pady=10)

    ekle_btn = tk.Button(buton_frame, text="EKLE", command=metni_ekle)
    ekle_btn.pack(side='left', padx=10)
    kapat_btn = tk.Button(buton_frame, text="KAPAT", command=pencere.destroy)
    kapat_btn.pack(side='left', padx=10)

    # Başlangıçta cümleyi güncelle
    guncelle_cumle()

import tkinter as tk
from tkinter import ttk

def zone27_penceresi():
    # Create a new window
    pencere = tk.Toplevel()
    pencere.title("Zone 27: Göğüs Duvarı Raporlama")
    pencere.geometry("1200x1200")  # Adjusted height to accommodate all sections

    # Create main frame
    ana_frame = tk.Frame(pencere)
    ana_frame.pack(fill='both', expand=True)

    # Use a canvas with scrollbar if necessary
    canvas = tk.Canvas(ana_frame)
    scrollbar = ttk.Scrollbar(ana_frame, orient="vertical", command=canvas.yview)
    scrollable_frame = tk.Frame(canvas)

    scrollable_frame.bind(
        "<Configure>",
        lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
    )

    canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
    canvas.configure(yscrollcommand=scrollbar.set)

    canvas.pack(side="left", fill="both", expand=True)
    scrollbar.pack(side="right", fill="y")

    # Create main frame for sections
    main_frame = tk.Frame(scrollable_frame)
    main_frame.pack(fill='both', expand=True)  # Ensure main frame is packed

    # Label to display the generated sentence for ZONE27 only (moved to the top)
    zone27_cumle_var = tk.StringVar()
    cumle_label = tk.Label(main_frame, textvariable=zone27_cumle_var, wraplength=800, justify='left',
                           font=("Arial", 11))
    cumle_label.grid(row=0, column=0, columnspan=2, pady=10, sticky='n')

    # **Variables and Functions**

    # Variables for Göğüs Duvarı section
    pectus_excavatum_var = tk.IntVar()
    hasta_entube_var = tk.IntVar()
    sag_pektoral_port_var = tk.IntVar()
    sol_pektoral_port_var = tk.IntVar()
    ng_sonda_var = tk.IntVar()
    trakeostomi_var = tk.IntVar()
    entube_trakeostomi_var = tk.IntVar()
    morgagni_hernisi_var = tk.IntVar()
    sag_bochdalek_var = tk.IntVar()
    sol_bochdalek_var = tk.IntVar()

    # Variables for other sections
    sag_meme_izlenmedi_var = tk.IntVar()
    sol_meme_izlenmedi_var = tk.IntVar()
    sag_meme_cildi_kalindir_var = tk.IntVar()
    sol_meme_cildi_kalindir_var = tk.IntVar()
    meme_lezyon_var = tk.IntVar()
    sag_meme_lezyon_var = tk.IntVar()
    sol_meme_lezyon_var = tk.IntVar()
    aksiller_var = tk.IntVar()
    sag_aksilla_var = tk.IntVar()
    sol_aksilla_var = tk.IntVar()
    esophagus_normal_var = tk.IntVar()
    esophagus_genis_var = tk.IntVar()
    esophagus_hava_sivi_var = tk.IntVar()
    esophagus_akalazya_var = tk.IntVar()
    esophagus_duvar_kalinligi_var = tk.IntVar()
    esophagus_belirgin_kalinlik_var = tk.IntVar()
    sliding_hernia_var = tk.IntVar()
    rolling_hernia_var = tk.IntVar()
    tip3_hernia_var = tk.IntVar()
    tip4_hernia_var = tk.IntVar()
    paraesophageal_lenf_var = tk.IntVar()
    cardia_kalinlik_var = tk.IntVar()
    cardia_seroza_var = tk.IntVar()
    sag_parakardiyal_var = tk.IntVar()
    sol_parakardiyal_var = tk.IntVar()

    # Additional variables for entries and selections
    ap_genislik_var = tk.StringVar()
    transvers_genislik_var = tk.StringVar()
    torsiyon_var = tk.StringVar(value="izlenmedi")
    sag_torsiyon_acisi_var = tk.StringVar()
    sol_torsiyon_acisi_var = tk.StringVar()
    sag_location_var = tk.StringVar(value="Seçiniz")
    sag_size_var = tk.StringVar()
    sag_finding_var = tk.StringVar(value="Seçiniz")
    sol_location_var = tk.StringVar(value="Seçiniz")
    sol_size_var = tk.StringVar()
    sol_finding_var = tk.StringVar(value="Seçiniz")
    sag_aksilla_bulgu_var = tk.StringVar(value="Seçiniz")
    sol_aksilla_bulgu_var = tk.StringVar(value="Seçiniz")
    sag_aksilla_size_var = tk.StringVar()
    sol_aksilla_size_var = tk.StringVar()
    esophagus_duvar_kalinligi_size_var = tk.StringVar()
    paraesophageal_size_var = tk.StringVar()
    sol_parakardiyal_size_var = tk.StringVar()

    # Functions need to be defined before they are used
    def toggle_pectus_excavatum_frame():
        if pectus_excavatum_var.get():
            pectus_detay_frame.grid(row=1, column=0, padx=10, pady=5, sticky='w')
        else:
            pectus_detay_frame.grid_forget()
        guncelle_zone27()

    def toggle_sol_parakardiyal_entry():
        if sol_parakardiyal_var.get():
            sol_parakardiyal_size_entry.grid()
        else:
            sol_parakardiyal_size_entry.grid_remove()
        guncelle_zone27()

    def toggle_esophagus_duvar_kalinligi_entry():
        if esophagus_duvar_kalinligi_var.get():
            esophagus_duvar_kalinligi_size_entry.grid()
        else:
            esophagus_duvar_kalinligi_size_entry.grid_remove()
        guncelle_zone27()

    def toggle_meme_frame():
        if sag_meme_lezyon_var.get():
            sag_detay_frame.grid(row=6, column=0, columnspan=3, padx=10, pady=5, sticky='w')
        else:
            sag_detay_frame.grid_forget()

        if sol_meme_lezyon_var.get():
            sol_detay_frame.grid(row=7, column=0, columnspan=3, padx=10, pady=5, sticky='w')
        else:
            sol_detay_frame.grid_forget()

        guncelle_zone27()

    def toggle_aksiller_frame():
        if aksiller_var.get():
            aksiller_detay_frame.grid(row=1, column=0, columnspan=6, padx=10, pady=5, sticky='w')
        else:
            aksiller_detay_frame.grid_forget()
        guncelle_zone27()

    def guncelle_zone27():
        cumleler = []
        # Pectus Excavatum değerlendirmesi
        if pectus_excavatum_var.get():
            try:
                ap_value = float(ap_genislik_var.get().strip())
                transvers_value = float(transvers_genislik_var.get().strip())
                if ap_value > 0:
                    haller_index = round(transvers_value / ap_value, 1)
                    if haller_index < 2.0:
                        cumleler.append("Haller indeksi 2.0'dan küçük olup normal sınırlardadır.")
                    elif 2 <= haller_index < 3.2:
                        cumleler.append(
                            f"Haller indeksi {haller_index} olup hafif dereceli pectus excavatum ile uyumludur.")
                    elif 3.2 <= haller_index < 3.5:
                        cumleler.append(
                            f"Haller indeksi {haller_index} olup orta dereceli pectus excavatum ile uyumludur.")
                    else:
                        cumleler.append(
                            f"Haller indeksi {haller_index} olup ağır dereceli pectus excavatum ile uyumludur.")
            except ValueError:
                pass  # Ignore if values are not properly entered
        if torsiyon_var.get() == "sag":
            torsiyon_acisi = sag_torsiyon_acisi_var.get().strip()
            if torsiyon_acisi:
                cumleler.append(
                    f"Sternumda sağ ön oblik, sagittal düzlemle {torsiyon_acisi} derece açıya sahip torsiyon izlendi.")
        elif torsiyon_var.get() == "sol":
            torsiyon_acisi = sol_torsiyon_acisi_var.get().strip()
            if torsiyon_acisi:
                cumleler.append(
                    f"Sternumda sol ön oblik, sagittal düzlemle {torsiyon_acisi} derece açıya sahip torsiyon izlendi.")

        # Meme bölümü
        if sag_meme_lezyon_var.get():
            if sag_location_var.get() != "Seçiniz" and sag_finding_var.get() != "Seçiniz":
                size_value = sag_size_var.get().strip()
                if size_value:
                    if any(x in size_value for x in ['x', 'X', '×']):
                        size_text = f"{size_value} mm boyutlarda"
                    else:
                        size_text = f"{size_value} mm çapında"
                    cumle = f"Sağ meme {sag_location_var.get()} yerleşimli {size_text} {sag_finding_var.get()} izlendi."
                else:
                    cumle = f"Sağ meme {sag_location_var.get()} yerleşimli {sag_finding_var.get()} izlendi."
                cumleler.append(cumle)
        if sol_meme_lezyon_var.get():
            if sol_location_var.get() != "Seçiniz" and sol_finding_var.get() != "Seçiniz":
                size_value = sol_size_var.get().strip()
                if size_value:
                    if any(x in size_value for x in ['x', 'X', '×']):
                        size_text = f"{size_value} mm boyutlarda"
                    else:
                        size_text = f"{size_value} mm çapında"
                    cumle = f"Sol meme {sol_location_var.get()} yerleşimli {size_text} {sol_finding_var.get()} izlendi."
                else:
                    cumle = f"Sol meme {sol_location_var.get()} yerleşimli {sol_finding_var.get()} izlendi."
                cumleler.append(cumle)
        if aksiller_var.get():
            if sag_aksilla_var.get() and sag_aksilla_bulgu_var.get() != "Seçiniz":
                size_value = sag_aksilla_size_entry.get().strip()
                if "büyüğü" in sag_aksilla_bulgu_var.get() and size_value:
                    if "hilumu ayırt edilemeyen" in sag_aksilla_bulgu_var.get():
                        aksiller_cumle = f"Sağ aksiller büyüğü {size_value} mm boyutlarda hilumu ayırt edilemeyen lenf nodları izlendi."
                    else:
                        aksiller_cumle = f"Sağ aksiller büyüğü {size_value} mm boyutlarda lucent hilumu korunmuş lenf nodları izlendi."
                else:
                    aksiller_cumle = f"Sağ aksiller {sag_aksilla_bulgu_var.get()}"
                cumleler.append(aksiller_cumle)
            if sol_aksilla_var.get() and sol_aksilla_bulgu_var.get() != "Seçiniz":
                size_value = sol_aksilla_size_entry.get().strip()
                if "büyüğü" in sol_aksilla_bulgu_var.get() and size_value:
                    if "hilumu ayırt edilemeyen" in sol_aksilla_bulgu_var.get():
                        aksiller_cumle = f"Sol aksiller büyüğü {size_value} mm boyutlarda hilumu ayırt edilemeyen lenf nodları izlendi."
                    else:
                        aksiller_cumle = f"Sol aksiller büyüğü {size_value} mm boyutlarda lucent hilumu korunmuş lenf nodları izlendi."
                else:
                    aksiller_cumle = f"Sol aksiller {sol_aksilla_bulgu_var.get()}"
                cumleler.append(aksiller_cumle)
        if sag_meme_izlenmedi_var.get():
            cumleler.append("Sağ meme izlenmedi. Sağ aksiller lenf nodu diseksiyonu izlendi.")
        if sol_meme_izlenmedi_var.get():
            cumleler.append("Sol meme izlenmedi. Sol aksiller lenf nodu diseksiyonu izlendi.")
        if sag_meme_cildi_kalindir_var.get():
            cumleler.append("Sağ meme cildi kalındır.")
        if sol_meme_cildi_kalindir_var.get():
            cumleler.append("Sol meme cildi kalındır.")

        # Esophagus bölümü
        if esophagus_normal_var.get():
            cumleler.append("Esophagus normal genişlikte olup duvar kalınlığı normal sınırlardadır.")
        if esophagus_genis_var.get():
            cumleler.append("Esophagus geniş olarak izlendi.")
        if esophagus_hava_sivi_var.get():
            cumleler.append("Esophagus geniş olup lümeninde hava-sıvı seviyesi izlendi.")
        if esophagus_akalazya_var.get():
            cumleler.append("Esophagus distal ucunda akalazya ile uyumlu genişleme izlendi.")
        if esophagus_duvar_kalinligi_var.get():
            size_value = esophagus_duvar_kalinligi_size_var.get().strip()
            if size_value:
                cumleler.append(f"Esophagus distal ucunda duvar kalınlığı çepeçevre artmış olup ortalama {size_value} mm ölçülmüştür.")
        if esophagus_belirgin_kalinlik_var.get():
            cumleler.append("Esophagusta belirgin duvar kalınlığı izlenmedi.")
        if sliding_hernia_var.get():
            cumleler.append("Sliding esophageal herni izlendi.")
        if rolling_hernia_var.get():
            cumleler.append("Rolling hiatal herni izlendi.")
        if tip3_hernia_var.get():
            cumleler.append("Tip 3 hiatal herni izlendi.")
        if tip4_hernia_var.get():
            cumleler.append("Tip 4 hiatal herni izlendi.")
        if paraesophageal_lenf_var.get() == 1:
            cumleler.append("Paraesophageal milimetrik lenf nodları izlendi.")
        elif paraesophageal_lenf_var.get() == 2:
            size_value = paraesophageal_size_var.get().strip()
            if size_value:
                cumleler.append(f"Paraesophageal {size_value} mm çaplı lenf nodu izlendi.")
        if cardia_kalinlik_var.get():
            cumleler.append("Cardia duvar kalınlığı normal sınırlardadır.")
        if cardia_seroza_var.get():
            cumleler.append("Cardia düzeyinde seroza düzenlidir.")
        if sag_parakardiyal_var.get():
            cumleler.append("Sağ parakardiyal milimetrik lenf nodu izlendi.")
        if sol_parakardiyal_var.get():
            size_value = sol_parakardiyal_size_var.get().strip()
            if size_value:
                cumleler.append(f"Sol parakardiyal {size_value} mm boyutlarda lenf nodu izlendi.")

        # Göğüs Duvarı seçenekleri
        if hasta_entube_var.get():
            cumleler.append("Hasta entübedir.")
        if sag_pektoral_port_var.get():
            cumleler.append("Sağ pektoral port kateteri izlendi.")
        if sol_pektoral_port_var.get():
            cumleler.append("Sol pektoral port kateteri izlendi.")
        if ng_sonda_var.get():
            cumleler.append("NG sonda izlendi.")
        if trakeostomi_var.get():
            cumleler.append("Trakeostomi izlendi.")
        if entube_trakeostomi_var.get():
            cumleler.append("Hasta trakeostomi vasıtasıyla entübedir.")
        if morgagni_hernisi_var.get():
            cumleler.append("Morgagni hernisi izlendi.")
        if sag_bochdalek_var.get():
            cumleler.append("Sağ posterior hemidiafragmada Bochdalek hernisi izlendi. Retroperitoneal fat herniyedir.")
        if sol_bochdalek_var.get():
            cumleler.append("Sol posterior hemidiafragmada Bochdalek hernisi izlendi. Retroperitoneal fat herniyedir.")

        zone27_cumle_var.set('\n'.join(cumleler))

    # **Widget'ları Tanımlıyoruz**

    # Section I. Meme
    tk.Label(main_frame, text="I. Meme", font=("Arial", 12, "bold")).grid(row=1, column=0, sticky='w', pady=5)

    # Create a frame for Meme section
    meme_frame = tk.Frame(main_frame, relief=tk.GROOVE, borderwidth=2)
    meme_frame.grid(row=2, column=0, padx=10, pady=5, sticky='nw')

    # Checkboxes
    tk.Checkbutton(meme_frame, text="Sağ meme izlenmedi. Sağ aksiller lenf nodu diseksiyonu izlendi.", variable=sag_meme_izlenmedi_var, command=guncelle_zone27).grid(row=0, column=0, sticky='w')
    tk.Checkbutton(meme_frame, text="Sol meme izlenmedi. Sol aksiller lenf nodu diseksiyonu izlendi.", variable=sol_meme_izlenmedi_var, command=guncelle_zone27).grid(row=1, column=0, sticky='w')
    tk.Checkbutton(meme_frame, text="Sağ meme cildi kalındır.", variable=sag_meme_cildi_kalindir_var, command=guncelle_zone27).grid(row=2, column=0, sticky='w')
    tk.Checkbutton(meme_frame, text="Sol meme cildi kalındır.", variable=sol_meme_cildi_kalindir_var, command=guncelle_zone27).grid(row=3, column=0, sticky='w')

    # Checkbox for the main selection
    tk.Checkbutton(meme_frame, text="Sağ Meme Lezyonu mevcut", variable=sag_meme_lezyon_var, command=toggle_meme_frame).grid(row=4, column=0, pady=5, sticky='w')
    tk.Checkbutton(meme_frame, text="Sol Meme Lezyonu mevcut", variable=sol_meme_lezyon_var, command=toggle_meme_frame).grid(row=5, column=0, pady=5, sticky='w')

    # Frame for detailed selections for Sag Meme (initially hidden)
    sag_detay_frame = tk.Frame(meme_frame)

    # Details for Sag Meme
    tk.Label(sag_detay_frame, text="Yerleşim:", font=("Arial", 10, "bold")).grid(row=0, column=0, sticky='w', padx=5)
    sag_location_combo = ttk.Combobox(sag_detay_frame, textvariable=sag_location_var, values=["üst dış kadran", "üst iç kadran", "alt dış kadran", "alt iç kadran", "prepektoral alanda", "üst yarıda", "alt yarıda", "dış yarıda", "iç yarıda", "retroareolar alanda"], state="readonly")
    sag_location_combo.grid(row=1, column=0, padx=5, pady=5, sticky='w')
    sag_location_combo.bind("<<ComboboxSelected>>", lambda e: guncelle_zone27())

    tk.Label(sag_detay_frame, text="Boyut (mm):", font=("Arial", 10, "bold")).grid(row=0, column=1, sticky='w', padx=5)
    sag_size_entry = tk.Entry(sag_detay_frame, textvariable=sag_size_var, width=10)
    sag_size_entry.grid(row=1, column=1, padx=5, pady=5, sticky='w')
    sag_size_entry.bind("<KeyRelease>", lambda e: guncelle_zone27())

    tk.Label(sag_detay_frame, text="Lezyon tipi", font=("Arial", 10, "bold")).grid(row=0, column=2, sticky='w', padx=5)
    sag_finding_combo = ttk.Combobox(sag_detay_frame, textvariable=sag_finding_var, values=["sütür materyali", "asimetrik fibroglanduler doku", "skatrizan doku", "düzgün konturlu nodül", "düzensiz konturlu nodül", "ankiste koleksiyon", "makrokalsifikasyon", "intramamarian lenf nodu", "makrokalsifikasyon içeren nodül", "milimetrik kalsifikasyon içeren nodül"], state="readonly", width=50)
    sag_finding_combo.grid(row=1, column=2, padx=5, pady=5, sticky='w')
    sag_finding_combo.bind("<<ComboboxSelected>>", lambda e: guncelle_zone27())

    # Frame for detailed selections for Sol Meme (initially hidden)
    sol_detay_frame = tk.Frame(meme_frame)

    # Details for Sol Meme
    tk.Label(sol_detay_frame, text="Yerleşim:", font=("Arial", 10, "bold")).grid(row=0, column=0, sticky='w', padx=5)
    sol_location_combo = ttk.Combobox(sol_detay_frame, textvariable=sol_location_var, values=["üst dış kadran", "üst iç kadran", "alt dış kadran", "alt iç kadran", "prepektoral alanda", "üst yarıda", "alt yarıda", "dış yarıda", "iç yarıda", "retroareolar alanda"], state="readonly")
    sol_location_combo.grid(row=1, column=0, padx=5, pady=5, sticky='w')
    sol_location_combo.bind("<<ComboboxSelected>>", lambda e: guncelle_zone27())

    tk.Label(sol_detay_frame, text="Boyut (mm):", font=("Arial", 10, "bold")).grid(row=0, column=1, sticky='w', padx=5)
    sol_size_entry = tk.Entry(sol_detay_frame, textvariable=sol_size_var, width=10)
    sol_size_entry.grid(row=1, column=1, padx=5, pady=5, sticky='w')
    sol_size_entry.bind("<KeyRelease>", lambda e: guncelle_zone27())

    tk.Label(sol_detay_frame, text="Lezyon tipi", font=("Arial", 10, "bold")).grid(row=0, column=2, sticky='w', padx=5)
    sol_finding_combo = ttk.Combobox(sol_detay_frame, textvariable=sol_finding_var, values=["sütür materyali", "asimetrik fibroglanduler doku", "skatrizan doku", "düzgün konturlu nodül", "düzensiz konturlu nodül", "ankiste koleksiyon", "makrokalsifikasyon", "intramamarian lenf nodu", "makrokalsifikasyon içeren nodül", "milimetrik kalsifikasyon içeren nodül"], state="readonly", width=50)
    sol_finding_combo.grid(row=1, column=2, padx=5, pady=5, sticky='w')
    sol_finding_combo.bind("<<ComboboxSelected>>", lambda e: guncelle_zone27())

    # Section II. Aksiller Lenf Nodları
    tk.Label(main_frame, text="II. Aksiller Lenf Nodları", font=("Arial", 12, "bold")).grid(row=1, column=1, sticky='w', pady=5)
    aksiller_frame = tk.Frame(main_frame, relief=tk.GROOVE, borderwidth=2)
    aksiller_frame.grid(row=2, column=1, padx=10, pady=5, sticky='nw')

    aksiller_check = tk.Checkbutton(aksiller_frame, text="Aksiller Lenf Nodu Mevcut", variable=aksiller_var, command=toggle_aksiller_frame)
    aksiller_check.grid(row=0, column=0, pady=5, sticky='w')

    aksiller_detay_frame = tk.Frame(aksiller_frame)

    tk.Checkbutton(aksiller_detay_frame, text="Sağ Aksilla", variable=sag_aksilla_var, command=guncelle_zone27).grid(row=0, column=0, sticky='w', padx=5)
    tk.Checkbutton(aksiller_detay_frame, text="Sol Aksilla", variable=sol_aksilla_var, command=guncelle_zone27).grid(row=1, column=0, sticky='w', padx=5)

    # Combobox for findings for both Sag and Sol aksilla
    sag_aksilla_bulgu_combo = ttk.Combobox(aksiller_detay_frame, textvariable=sag_aksilla_bulgu_var, values=[
        "kısa aksı patolojik sınıra ulaşmayan lenf nodları izlendi.",
        "büyüğü ______ mm boyutlarda lucent hilumu korunmuş lenf nodları izlendi.",
        "büyüğü ______ mm boyutlarda hilumu ayırt edilemeyen lenf nodları izlendi.",
        "lenf nodu izlenmedi."
    ], state="readonly", width=50)
    sag_aksilla_bulgu_combo.grid(row=0, column=1, padx=5, pady=5, sticky='w')
    sag_aksilla_bulgu_combo.bind("<<ComboboxSelected>>", lambda e: guncelle_zone27())

    sol_aksilla_bulgu_combo = ttk.Combobox(aksiller_detay_frame, textvariable=sol_aksilla_bulgu_var, values=[
        "kısa aksı patolojik sınıra ulaşmayan lenf nodları izlendi.",
        "büyüğü ______ mm boyutlarda lucent hilumu korunmuş lenf nodları izlendi.",
        "büyüğü ______ mm boyutlarda hilumu ayırt edilemeyen lenf nodları izlendi.",
        "lenf nodu izlenmedi."
    ], state="readonly", width=50)
    sol_aksilla_bulgu_combo.grid(row=1, column=1, padx=5, pady=5, sticky='w')
    sol_aksilla_bulgu_combo.bind("<<ComboboxSelected>>", lambda e: guncelle_zone27())

    # Text entry for size input for each aksilla
    sag_aksilla_size_entry = tk.Entry(aksiller_detay_frame, textvariable=sag_aksilla_size_var, width=10)
    sag_aksilla_size_entry.grid(row=0, column=2, padx=5, pady=5, sticky='w')
    sag_aksilla_size_entry.bind("<KeyRelease>", lambda e: guncelle_zone27())

    sol_aksilla_size_entry = tk.Entry(aksiller_detay_frame, textvariable=sol_aksilla_size_var, width=10)
    sol_aksilla_size_entry.grid(row=1, column=2, padx=5, pady=5, sticky='w')
    sol_aksilla_size_entry.bind("<KeyRelease>", lambda e: guncelle_zone27())

    # **Swapped Sections III and IV**

    # Section III. Esophagus (moved to the left)
    tk.Label(main_frame, text="III. Esophagus", font=("Arial", 12, "bold")).grid(row=3, column=0, sticky='w', pady=5)

    # Create a frame for Esophagus section
    esophagus_frame = tk.Frame(main_frame, relief=tk.GROOVE, borderwidth=2)
    esophagus_frame.grid(row=4, column=0, padx=10, pady=5, sticky='nw')

    # Checkboxes for Esophagus section
    tk.Checkbutton(esophagus_frame, text="Esophagus normal genişlikte olup duvar kalınlığı normal sınırlardadır.", variable=esophagus_normal_var, command=guncelle_zone27).grid(row=0, column=0, sticky='w')
    tk.Checkbutton(esophagus_frame, text="Esophagus geniş olarak izlendi.", variable=esophagus_genis_var, command=guncelle_zone27).grid(row=1, column=0, sticky='w')
    tk.Checkbutton(esophagus_frame, text="Esophagus geniş olup lümeninde hava-sıvı seviyesi izlendi.", variable=esophagus_hava_sivi_var, command=guncelle_zone27).grid(row=2, column=0, sticky='w')
    tk.Checkbutton(esophagus_frame, text="Esophagus distal ucunda akalazya ile uyumlu genişleme izlendi.", variable=esophagus_akalazya_var, command=guncelle_zone27).grid(row=3, column=0, sticky='w')
    tk.Checkbutton(esophagus_frame, text="Esophagus distal ucunda duvar kalınlığı çepeçevre artmış olup ortalama ____ mm ölçülmüştür.", variable=esophagus_duvar_kalinligi_var, command=toggle_esophagus_duvar_kalinligi_entry).grid(row=4, column=0, sticky='w')

    # Entry for esophagus duvar kalınlığı
    esophagus_duvar_kalinligi_size_entry = tk.Entry(esophagus_frame, textvariable=esophagus_duvar_kalinligi_size_var, width=5)
    esophagus_duvar_kalinligi_size_entry.grid(row=4, column=1, padx=5, pady=5, sticky='w')
    esophagus_duvar_kalinligi_size_entry.bind("<KeyRelease>", lambda e: guncelle_zone27())

    # Initially hide the entry if the checkbox is not selected
    if not esophagus_duvar_kalinligi_var.get():
        esophagus_duvar_kalinligi_size_entry.grid_remove()

    tk.Checkbutton(esophagus_frame, text="Esophagusta belirgin duvar kalınlığı izlenmedi.", variable=esophagus_belirgin_kalinlik_var, command=guncelle_zone27).grid(row=5, column=0, sticky='w')

    # Hernia checkboxes
    tk.Checkbutton(esophagus_frame, text="Sliding esophageal herni izlendi.", variable=sliding_hernia_var, command=guncelle_zone27).grid(row=6, column=0, sticky='w')
    tk.Checkbutton(esophagus_frame, text="Rolling hiatal herni izlendi.", variable=rolling_hernia_var, command=guncelle_zone27).grid(row=7, column=0, sticky='w')
    tk.Checkbutton(esophagus_frame, text="Tip 3 hiatal herni izlendi.", variable=tip3_hernia_var, command=guncelle_zone27).grid(row=8, column=0, sticky='w')
    tk.Checkbutton(esophagus_frame, text="Tip 4 hiatal herni izlendi.", variable=tip4_hernia_var, command=guncelle_zone27).grid(row=9, column=0, sticky='w')

    # Paraesophageal and Cardia details with Radiobuttons and Checkboxes
    tk.Label(esophagus_frame, text="Paraesophageal:", font=("Arial", 10, "bold")).grid(row=10, column=0, sticky='w', padx=5)
    tk.Radiobutton(esophagus_frame, text="Milimetrik lenf nodları izlendi.", variable=paraesophageal_lenf_var, value=1, command=guncelle_zone27).grid(row=11, column=0, sticky='w')
    tk.Radiobutton(esophagus_frame, text="_____ mm çaplı lenf nodu izlendi.", variable=paraesophageal_lenf_var, value=2, command=guncelle_zone27).grid(row=12, column=0, sticky='w')
    paraesophageal_size_entry = tk.Entry(esophagus_frame, textvariable=paraesophageal_size_var, width=5)
    paraesophageal_size_entry.grid(row=12, column=1, padx=5, pady=5, sticky='w')
    paraesophageal_size_entry.bind("<KeyRelease>", lambda e: guncelle_zone27())

    separator = ttk.Separator(esophagus_frame, orient='horizontal')
    separator.grid(row=13, column=0, columnspan=2, sticky='ew', pady=20)

    # Cardia wall thickness and serosa details
    tk.Checkbutton(esophagus_frame, text="Cardia duvar kalınlığı normal sınırlardadır.", variable=cardia_kalinlik_var, command=guncelle_zone27).grid(row=14, column=0, sticky='w')
    tk.Checkbutton(esophagus_frame, text="Cardia düzeyinde seroza düzenlidir.", variable=cardia_seroza_var, command=guncelle_zone27).grid(row=15, column=0, sticky='w')

    # Paracardial lymph node options
    tk.Label(esophagus_frame, text="Parakardiyal Lenf Nodları:", font=("Arial", 10, "bold")).grid(row=16, column=0, sticky='w', padx=5)
    tk.Checkbutton(esophagus_frame, text="Sağ parakardiyal milimetrik lenf nodu izlendi.", variable=sag_parakardiyal_var, command=guncelle_zone27).grid(row=17, column=0, sticky='w')
    tk.Checkbutton(esophagus_frame, text="Sol parakardiyal _____ mm boyutlarda lenf nodu izlendi.", variable=sol_parakardiyal_var, command=toggle_sol_parakardiyal_entry).grid(row=18, column=0, sticky='w')
    sol_parakardiyal_size_entry = tk.Entry(esophagus_frame, textvariable=sol_parakardiyal_size_var, width=5)
    sol_parakardiyal_size_entry.grid(row=18, column=1, padx=5, pady=5, sticky='w')
    sol_parakardiyal_size_entry.bind("<KeyRelease>", lambda e: guncelle_zone27())

    # Initially hide the entry if the checkbox is not selected
    if not sol_parakardiyal_var.get():
        sol_parakardiyal_size_entry.grid_remove()

    # Section IV. Göğüs Duvarı
    tk.Label(main_frame, text="IV. Göğüs Duvarı", font=("Arial", 12, "bold")).grid(row=3, column=1, sticky='w', pady=5)

    # Create a frame for Göğüs Duvarı section
    gogus_duvari_frame = tk.Frame(main_frame, relief=tk.GROOVE, borderwidth=2)
    gogus_duvari_frame.grid(row=4, column=1, padx=10, pady=5, sticky='nw')

    # Checkbox for Pectus Excavatum Evaluation
    tk.Checkbutton(gogus_duvari_frame, text="Pectus excavatum değerlendirmesi", variable=pectus_excavatum_var,
                   command=toggle_pectus_excavatum_frame).grid(row=0, column=0, sticky='w')

    # Frame for Pectus Excavatum details (initially hidden)
    pectus_detay_frame = tk.Frame(gogus_duvari_frame)

    tk.Label(pectus_detay_frame, text="Göğüs Duvarı AP Genişlik:", font=("Arial", 10)).grid(row=0, column=0, sticky='w', padx=5)
    ap_genislik_entry = tk.Entry(pectus_detay_frame, textvariable=ap_genislik_var, width=10)
    ap_genislik_entry.grid(row=0, column=1, padx=5, pady=5, sticky='w')
    ap_genislik_entry.bind("<KeyRelease>", lambda e: guncelle_zone27())

    tk.Label(pectus_detay_frame, text="Göğüs Duvarı Transvers Genişlik:", font=("Arial", 10)).grid(row=1, column=0, sticky='w', padx=5)
    transvers_genislik_entry = tk.Entry(pectus_detay_frame, textvariable=transvers_genislik_var, width=10)
    transvers_genislik_entry.grid(row=1, column=1, padx=5, pady=5, sticky='w')
    transvers_genislik_entry.bind("<KeyRelease>", lambda e: guncelle_zone27())

    # Radiobuttons for sternal torsion
    tk.Radiobutton(pectus_detay_frame, text="Sternal torsiyon izlenmedi.", variable=torsiyon_var, value="izlenmedi",
                   command=guncelle_zone27).grid(row=2, column=0, columnspan=2, sticky='w', pady=5)
    tk.Radiobutton(pectus_detay_frame,
                   text="Sternumda sağ ön oblik, sagittal düzlemle _____ derece açıya sahip torsiyon izlendi.",
                   variable=torsiyon_var, value="sag", command=guncelle_zone27).grid(row=3, column=0,
                                                                                     sticky='w', pady=5)
    sag_torsiyon_acisi_entry = tk.Entry(pectus_detay_frame, textvariable=sag_torsiyon_acisi_var, width=5)
    sag_torsiyon_acisi_entry.grid(row=3, column=1, padx=5, pady=5, sticky='w')
    sag_torsiyon_acisi_entry.bind("<KeyRelease>", lambda e: guncelle_zone27())

    tk.Radiobutton(pectus_detay_frame,
                   text="Sternumda sol ön oblik, sagittal düzlemle _____ derece açıya sahip torsiyon izlendi.",
                   variable=torsiyon_var, value="sol", command=guncelle_zone27).grid(row=4, column=0,
                                                                                     sticky='w', pady=5)
    sol_torsiyon_acisi_entry = tk.Entry(pectus_detay_frame, textvariable=sol_torsiyon_acisi_var, width=5)
    sol_torsiyon_acisi_entry.grid(row=4, column=1, padx=5, pady=5, sticky='w')
    sol_torsiyon_acisi_entry.bind("<KeyRelease>", lambda e: guncelle_zone27())

    # Diğer Göğüs Duvarı seçenekleri
    tk.Checkbutton(gogus_duvari_frame, text="Hasta entübedir.", variable=hasta_entube_var, command=guncelle_zone27).grid(row=2, column=0, sticky='w')
    tk.Checkbutton(gogus_duvari_frame, text="Sağ pektoral port kateteri izlendi.", variable=sag_pektoral_port_var, command=guncelle_zone27).grid(row=3, column=0, sticky='w')
    tk.Checkbutton(gogus_duvari_frame, text="Sol pektoral port kateteri izlendi.", variable=sol_pektoral_port_var, command=guncelle_zone27).grid(row=4, column=0, sticky='w')
    tk.Checkbutton(gogus_duvari_frame, text="NG sonda izlendi.", variable=ng_sonda_var, command=guncelle_zone27).grid(row=5, column=0, sticky='w')
    tk.Checkbutton(gogus_duvari_frame, text="Trakeostomi izlendi.", variable=trakeostomi_var, command=guncelle_zone27).grid(row=6, column=0, sticky='w')
    tk.Checkbutton(gogus_duvari_frame, text="Hasta trakeostomi vasıtasıyla entübedir.", variable=entube_trakeostomi_var, command=guncelle_zone27).grid(row=7, column=0, sticky='w')

    separator_gogus = ttk.Separator(gogus_duvari_frame, orient='horizontal')
    separator_gogus.grid(row=8, column=0, columnspan=2, sticky='ew', pady=10)

    tk.Checkbutton(gogus_duvari_frame, text="Morgagni hernisi izlendi.", variable=morgagni_hernisi_var, command=guncelle_zone27).grid(row=9, column=0, sticky='w')
    tk.Checkbutton(gogus_duvari_frame, text="Sağ posterior hemidiafragmada Bochdalek hernisi izlendi. Retroperitoneal fat herniyedir.", variable=sag_bochdalek_var, command=guncelle_zone27).grid(row=10, column=0, sticky='w')
    tk.Checkbutton(gogus_duvari_frame, text="Sol posterior hemidiafragmada Bochdalek hernisi izlendi. Retroperitoneal fat herniyedir.", variable=sol_bochdalek_var, command=guncelle_zone27).grid(row=11, column=0, sticky='w')

   
    def metni_ekle():
        # Get the generated text for ZONE27
        metin = zone27_cumle_var.get()
        # Open Metin Toplama Kutusu
        metin_toplama_kutucugu = tk.Toplevel()
        metin_toplama_kutucugu.title("Metin Toplama Kutucuğu")
        metin_toplama_kutucugu.geometry("600x400+800+500")

        metin_toplama_kutucugu_text = tk.Text(metin_toplama_kutucugu, wrap=tk.WORD)
        metin_toplama_kutucugu_text.pack(expand=True, fill='both')
        metin_toplama_kutucugu_text.insert(tk.END, metin + "\n")

        # RAPORA EKLE button
        def rapora_ekle():
            metin = metin_toplama_kutucugu_text.get('1.0', tk.END).strip()
            replace_zone_text('ZONE27', metin)  # Bu fonksiyonu kendi kodunuzda tanımlamanız gerekiyor
            metin_toplama_kutucugu.destroy()
            pencere.destroy()

        tk.Button(metin_toplama_kutucugu, text="RAPORA EKLE", command=rapora_ekle).pack(pady=5)
 
    # Buttons to EKLE and KAPAT
    buton_frame = tk.Frame(pencere)
    buton_frame.pack(pady=10)

    tk.Button(buton_frame, text="EKLE", command=metni_ekle).pack(side='left', padx=10)
    tk.Button(buton_frame, text="KAPAT", command=pencere.destroy).pack(side='left', padx=10)

    # Initial call to update sentences
    guncelle_zone27()

def zone9_penceresi():
    # Yeni bir pencere oluştur
    pencere = tk.Toplevel()
    pencere.title("Zone 9: Karaciğer Raporlama")
    pencere.geometry("800x600")  # Pencere boyutu ayarlandı

    # Ana çerçeve (Scroll destekli)
    ana_frame = tk.Frame(pencere)
    ana_frame.pack(fill='both', expand=True)

    # Canvas ve Scrollbar oluşturma
    canvas = tk.Canvas(ana_frame)
    scrollbar = tk.Scrollbar(ana_frame, orient="vertical", command=canvas.yview)
    scrollable_frame = tk.Frame(canvas)

    scrollable_frame.bind(
        "<Configure>",
        lambda e: canvas.configure(
            scrollregion=canvas.bbox("all")
        )
    )

    canvas.create_window((0, 0), window=scrollable_frame, anchor='nw')
    canvas.configure(yscrollcommand=scrollbar.set)

    canvas.pack(side="left", fill="both", expand=True)
    scrollbar.pack(side="right", fill="y")

    # I. Boyut Bölümü
    tk.Label(scrollable_frame, text="I. Boyut", font=("Arial", 14, "bold")).pack(anchor='w', pady=5)
    boyut_frame = tk.LabelFrame(scrollable_frame, text="Boyut", font=("Arial", 12))
    boyut_frame.pack(fill='x', padx=10, pady=5)

    boyut_var = tk.StringVar(value="None")
    tk.Radiobutton(boyut_frame, text="Karaciğer sağ lobu normal boyutlardadır.", variable=boyut_var,
                   value="Karaciğer sağ lobu normal boyutlardadır.").pack(anchor='w')
    tk.Radiobutton(boyut_frame, text="Karaciğer sağ lob kraniokaudal uzunluğu _____ mm'dir.", variable=boyut_var,
                   value="Karaciğer sağ lob kraniokaudal uzunluğu").pack(anchor='w')
    boyut_uzunluk_var = tk.StringVar()
    tk.Entry(boyut_frame, textvariable=boyut_uzunluk_var, width=10).pack(anchor='w', padx=20)

    # Separatör çizgi
    ttk.Separator(scrollable_frame, orient='horizontal').pack(fill='x', pady=10)

    # Lobektomi ve Omentopeksi Seçenekleri
    lobektomi_frame = tk.Frame(scrollable_frame)
    lobektomi_frame.pack(fill='x', padx=10, pady=5)

    sag_lobektomi_var = tk.IntVar(value=0)
    sol_lobektomi_var = tk.IntVar(value=0)
    segment_var = tk.StringVar()

    tk.Checkbutton(lobektomi_frame, text="Sağ lobektomi izlendi.", variable=sag_lobektomi_var).pack(anchor='w')
    tk.Checkbutton(lobektomi_frame, text="Sol lobektomi izlendi.", variable=sol_lobektomi_var).pack(anchor='w')

    tk.Checkbutton(lobektomi_frame, text="Segment", variable=segment_var).pack(anchor='w')
    segment_combobox = ttk.Combobox(lobektomi_frame, textvariable=segment_var, values=["1", "2", "3", "4", "5", "6", "7", "8"], width=5)
    segment_combobox.pack(anchor='w', padx=20)
    tk.Label(lobektomi_frame, text="düzeyinde rezeksiyon ve omentopeksi izlendi.").pack(anchor='w', padx=20)

    # II. Parankim Dansitesi
    tk.Label(scrollable_frame, text="II. Parankim Dansitesi", font=("Arial", 14, "bold")).pack(anchor='w', pady=5)
    parankim_frame = tk.LabelFrame(scrollable_frame, text="Parankim Dansitesi", font=("Arial", 12))
    parankim_frame.pack(fill='x', padx=10, pady=5)

    parankim_var = tk.StringVar(value="None")
    tk.Radiobutton(parankim_frame, text="homojendir.", variable=parankim_var, value="homojendir.").pack(anchor='w')
    tk.Radiobutton(parankim_frame, text="steatotiktir.", variable=parankim_var, value="steatotiktir.").pack(anchor='w')
    tk.Radiobutton(parankim_frame, text="heterojendir.", variable=parankim_var, value="heterojendir.").pack(anchor='w')
    tk.Radiobutton(parankim_frame, text="heterojen olup granülerdir.", variable=parankim_var, value="heterojen olup granülerdir.").pack(anchor='w')
    tk.Radiobutton(parankim_frame, text="coğrafi tipte steatoz göstermektedir.", variable=parankim_var, value="coğrafi tipte steatoz göstermektedir.").pack(anchor='w')
    tk.Radiobutton(parankim_frame, text="arteriyel fazda mottled patern izlendi.", variable=parankim_var, value="arteriyel fazda mottled patern göstermiş olup portal fazda homojendir. Sağ kalp fonksiyonları değerlendirilmelidir.").pack(anchor='w')

    
    # III. Kontur
    tk.Label(scrollable_frame, text="III. Kontur", font=("Arial", 14, "bold")).pack(anchor='w', pady=5)
    kontur_frame = tk.LabelFrame(scrollable_frame, text="Kontur", font=("Arial", 12))
    kontur_frame.pack(fill='x', padx=10, pady=5)

    kontur_var = tk.StringVar(value="None")
    tk.Radiobutton(kontur_frame, text="düzenlidir.", variable=kontur_var, value="Konturları düzenlidir.").pack(anchor='w')
    tk.Radiobutton(kontur_frame, text="mikrolobuledir.", variable=kontur_var, value="Konturları mikrolobuledir.").pack(anchor='w')
    tk.Radiobutton(kontur_frame, text="makrolobuledir.", variable=kontur_var, value="Konturları makrolobuledir.").pack(anchor='w')

    # Metin Toplama Kutucuğu ve RAPORA EKLE Butonu
    def metin_toplama_kutucugu_goster():
        metin_toplama_kutucugu = tk.Toplevel()
        metin_toplama_kutucugu.title("Metin Toplama Kutucuğu")
        metin_toplama_kutucu_frame = tk.Frame(metin_toplama_kutucugu)
        metin_toplama_kutucu_frame.pack(fill='both', expand=True)

        metin_toplama_kutucugu_text = tk.Text(metin_toplama_kutucu_frame, wrap=tk.WORD)
        metin_toplama_kutucugu_text.pack(expand=True, fill='both')

        # Metin Oluşturma
        cumleler = []

        # I. Boyut
        if boyut_var.get() != "None":
            if boyut_var.get() == "Karaciğer sağ lob kraniokaudal uzunluğu":
                uzunluk = boyut_uzunluk_var.get()
                cumleler.append(f"Karaciğer sağ lob kraniokaudal uzunluğu {uzunluk} mm'dir.")
            else:
                cumleler.append(boyut_var.get())

        # Lobektomi ve omentopeksi
        if sag_lobektomi_var.get():
            cumleler.append("Sağ lobektomi izlendi.")
        if sol_lobektomi_var.get():
            cumleler.append("Sol lobektomi izlendi.")
        if segment_var.get() != "None" and segment_var.get():
            cumleler.append(f"Segment {segment_var.get()} düzeyinde omentopeksi izlendi.")

        # II. Parankim Dansitesi
        if parankim_var.get() != "None":
            cumleler.append(f"Parankim {parankim_var.get()}")

        # III. Kontur
        if kontur_var.get() != "None":
            cumleler.append(f"{kontur_var.get()}")

        # Cümleleri birleştirme ve metin kutusuna ekleme
        final_metin = " ".join(cumleler)
        metin_toplama_kutucugu_text.insert(tk.END, final_metin + "\n")

        # RAPORA EKLE Butonu
        buton_frame = tk.Frame(metin_toplama_kutucugu)
        buton_frame.pack(side='bottom', pady=10)

        def rapora_ekle():
            metin = metin_toplama_kutucugu_text.get('1.0', tk.END).strip()
            replace_zone_text('ZONE9', metin)
            metin_toplama_kutucugu.destroy()
            pencere.destroy()

        tk.Button(buton_frame, text="RAPORA EKLE", command=rapora_ekle).pack(pady=5)

    # KAYDET ve KAPAT Butonları
    buton_frame = tk.Frame(pencere)
    buton_frame.pack(side='bottom', pady=10)

    tk.Button(buton_frame, text="KAYDET", command=metin_toplama_kutucugu_goster).pack(side='left', padx=10)
    tk.Button(buton_frame, text="KAPAT", command=pencere.destroy).pack(side='left', padx=10)

def zone10_penceresi():
    pencere = tk.Toplevel()
    pencere.title("Zone 10: Karaciğer Kitlesi")
    pencere.geometry("1000x800")  # Pencere boyutu ayarlandı

    # Ana çerçeve (Scroll destekli)
    ana_frame = tk.Frame(pencere)
    ana_frame.pack(fill='both', expand=True)

    # Canvas ve Scrollbar oluşturma
    canvas = tk.Canvas(ana_frame)
    scrollbar = tk.Scrollbar(ana_frame, orient="vertical", command=canvas.yview)
    scrollable_frame = tk.Frame(canvas)

    scrollable_frame.bind(
        "<Configure>",
        lambda e: canvas.configure(
            scrollregion=canvas.bbox("all")
        )
    )

    canvas.create_window((0, 0), window=scrollable_frame, anchor='nw')
    canvas.configure(yscrollcommand=scrollbar.set)

    canvas.pack(side="left", fill="both", expand=True)
    scrollbar.pack(side="right", fill="y")

    # Bölümler arası ayrım çizgisi
    def separator():
        ttk.Separator(scrollable_frame, orient='horizontal').pack(fill='x', pady=10)

    # I. Hemangioma Başlığı
    tk.Label(scrollable_frame, text="I. Hemangioma", font=("Arial", 14, "bold")).pack(anchor='w', pady=5)

    # "Dinamik tetkik için" etiketi
    tk.Label(scrollable_frame, text='"Dinamik tetkik için"', font=("Arial", 12, "italic")).pack(anchor='w', padx=10)

    # Seçenekleri tutacak değişkenler
    hemangioma_vars = {}

    # "Segment" seçenekleri
    segment_options = [str(i) for i in range(1, 9)]  # '1'den '8'e kadar

    # İlk checkbox ve bileşenleri
    hemangioma_vars['dinamik'] = tk.IntVar()
    dinamik_frame = tk.Frame(scrollable_frame)
    dinamik_frame.pack(anchor='w', padx=20, pady=5)

    tk.Checkbutton(dinamik_frame, variable=hemangioma_vars['dinamik']).pack(side='left')
    tk.Label(dinamik_frame, text='"Segment"').pack(side='left')
    hemangioma_vars['dinamik_segment'] = tk.StringVar()
    ttk.Combobox(dinamik_frame, textvariable=hemangioma_vars['dinamik_segment'], values=segment_options, width=3).pack(side='left')
    tk.Label(dinamik_frame, text='" düzeyinde" periferal nodüler ve sentripedal tarzda kontrastlanan en geniş yerinde').pack(side='left')
    hemangioma_vars['dinamik_boyut'] = tk.StringVar()
    tk.Entry(dinamik_frame, textvariable=hemangioma_vars['dinamik_boyut'], width=5).pack(side='left')
    tk.Label(dinamik_frame, text='mm boyutlarda hemangioma izlendi.').pack(side='left')

    # Multiple hemangioma seçeneği
    hemangioma_vars['multiple'] = tk.IntVar()
    multiple_frame = tk.Frame(scrollable_frame)
    multiple_frame.pack(anchor='w', padx=20, pady=5)

    tk.Checkbutton(multiple_frame, variable=hemangioma_vars['multiple']).pack(side='left')
    tk.Label(multiple_frame, text='Büyüğü "Segment"').pack(side='left')
    hemangioma_vars['multiple_segment'] = tk.StringVar()
    ttk.Combobox(multiple_frame, textvariable=hemangioma_vars['multiple_segment'], values=segment_options, width=3).pack(side='left')
    tk.Label(multiple_frame, text='" düzeyinde" periferal nodüler ve sentripedal tarzda kontrastlanan en geniş yerinde').pack(side='left')
    hemangioma_vars['multiple_boyut'] = tk.StringVar()
    tk.Entry(multiple_frame, textvariable=hemangioma_vars['multiple_boyut'], width=5).pack(side='left')
    tk.Label(multiple_frame, text='mm boyutlarda lezyon olmak üzere (').pack(side='left')
    hemangioma_vars['multiple_sag_lob'] = tk.StringVar()
    tk.Entry(multiple_frame, textvariable=hemangioma_vars['multiple_sag_lob'], width=2).pack(side='left')
    tk.Label(multiple_frame, text=') sağ lobda, (').pack(side='left')
    hemangioma_vars['multiple_sol_lob'] = tk.StringVar()
    tk.Entry(multiple_frame, textvariable=hemangioma_vars['multiple_sol_lob'], width=2).pack(side='left')
    tk.Label(multiple_frame, text=') sol lobda, her iki lobda hemangioma ile uyumlu lezyonlar izlendi.').pack(side='left')

    # Not: Bu seçeneğin radiobutton alanları içerdiği belirtilmiş, ancak detay verilmemiş. Eğer radiobutton eklenmesi gerekiyorsa lütfen belirtin.

    # "Arter ve Portal faz içeren çalışma için" etiketi
    tk.Label(scrollable_frame, text='"Arter ve Portal faz içeren çalışma için"', font=("Arial", 12, "italic")).pack(anchor='w', padx=10)

    # Arter ve Portal faz seçeneği
    hemangioma_vars['arter_portal'] = tk.IntVar()
    arter_portal_frame = tk.Frame(scrollable_frame)
    arter_portal_frame.pack(anchor='w', padx=20, pady=5)

    tk.Checkbutton(arter_portal_frame, variable=hemangioma_vars['arter_portal']).pack(side='left')
    tk.Label(arter_portal_frame, text='"Segment"').pack(side='left')
    hemangioma_vars['arter_portal_segment'] = tk.StringVar()
    ttk.Combobox(arter_portal_frame, textvariable=hemangioma_vars['arter_portal_segment'], values=segment_options, width=3).pack(side='left')
    tk.Label(arter_portal_frame, text='" düzeyinde" periferal nodüler tarzda kontrastlanan en geniş yerinde').pack(side='left')
    hemangioma_vars['arter_portal_boyut'] = tk.StringVar()
    tk.Entry(arter_portal_frame, textvariable=hemangioma_vars['arter_portal_boyut'], width=5).pack(side='left')
    tk.Label(arter_portal_frame, text='mm boyutlarda lezyon izlendi. Hemangioma ön planda düşünülmüş olsa da bu tetkik bir washout fazına sahip değildir.').pack(side='left')

    # "Flash filling" etiketi
    tk.Label(scrollable_frame, text='"Flash filling"', font=("Arial", 12, "italic")).pack(anchor='w', padx=10)

    # Flash filling seçeneği
    hemangioma_vars['flash_filling'] = tk.IntVar()
    flash_filling_frame = tk.Frame(scrollable_frame)
    flash_filling_frame.pack(anchor='w', padx=20, pady=5)

    tk.Checkbutton(flash_filling_frame, variable=hemangioma_vars['flash_filling']).pack(side='left')
    tk.Label(flash_filling_frame, text='"Segment"').pack(side='left')
    hemangioma_vars['flash_filling_segment'] = tk.StringVar()
    ttk.Combobox(flash_filling_frame, textvariable=hemangioma_vars['flash_filling_segment'], values=segment_options, width=3).pack(side='left')
    tk.Label(flash_filling_frame, text='" düzeyinde" homojen tarzda kontrastlanan en geniş yerinde').pack(side='left')
    hemangioma_vars['flash_filling_boyut'] = tk.StringVar()
    tk.Entry(flash_filling_frame, textvariable=hemangioma_vars['flash_filling_boyut'], width=5).pack(side='left')
    tk.Label(flash_filling_frame, text='mm boyutlarda lezyon izlendi. Hemangioma ön planda düşünülmüş olsa da bu tetkik bir washout fazına sahip değildir.').pack(side='left')

    # Bölümler arası ayrım çizgisi
    separator()

    # II. Kist Başlığı
    tk.Label(scrollable_frame, text="II. Kist", font=("Arial", 14, "bold")).pack(anchor='w', pady=5)

    # Kist seçenekleri
    kist_vars = {}

    # "Basit" kist seçeneği
    tk.Label(scrollable_frame, text='"Basit"', font=("Arial", 12, "italic")).pack(anchor='w', padx=10)

    kist_vars['basit'] = tk.IntVar()
    basit_frame = tk.Frame(scrollable_frame)
    basit_frame.pack(anchor='w', padx=20, pady=5)

    tk.Checkbutton(basit_frame, variable=kist_vars['basit']).pack(side='left')
    tk.Label(basit_frame, text='"Segment"').pack(side='left')
    kist_vars['basit_segment'] = tk.StringVar()
    ttk.Combobox(basit_frame, textvariable=kist_vars['basit_segment'], values=segment_options, width=3).pack(side='left')
    tk.Label(basit_frame, text='" düzeyinde"').pack(side='left')

    # Boyut veya milimetrik seçenekleri
    kist_vars['basit_boyut'] = tk.StringVar()
    tk.Entry(basit_frame, textvariable=kist_vars['basit_boyut'], width=5).pack(side='left')
    tk.Label(basit_frame, text='mm boyutlarda basit kist izlendi.').pack(side='left')

    # "Kist hidatik" seçeneği
    tk.Label(scrollable_frame, text='"Kist hidatik"', font=("Arial", 12, "italic")).pack(anchor='w', padx=10)

    kist_vars['hidatik'] = tk.IntVar()
    hidatik_frame = tk.Frame(scrollable_frame)
    hidatik_frame.pack(anchor='w', padx=20, pady=5)

    tk.Checkbutton(hidatik_frame, variable=kist_vars['hidatik']).pack(side='left')
    tk.Label(hidatik_frame, text='"Segment"').pack(side='left')
    kist_vars['hidatik_segment'] = tk.StringVar()
    ttk.Combobox(hidatik_frame, textvariable=kist_vars['hidatik_segment'], values=segment_options, width=3).pack(side='left')
    tk.Label(hidatik_frame, text='" düzeyinde"').pack(side='left')
    kist_vars['hidatik_boyut'] = tk.StringVar()
    tk.Entry(hidatik_frame, textvariable=kist_vars['hidatik_boyut'], width=5).pack(side='left')
    tk.Label(hidatik_frame, text='mm boyutlarda').pack(side='left')

    # Uzun ifadeler içeren combobox
    hidatik_options = [
        "unikameral, cidar yapısı ayırt edilebilen WHO-IWGE tip CE1",
        "septalar içeren WHO-IWGE tip CE2",
        "germinatif membran seperasyonuna sahip WHO-IWGE tip CE3",
        "solidifiye olmuş WHO-IWGE tip CE4",
        "kalsifiye olmuş WHO-IWGE tip CE5"
    ]
    kist_vars['hidatik_tip'] = tk.StringVar()
    ttk.Combobox(hidatik_frame, textvariable=kist_vars['hidatik_tip'], values=hidatik_options, width=60).pack(side='left')
    tk.Label(hidatik_frame, text='kist hidatik izlendi.').pack(side='left')

    # "Non-spesifik Septalı veya Kalsifiye" kist seçeneği
    tk.Label(scrollable_frame, text='"Non-spesifik Septalı veya Kalsifiye"', font=("Arial", 12, "italic")).pack(anchor='w', padx=10)

    # Septalı kist
    kist_vars['septali'] = tk.IntVar()
    septali_frame = tk.Frame(scrollable_frame)
    septali_frame.pack(anchor='w', padx=20, pady=5)

    tk.Checkbutton(septali_frame, variable=kist_vars['septali']).pack(side='left')
    tk.Label(septali_frame, text='"Segment"').pack(side='left')
    kist_vars['septali_segment'] = tk.StringVar()
    ttk.Combobox(septali_frame, textvariable=kist_vars['septali_segment'], values=segment_options, width=3).pack(side='left')
    tk.Label(septali_frame, text='" düzeyinde"').pack(side='left')
    kist_vars['septali_boyut'] = tk.StringVar()
    tk.Entry(septali_frame, textvariable=kist_vars['septali_boyut'], width=5).pack(side='left')
    tk.Label(septali_frame, text='mm boyutlarda septalı kist izlendi.').pack(side='left')

    # Kalsifiye kist
    kist_vars['kalsifiye'] = tk.IntVar()
    kalsifiye_frame = tk.Frame(scrollable_frame)
    kalsifiye_frame.pack(anchor='w', padx=20, pady=5)

    tk.Checkbutton(kalsifiye_frame, variable=kist_vars['kalsifiye']).pack(side='left')
    tk.Label(kalsifiye_frame, text='"Segment"').pack(side='left')
    kist_vars['kalsifiye_segment'] = tk.StringVar()
    ttk.Combobox(kalsifiye_frame, textvariable=kist_vars['kalsifiye_segment'], values=segment_options, width=3).pack(side='left')
    tk.Label(kalsifiye_frame, text='" düzeyinde"').pack(side='left')
    kist_vars['kalsifiye_boyut'] = tk.StringVar()
    tk.Entry(kalsifiye_frame, textvariable=kist_vars['kalsifiye_boyut'], width=5).pack(side='left')
    tk.Label(kalsifiye_frame, text='mm boyutlarda cidarı kalsifiye kist izlendi.').pack(side='left')

    # Bölümler arası ayrım çizgisi
    separator()

    # III. Non-spesifik hipodens lezyon Başlığı
    tk.Label(scrollable_frame, text="III. Non-spesifik hipodens lezyon", font=("Arial", 14, "bold")).pack(anchor='w', pady=5)

    # Non-spesifik lezyon seçenekleri
    hipodens_vars = {}

    # "Kontrastsız çalışma için uygun" seçeneği
    tk.Label(scrollable_frame, text='"Kontrastsız çalışma için uygun"', font=("Arial", 12, "italic")).pack(anchor='w', padx=10)

    hipodens_vars['kontrastsiz'] = tk.IntVar()
    kontrastsiz_frame = tk.Frame(scrollable_frame)
    kontrastsiz_frame.pack(anchor='w', padx=20, pady=5)

    tk.Checkbutton(kontrastsiz_frame, variable=hipodens_vars['kontrastsiz']).pack(side='left')
    tk.Label(kontrastsiz_frame, text='"Segment"').pack(side='left')
    hipodens_vars['kontrastsiz_segment'] = tk.StringVar()
    ttk.Combobox(kontrastsiz_frame, textvariable=hipodens_vars['kontrastsiz_segment'], values=segment_options, width=3).pack(side='left')
    tk.Label(kontrastsiz_frame, text='" düzeyinde"').pack(side='left')
    hipodens_vars['kontrastsiz_boyut'] = tk.StringVar()
    tk.Entry(kontrastsiz_frame, textvariable=hipodens_vars['kontrastsiz_boyut'], width=5).pack(side='left')
    tk.Label(kontrastsiz_frame, text='mm boyutlarda hipodens nodüler lezyon izlendi.').pack(side='left')

    # "Kontrastlı çalışma için uygun" seçeneği
    tk.Label(scrollable_frame, text='"Kontrastlı çalışma için uygun"', font=("Arial", 12, "italic")).pack(anchor='w', padx=10)

    hipodens_vars['kontrastli'] = tk.IntVar()
    kontrastli_frame = tk.Frame(scrollable_frame)
    kontrastli_frame.pack(anchor='w', padx=20, pady=5)

    tk.Checkbutton(kontrastli_frame, variable=hipodens_vars['kontrastli']).pack(side='left')
    tk.Label(kontrastli_frame, text='"Segment"').pack(side='left')
    hipodens_vars['kontrastli_segment'] = tk.StringVar()
    ttk.Combobox(kontrastli_frame, textvariable=hipodens_vars['kontrastli_segment'], values=segment_options, width=3).pack(side='left')
    tk.Label(kontrastli_frame, text='" düzeyinde"').pack(side='left')
    hipodens_vars['kontrastli_boyut'] = tk.StringVar()
    tk.Entry(kontrastli_frame, textvariable=hipodens_vars['kontrastli_boyut'], width=5).pack(side='left')
    tk.Label(kontrastli_frame, text='mm boyutlarda çevre parankime göre hipoatenue kalan nodüler lezyon izlendi.').pack(side='left')

    # Bölümler arası ayrım çizgisi
    separator()

    # IV. Kitle Başlığı
    tk.Label(scrollable_frame, text="IV. Kitle", font=("Arial", 14, "bold")).pack(anchor='w', pady=5)

    # Kitle seçenekleri
    kitle_vars = {}

    # "Tek" kitle seçeneği
    tk.Label(scrollable_frame, text='"Tek"', font=("Arial", 12, "italic")).pack(anchor='w', padx=10)

    kitle_vars['tek'] = tk.IntVar()
    tek_frame = tk.Frame(scrollable_frame)
    tek_frame.pack(anchor='w', padx=20, pady=5)
    kitle_vars['multiple'] = tk.IntVar()
    kitle_vars['multiple_segment1'] = tk.StringVar()
    kitle_vars['multiple_boyut1'] = tk.StringVar()
    kitle_vars['multiple_segment2'] = tk.StringVar()
    kitle_vars['multiple_boyut2'] = tk.StringVar()
    kitle_vars['multiple_kontrast_tip'] = tk.StringVar(value="None")
    kitle_vars['multiple_lokasyon'] = tk.StringVar(value="None")

    # 7 sütun halinde bileşenler
    # 1. sütun: Checkbox
    tk.Checkbutton(tek_frame, variable=kitle_vars['tek']).grid(row=0, column=0)

    # 2. sütun: "Segment" ve combobox
    tk.Label(tek_frame, text='"Segment"').grid(row=0, column=1)
    kitle_vars['tek_segment'] = tk.StringVar()
    ttk.Combobox(tek_frame, textvariable=kitle_vars['tek_segment'], values=segment_options, width=3).grid(row=0, column=2)

    # 3. sütun: "düzeyinde"
    tk.Label(tek_frame, text='" düzeyinde"').grid(row=0, column=3)

    # 4. sütun: Boyut girişi
    kitle_vars['tek_boyut'] = tk.StringVar()
    tk.Entry(tek_frame, textvariable=kitle_vars['tek_boyut'], width=5).grid(row=0, column=4)
    tk.Label(tek_frame, text='mm').grid(row=0, column=5)

    # 5. sütun: "boyutlarda IVKM sonrası"
    tk.Label(tek_frame, text='boyutlarda IVKM sonrası').grid(row=0, column=6)

    # 6. sütun: Radiobutton seçenekleri
    kitle_vars['kontrast_tip'] = tk.StringVar(value="None")
    radiobutton_frame = tk.Frame(tek_frame)
    radiobutton_frame.grid(row=0, column=7, rowspan=4, sticky='w')

    tk.Radiobutton(radiobutton_frame, text="inhomojen kontrastlanan", variable=kitle_vars['kontrast_tip'], value="inhomojen kontrastlanan").pack(anchor='w')
    tk.Radiobutton(radiobutton_frame, text="periferal continuous tipte kontrastlanan", variable=kitle_vars['kontrast_tip'], value="periferal continuous tipte kontrastlanan").pack(anchor='w')
    tk.Radiobutton(radiobutton_frame, text="periferal viable doku ve santral nekroz içeren", variable=kitle_vars['kontrast_tip'], value="periferal viable doku ve santral nekroz içeren").pack(anchor='w')
    tk.Radiobutton(radiobutton_frame, text="heterojen kontrastlanan kalsifikasyon içeren", variable=kitle_vars['kontrast_tip'], value="heterojen kontrastlanan kalsifikasyon içeren").pack(anchor='w')

    # 7. sütun: "kitle lezyonu izlendi."
    tk.Label(tek_frame, text='kitle lezyonu izlendi.').grid(row=0, column=8)

    # "Multiple" kitle seçeneği
    tk.Label(scrollable_frame, text='"Multiple"', font=("Arial", 12, "italic")).pack(anchor='w', padx=10)

    multiple_frame = tk.Frame(scrollable_frame)
    multiple_frame.pack(anchor='w', padx=20, pady=5)

    # Checkbox
    tk.Checkbutton(multiple_frame, variable=kitle_vars['multiple']).grid(row=0, column=0)

    # Büyükleri Segment [COMBOBOX] düzeyinde ____ mm ve Segment [COMBOBOX] düzeyinde ____ mm boyutlarda, IVKM sonrası ...
    tk.Label(multiple_frame, text='Büyükleri Segment').grid(row=0, column=1)
    ttk.Combobox(multiple_frame, textvariable=kitle_vars['multiple_segment1'], values=segment_options, width=3).grid(
        row=0, column=2)
    tk.Label(multiple_frame, text='düzeyinde').grid(row=0, column=3)
    tk.Entry(multiple_frame, textvariable=kitle_vars['multiple_boyut1'], width=5).grid(row=0, column=4)
    tk.Label(multiple_frame, text='mm').grid(row=0, column=5)

    tk.Label(multiple_frame, text='ve Segment').grid(row=0, column=6)
    ttk.Combobox(multiple_frame, textvariable=kitle_vars['multiple_segment2'], values=segment_options, width=3).grid(
        row=0, column=7)
    tk.Label(multiple_frame, text='düzeyinde').grid(row=0, column=8)
    tk.Entry(multiple_frame, textvariable=kitle_vars['multiple_boyut2'], width=5).grid(row=0, column=9)
    tk.Label(multiple_frame, text='mm').grid(row=0, column=10)

    tk.Label(multiple_frame, text='boyutlarda, IVKM sonrası').grid(row=0, column=11)

    # Radiobutton seçenekleri (Kontrast Tipi)
    multiple_radiobutton_frame = tk.Frame(multiple_frame)
    multiple_radiobutton_frame.grid(row=0, column=12, rowspan=4, sticky='w')

    tk.Radiobutton(multiple_radiobutton_frame, text="inhomojen kontrastlanan",
                   variable=kitle_vars['multiple_kontrast_tip'], value="inhomojen kontrastlanan").pack(anchor='w')
    tk.Radiobutton(multiple_radiobutton_frame, text="periferal continuous tipte kontrastlanan",
                   variable=kitle_vars['multiple_kontrast_tip'], value="periferal continuous tipte kontrastlanan").pack(
        anchor='w')
    tk.Radiobutton(multiple_radiobutton_frame, text="periferal viable doku ve santral nekroz içeren",
                   variable=kitle_vars['multiple_kontrast_tip'],
                   value="periferal viable doku ve santral nekroz içeren").pack(anchor='w')
    tk.Radiobutton(multiple_radiobutton_frame, text="heterojen kontrastlanan kalsifikasyon içeren",
                   variable=kitle_vars['multiple_kontrast_tip'],
                   value="heterojen kontrastlanan kalsifikasyon içeren").pack(anchor='w')

    # Lokasyon seçenekleri
    tk.Radiobutton(multiple_frame, text="sağ lobda yerleşik", variable=kitle_vars['multiple_lokasyon'],
                   value="sağ lobda yerleşik").grid(row=1, column=0, sticky='w')
    tk.Radiobutton(multiple_frame, text="sol lobda yerleşik", variable=kitle_vars['multiple_lokasyon'],
                   value="sol lobda yerleşik").grid(row=1, column=1, sticky='w')
    tk.Radiobutton(multiple_frame, text="her iki lobda yerleşik", variable=kitle_vars['multiple_lokasyon'],
                   value="her iki lobda yerleşik").grid(row=1, column=2, sticky='w')

    # Son cümle
    tk.Label(multiple_frame, text='multiple karaciğer kitleleri izlendi.').grid(row=0, column=13)

    # Ek seçenekler
    kitle_vars['kontur_lobule'] = tk.IntVar()
    tk.Checkbutton(tek_frame, text="Karaciğer konturu lezyona komşu kesimde lobuledir.", variable=kitle_vars['kontur_lobule']).grid(row=5, column=0, columnspan=9, sticky='w')
    kitle_vars['kapsul_cekinti'] = tk.IntVar()
    tk.Checkbutton(tek_frame, text="Karaciğer kapsülü lezyona komşu kesimde çekintilidir.", variable=kitle_vars['kapsul_cekinti']).grid(row=6, column=0, columnspan=9, sticky='w')
    kitle_vars['hcc_on_planda'] = tk.IntVar()
    tk.Checkbutton(tek_frame, text="Önceki tetkiklerle kıyaslandığında bu lezyonun arteriyel transformasyon geçirdiği anlaşılmış olup HCC ön planda düşünüldü.", variable=kitle_vars['hcc_on_planda']).grid(row=7, column=0, columnspan=9, sticky='w')

    # En altta butonları eklemek için yeni bir çerçeve (ana pencerenin dışında)
    buton_frame = tk.Frame(pencere)
    buton_frame.pack(side='bottom', pady=10)

    # KAYDET ve KAPAT butonları
    def metin_toplama_kutucugu_goster():
        metin_toplama_kutucugu = tk.Toplevel()
        metin_toplama_kutucugu.title("Metin Toplama Kutucuğu")
        metin_toplama_kutucugu.geometry("800x600+800+500")  # Daha büyük bir pencere

        metin_toplama_kutucugu_text = tk.Text(metin_toplama_kutucugu, wrap=tk.WORD)
        metin_toplama_kutucugu_text.pack(expand=True, fill='both')

        # Metin Oluşturma
        cumleler = []

        # I. Hemangioma Bölümü
        if hemangioma_vars['dinamik'].get():
            segment = hemangioma_vars['dinamik_segment'].get()
            boyut = hemangioma_vars['dinamik_boyut'].get()
            cumle = f'Segment {segment} düzeyinde periferal nodüler ve sentripedal tarzda kontrastlanan en geniş yerinde {boyut} mm boyutlarda hemangioma izlendi.'
            cumleler.append(cumle)

        if hemangioma_vars['multiple'].get():
            segment = hemangioma_vars['multiple_segment'].get()
            boyut = hemangioma_vars['multiple_boyut'].get()
            sag_lob = hemangioma_vars['multiple_sag_lob'].get()
            sol_lob = hemangioma_vars['multiple_sol_lob'].get()
            cumle = f'Büyüğü Segment {segment} düzeyinde periferal nodüler ve sentripedal tarzda kontrastlanan en geniş yerinde {boyut} mm boyutlarda lezyon olmak üzere ({sag_lob}) sağ lobda, ({sol_lob}) sol lobda, her iki lobda hemangioma ile uyumlu lezyonlar izlendi.'
            cumleler.append(cumle)

        if hemangioma_vars['arter_portal'].get():
            segment = hemangioma_vars['arter_portal_segment'].get()
            boyut = hemangioma_vars['arter_portal_boyut'].get()
            cumle = f'Segment {segment} düzeyinde periferal nodüler tarzda kontrastlanan en geniş yerinde {boyut} mm boyutlarda lezyon izlendi. Hemangioma ön planda düşünülmüş olsa da bu tetkik bir washout fazına sahip değildir.'
            cumleler.append(cumle)

        if hemangioma_vars['flash_filling'].get():
            segment = hemangioma_vars['flash_filling_segment'].get()
            boyut = hemangioma_vars['flash_filling_boyut'].get()
            cumle = f'Segment {segment} düzeyinde homojen tarzda kontrastlanan en geniş yerinde {boyut} mm boyutlarda lezyon izlendi. Hemangioma ön planda düşünülmüş olsa da bu tetkik bir washout fazına sahip değildir.'
            cumleler.append(cumle)

        # II. Kist Bölümü
        if kist_vars['basit'].get():
            segment = kist_vars['basit_segment'].get()
            boyut = kist_vars['basit_boyut'].get()
            cumle = f'Segment {segment} düzeyinde {boyut} mm boyutlarda basit kist izlendi.'
            cumleler.append(cumle)

        if kist_vars['hidatik'].get():
            segment = kist_vars['hidatik_segment'].get()
            boyut = kist_vars['hidatik_boyut'].get()
            tip = kist_vars['hidatik_tip'].get()
            cumle = f'Segment {segment} düzeyinde {boyut} mm boyutlarda {tip} kist hidatik izlendi.'
            cumleler.append(cumle)

        if kist_vars['septali'].get():
            segment = kist_vars['septali_segment'].get()
            boyut = kist_vars['septali_boyut'].get()
            cumle = f'Segment {segment} düzeyinde {boyut} mm boyutlarda septalı kist izlendi.'
            cumleler.append(cumle)

        if kist_vars['kalsifiye'].get():
            segment = kist_vars['kalsifiye_segment'].get()
            boyut = kist_vars['kalsifiye_boyut'].get()
            cumle = f'Segment {segment} düzeyinde {boyut} mm boyutlarda cidarı kalsifiye kist izlendi.'
            cumleler.append(cumle)

        # III. Non-spesifik hipodens lezyon Bölümü
        if hipodens_vars['kontrastsiz'].get():
            segment = hipodens_vars['kontrastsiz_segment'].get()
            boyut = hipodens_vars['kontrastsiz_boyut'].get()
            cumle = f'Segment {segment} düzeyinde {boyut} mm boyutlarda hipodens nodüler lezyon izlendi.'
            cumleler.append(cumle)

        if hipodens_vars['kontrastli'].get():
            segment = hipodens_vars['kontrastli_segment'].get()
            boyut = hipodens_vars['kontrastli_boyut'].get()
            cumle = f'Segment {segment} düzeyinde {boyut} mm boyutlarda çevre parankime göre hipoatenue kalan nodüler lezyon izlendi.'
            cumleler.append(cumle)

        # IV. Kitle Bölümü
        if kitle_vars['tek'].get():
            segment = kitle_vars['tek_segment'].get()
            boyut = kitle_vars['tek_boyut'].get()
            kontrast_tip = kitle_vars['kontrast_tip'].get()
            cumle = f'Segment {segment} düzeyinde {boyut} mm boyutlarda IVKM sonrası {kontrast_tip} kitle lezyonu izlendi.'
            cumleler.append(cumle)
            if kitle_vars['kontur_lobule'].get():
                cumleler.append("Karaciğer konturu lezyona komşu kesimde lobuledir.")
            if kitle_vars['kapsul_cekinti'].get():
                cumleler.append("Karaciğer kapsülü lezyona komşu kesimde çekintilidir.")
            if kitle_vars['hcc_on_planda'].get():
                cumleler.append("Önceki tetkiklerle kıyaslandığında bu lezyonun arteriyel transformasyon geçirdiği anlaşılmış olup HCC ön planda düşünüldü.")

        if kitle_vars['multiple'].get():
            segment1 = kitle_vars['multiple_segment1'].get()
            boyut1 = kitle_vars['multiple_boyut1'].get()
            segment2 = kitle_vars['multiple_segment2'].get()
            boyut2 = kitle_vars['multiple_boyut2'].get()
            kontrast_tip = kitle_vars['multiple_kontrast_tip'].get()
            lokasyon = kitle_vars['multiple_lokasyon'].get()
            cumle = f'Büyükleri Segment {segment1} düzeyinde {boyut1} mm ve Segment {segment2} düzeyinde {boyut2} mm boyutlarda, IVKM sonrası {kontrast_tip}, {lokasyon} multiple karaciğer kitleleri izlendi.'
            cumleler.append(cumle)
            if kitle_vars['kontur_lobule'].get():
                cumleler.append("Karaciğer konturu lezyonlara komşu kesimde lobuledir.")
            if kitle_vars['kapsul_cekinti'].get():
                cumleler.append("Karaciğer kapsülü lezyonlara komşu kesimde çekintilidir.")
            if kitle_vars['hcc_on_planda'].get():
                cumleler.append(
                    "Önceki tetkiklerle kıyaslandığında bu lezyonların arteriyel transformasyon geçirdiği anlaşılmış olup HCC ön planda düşünüldü.")

        # Boş olmayan cümleleri birleştir
        final_metin = "\n".join([c for c in cumleler if c])

        metin_toplama_kutucugu_text.insert(tk.END, final_metin + "\n")

        # RAPORA EKLE Butonu
        def rapora_ekle():
            metin = metin_toplama_kutucugu_text.get('1.0', tk.END).strip()
            replace_zone_text('ZONE10', metin)
            metin_toplama_kutucugu.destroy()
            pencere.destroy()

        tk.Button(metin_toplama_kutucugu, text="RAPORA EKLE", command=rapora_ekle).pack(pady=5)

    tk.Button(buton_frame, text="KAYDET", command=metin_toplama_kutucugu_goster).pack(side='left', padx=10)
    tk.Button(buton_frame, text="KAPAT", command=pencere.destroy).pack(side='left', padx=10)


def zone11_penceresi():
    pencere = tk.Toplevel()
    pencere.title("Zone 11: Karaciğer Vasküler Yapıları")
    pencere.geometry("1000x800")  # Pencere boyutu ayarlandı

    # Ana çerçeve (Scroll destekli)
    ana_frame = tk.Frame(pencere)
    ana_frame.pack(fill='both', expand=True)

    # Canvas ve Scrollbar oluşturma
    canvas = tk.Canvas(ana_frame)
    scrollbar = tk.Scrollbar(ana_frame, orient="vertical", command=canvas.yview)
    scrollable_frame = tk.Frame(canvas)

    scrollable_frame.bind(
        "<Configure>",
        lambda e: canvas.configure(
            scrollregion=canvas.bbox("all")
        )
    )

    canvas.create_window((0, 0), window=scrollable_frame, anchor='nw')
    canvas.configure(yscrollcommand=scrollbar.set)

    canvas.pack(side="left", fill="both", expand=True)
    scrollbar.pack(side="right", fill="y")

    # Bölümler arası ayrım çizgisi
    def separator():
        ttk.Separator(scrollable_frame, orient='horizontal').pack(fill='x', pady=10)

    # I. Hepatik Venler Başlığı
    tk.Label(scrollable_frame, text="I. Hepatik Venler", font=("Arial", 14, "bold")).pack(anchor='w', pady=5)

    # Hepatik Venler seçenekleri
    hepatik_ven_vars = {}

    hepatik_ven_vars['normal_boyut'] = tk.IntVar()
    tk.Checkbutton(scrollable_frame, text="Hepatik venler normal boyutlardadır.", variable=hepatik_ven_vars['normal_boyut']).pack(anchor='w', padx=20)

    hepatik_ven_vars['ivc_genis'] = tk.IntVar()
    tk.Checkbutton(scrollable_frame, text="Hepatik venler ve konfluens düzeyinde IVC geniştir.", variable=hepatik_ven_vars['ivc_genis']).pack(anchor='w', padx=20)

    hepatik_ven_vars['kollabe'] = tk.IntVar()
    tk.Checkbutton(scrollable_frame, text="Hepatik venler kollabedir.", variable=hepatik_ven_vars['kollabe']).pack(anchor='w', padx=20)

    hepatik_ven_vars['regurjitasyon'] = tk.IntVar()
    tk.Checkbutton(scrollable_frame, text="RA düzeyinde opak madde IVC ve hepatik venlere regürjite olmuştur.", variable=hepatik_ven_vars['regurjitasyon']).pack(anchor='w', padx=20)

    hepatik_ven_vars['basilidir'] = tk.IntVar()
    tk.Checkbutton(scrollable_frame, text="Hepatik venler basılıdır.", variable=hepatik_ven_vars['basilidir']).pack(anchor='w', padx=20)

    hepatik_ven_vars['budd_chiari'] = tk.IntVar()
    tk.Checkbutton(scrollable_frame, text="Hepatik venlerde konfluens seviyesinde dolum defektif olup Budd-Chiari sendromu yönünden değerlendirme önerilir.", variable=hepatik_ven_vars['budd_chiari']).pack(anchor='w', padx=20)

    # Portosistemik shunt seçeneği
    hepatik_ven_vars['shunt'] = tk.IntVar()
    shunt_frame = tk.Frame(scrollable_frame)
    shunt_frame.pack(anchor='w', padx=20, pady=5)

    tk.Checkbutton(shunt_frame, variable=hepatik_ven_vars['shunt']).pack(side='left')
    tk.Label(shunt_frame, text='"Segment"').pack(side='left')

    segment_options = [str(i) for i in range(1, 9)]  # '1'den '8'e kadar
    hepatik_ven_vars['shunt_segment'] = tk.StringVar()
    ttk.Combobox(shunt_frame, textvariable=hepatik_ven_vars['shunt_segment'], values=segment_options, width=3).pack(side='left')

    tk.Label(shunt_frame, text='" düzeyinde" portosistemik shunt bulgusu izlendi.').pack(side='left')

    # Bölümler arası ayrım çizgisi
    separator()

    # II. Portal Ven Başlığı
    tk.Label(scrollable_frame, text="II. Portal Ven", font=("Arial", 14, "bold")).pack(anchor='w', pady=5)

    # Portal Ven seçenekleri
    portal_ven_vars = {}

    # Ana portal ven çapı ve Splenik ven çapı için çerçeve
    portal_ven_frame = tk.Frame(scrollable_frame)
    portal_ven_frame.pack(anchor='w', padx=20, pady=5)

    # Sol tarafta Ana portal ven ve Splenik ven
    left_frame = tk.Frame(portal_ven_frame)
    left_frame.pack(side='left', padx=10)

    # Ana portal ven çapı
    portal_ven_vars['ana_portal_secim'] = tk.StringVar(value="normal")
    tk.Radiobutton(left_frame, text="Ana portal ven çapı normaldir.", variable=portal_ven_vars['ana_portal_secim'], value="normal").pack(anchor='w')

    ana_portal_olcum_frame = tk.Frame(left_frame)
    ana_portal_olcum_frame.pack(anchor='w')

    tk.Radiobutton(ana_portal_olcum_frame, text="Ana portal ven çapı:", variable=portal_ven_vars['ana_portal_secim'], value="olcum").pack(side='left')
    portal_ven_vars['ana_portal_boyut'] = tk.StringVar()
    tk.Entry(ana_portal_olcum_frame, textvariable=portal_ven_vars['ana_portal_boyut'], width=5).pack(side='left')
    tk.Label(ana_portal_olcum_frame, text="mm'dir.").pack(side='left')

    # Splenik ven çapı
    portal_ven_vars['splenik_ven_secim'] = tk.StringVar(value="normal")
    tk.Radiobutton(left_frame, text="Splenik ven çapı normaldir.", variable=portal_ven_vars['splenik_ven_secim'], value="normal").pack(anchor='w', pady=5)

    splenik_ven_olcum_frame = tk.Frame(left_frame)
    splenik_ven_olcum_frame.pack(anchor='w')

    tk.Radiobutton(splenik_ven_olcum_frame, text="Splenik ven çapı:", variable=portal_ven_vars['splenik_ven_secim'], value="olcum").pack(side='left')
    portal_ven_vars['splenik_ven_boyut'] = tk.StringVar()
    tk.Entry(splenik_ven_olcum_frame, textvariable=portal_ven_vars['splenik_ven_boyut'], width=5).pack(side='left')
    tk.Label(splenik_ven_olcum_frame, text="mm'dir.").pack(side='left')

    # Sağ tarafta Venlerin patensi veya trombozu
    right_frame = tk.Frame(portal_ven_frame)
    right_frame.pack(side='left', padx=50)

    # Venlerin patensi veya trombozu
    ven_listesi = [
        ("Splenik ven", 'splenik_ven'),
        ("SMV", 'smv'),
        ("Ana portal ven", 'sag_portal_ven'),
        ("Sağ portal ven anterior sektör dalı", 'sag_portal_ven_anterior'),
        ("Sağ portal ven posterior sektör dalı", 'sag_portal_ven_posterior'),
        ("Sol portal ven", 'sol_portal_ven')
    ]
    
    # Başlık satırı ekliyoruz
    tk.Label(right_frame, text="Ven Adı", font=("Arial", 10, "bold")).grid(row=0, column=0, padx=5)
    tk.Label(right_frame, text="Patenttir", font=("Arial", 10, "bold")).grid(row=0, column=1, padx=5)
    tk.Label(right_frame, text="Trombozedir", font=("Arial", 10, "bold")).grid(row=0, column=2, padx=5)

    for i, (ven_adi, var_prefix) in enumerate(ven_listesi, start=1):
        portal_ven_vars[var_prefix] = tk.IntVar()
        portal_ven_vars[f"{var_prefix}_durum"] = tk.StringVar(value="patenttir")

        # Ven adı ve checkbox
        tk.Checkbutton(right_frame, text=ven_adi, variable=portal_ven_vars[var_prefix]).grid(row=i, column=0, sticky='w', padx=5, pady=2)

        # Radiobuttonlar
        tk.Radiobutton(right_frame, variable=portal_ven_vars[f"{var_prefix}_durum"], value="patenttir").grid(row=i, column=1, padx=5)
        tk.Radiobutton(right_frame, variable=portal_ven_vars[f"{var_prefix}_durum"], value="trombozedir").grid(row=i, column=2, padx=5)
        
    # Bölümler arası ayrım çizgisi
    separator()

    # Paraumblikal ven
    paraumblikal_frame = tk.Frame(scrollable_frame)
    paraumblikal_frame.pack(anchor='w', padx=20, pady=2)

    portal_ven_vars['paraumblikal_ven'] = tk.IntVar()
    tk.Checkbutton(paraumblikal_frame, text="Paraumblikal ven", variable=portal_ven_vars['paraumblikal_ven']).pack(side='left')

    # Durum değişkenini tanımlıyoruz
    portal_ven_vars['paraumblikal_durum'] = tk.StringVar(value="patent değildir")

    durum_frame = tk.Frame(paraumblikal_frame)
    durum_frame.pack(side='left', padx=10)

    tk.Radiobutton(durum_frame, text="patent değildir", variable=portal_ven_vars['paraumblikal_durum'], value="patent değildir").pack(anchor='w')
    tk.Radiobutton(durum_frame, text="patenttir", variable=portal_ven_vars['paraumblikal_durum'], value="patenttir").pack(anchor='w')

    # Bölümler arası ayrım çizgisi
    separator()

    # Portal sisteme ait kollateraller
    kollateral_frame = tk.Frame(scrollable_frame)
    kollateral_frame.pack(anchor='w', padx=20, pady=2)

    # İlk sütun: "Portal sisteme ait" checkbox'ı
    portal_ven_vars['kollateraller'] = tk.IntVar()
    tk.Checkbutton(kollateral_frame, text="Portal sisteme ait", variable=portal_ven_vars['kollateraller']).grid(row=0, column=0, sticky='w')

    # İkinci sütun: Kollateral bölgeleri
    kollateral_bolgeler = [
        ("perigastrik bölgede", 'perigastrik'),
        ("bursa omentaliste", 'bursa_omentalis'),
        ("porta hepatis düzeyinde", 'porta_hepatis'),
        ("paraözefageal", 'paraozefageal')
    ]

    bolgeler_frame = tk.Frame(kollateral_frame)
    bolgeler_frame.grid(row=0, column=1, sticky='w', padx=10)

    for bolge_adi, var_name in kollateral_bolgeler:
        portal_ven_vars[var_name] = tk.IntVar()
        tk.Checkbutton(bolgeler_frame, text=bolge_adi, variable=portal_ven_vars[var_name]).pack(anchor='w')

    # Üçüncü sütun: "kollateraller izlendi." ifadesi
    tk.Label(kollateral_frame, text="kollateraller izlendi.").grid(row=0, column=2, sticky='w', padx=10)

    # Diğer seçenekler
    portal_ven_vars['ozefagus_varisleri'] = tk.IntVar()
    tk.Checkbutton(scrollable_frame, text="Özefagus varisleri yönünden ileri değerlendirme önerilir.", variable=portal_ven_vars['ozefagus_varisleri']).pack(anchor='w', padx=20, pady=2)

    portal_ven_vars['kavernoz_transformasyon'] = tk.IntVar()
    tk.Checkbutton(scrollable_frame, text="Portada kavernöz transformasyon izlendi.", variable=portal_ven_vars['kavernoz_transformasyon']).pack(anchor='w', padx=20, pady=2)

    portal_ven_vars['portal_biliopati'] = tk.IntVar()
    tk.Checkbutton(scrollable_frame, text="Portal biliopati ile uyumlu bulunan bulgular izlenmiştir.", variable=portal_ven_vars['portal_biliopati']).pack(anchor='w', padx=20, pady=2)

    # En altta butonları eklemek için yeni bir çerçeve (ana pencerenin dışında)
    buton_frame = tk.Frame(pencere)
    buton_frame.pack(side='bottom', pady=10)

    # KAYDET ve KAPAT butonları
    def metin_toplama_kutucugu_goster():
        metin_toplama_kutucugu = tk.Toplevel()
        metin_toplama_kutucugu.title("Metin Toplama Kutucuğu")
        metin_toplama_kutucugu.geometry("800x600+800+500")  # Daha büyük bir pencere

        metin_toplama_kutucugu_text = tk.Text(metin_toplama_kutucugu, wrap=tk.WORD)
        metin_toplama_kutucugu_text.pack(expand=True, fill='both')

        # Metin Oluşturma
        cumleler = []

        # I. Hepatik Venler Bölümü
        if hepatik_ven_vars['normal_boyut'].get():
            cumleler.append("Hepatik venler normal boyutlardadır.")
        if hepatik_ven_vars['ivc_genis'].get():
            cumleler.append("Hepatik venler ve konfluens düzeyinde IVC geniştir.")
        if hepatik_ven_vars['kollabe'].get():
            cumleler.append("Hepatik venler kollabedir.")
        if hepatik_ven_vars['regurjitasyon'].get():
            cumleler.append("RA düzeyinde opak madde IVC ve hepatik venlere regürjite olmuştur.")
        if hepatik_ven_vars['basilidir'].get():
            cumleler.append("Hepatik venler basılıdır.")
        if hepatik_ven_vars['budd_chiari'].get():
            cumleler.append("Hepatik venlerde konfluens seviyesinde dolum defektif olup Budd-Chiari sendromu yönünden değerlendirme önerilir.")
        if hepatik_ven_vars['shunt'].get():
            segment = hepatik_ven_vars['shunt_segment'].get()
            cumleler.append(f'Segment {segment} düzeyinde portosistemik shunt bulgusu izlendi.')

        # II. Portal Ven Bölümü

        # Ana portal ven
        if portal_ven_vars['ana_portal_secim'].get() == "normal":
            cumleler.append("Ana portal ven çapı normaldir.")
        elif portal_ven_vars['ana_portal_secim'].get() == "olcum":
            boyut = portal_ven_vars['ana_portal_boyut'].get()
            cumleler.append(f"Ana portal ven çapı {boyut} mm'dir.")

        # Splenik ven
        if portal_ven_vars['splenik_ven_secim'].get() == "normal":
            cumleler.append("Splenik ven çapı normaldir.")
        elif portal_ven_vars['splenik_ven_secim'].get() == "olcum":
            boyut = portal_ven_vars['splenik_ven_boyut'].get()
            cumleler.append(f"Splenik ven çapı {boyut} mm'dir.")

        # Venlerin patensi veya trombozu
        for ven_adi, var_prefix in ven_listesi:
            if portal_ven_vars[var_prefix].get():
                durum = portal_ven_vars[f"{var_prefix}_durum"].get()
                cumle = f'{ven_adi} {durum}.'
                cumleler.append(cumle)

        # Paraumblikal ven
        if portal_ven_vars['paraumblikal_ven'].get():
            durum = portal_ven_vars['paraumblikal_durum'].get()
            cumle = f'Paraumblikal ven {durum}.'
            cumleler.append(cumle)

        # Portal sisteme ait kollateraller
        if portal_ven_vars['kollateraller'].get():
            bolgeler = []
            for bolge_adi, var_name in kollateral_bolgeler:
                if portal_ven_vars[var_name].get():
                    bolgeler.append(bolge_adi)
            if bolgeler:
                bolge_metin = ', '.join(bolgeler)
                cumle = f'Portal sisteme ait {bolge_metin} kollateraller izlendi.'
                cumleler.append(cumle)
        if portal_ven_vars['ozefagus_varisleri'].get():
            cumleler.append("Özefagus varisleri yönünden ileri değerlendirme önerilir.")
        if portal_ven_vars['kavernoz_transformasyon'].get():
            cumleler.append("Portada kavernöz transformasyon izlendi.")
        if portal_ven_vars['portal_biliopati'].get():
            cumleler.append("Portal biliopati ile uyumlu bulunan bulgular izlenmiştir.")

        # Boş olmayan cümleleri birleştir
        final_metin = "\n".join([c for c in cumleler if c])

        metin_toplama_kutucugu_text.insert(tk.END, final_metin + "\n")

        # RAPORA EKLE Butonu
        def rapora_ekle():
            metin = metin_toplama_kutucugu_text.get('1.0', tk.END).strip()
            replace_zone_text('ZONE11', metin)
            metin_toplama_kutucugu.destroy()
            pencere.destroy()

        tk.Button(metin_toplama_kutucugu, text="RAPORA EKLE", command=rapora_ekle).pack(pady=5)

    tk.Button(buton_frame, text="KAYDET", command=metin_toplama_kutucugu_goster).pack(side='left', padx=10)
    tk.Button(buton_frame, text="KAPAT", command=pencere.destroy).pack(side='left', padx=10)


def degisiklik_sec(zone):
    if zone == "ZONE1":
        zone1_penceresi()
    elif zone == "ZONE2":
        zone2_penceresi()
    elif zone == "ZONE3":
        zone3_penceresi()
    elif zone == "ZONE4":
        zone4_penceresi()
    elif zone == "ZONE5":
        zone5_penceresi()
    elif zone == "ZONE6":
        zone6_penceresi()
    elif zone == "ZONE7":
        zone7_penceresi()
    elif zone == "ZONE8":
        zone8_penceresi()  # Burada zone8_penceresi() fonksiyonunu ekledik
    elif zone == "ZONE27":
        zone27_penceresi()
    elif zone == "ZONE9":
        zone9_penceresi()
    elif zone == "ZONE10":
        zone10_penceresi()
    elif zone == "ZONE11":
        zone11_penceresi()    
    else:
        messagebox.showinfo("Bilgi", f"{zone} için pencere henüz tanımlanmadı.")

def rapor_govdesi_olustur():
    """Tetkik ve kontrast seçimine göre raporun başlangıç gövdesini oluşturur."""
    metin_alani.delete('1.0', tk.END)

    # Başlık ve ilk satır seçimi tetkik ve kontrastlı ya da kontrastsız olarak ayarlanıyor
    if kontrast_var.get() == 'Kontrastlı':
        baslik = f"{tetkik_var.get()} BT Tetkiki\nİntravenöz kontrast madde verilerek gerçekleştirilen incelemede;\n"
    else:
        baslik = f"{tetkik_var.get()} BT Tetkiki\nİntravenöz kontrast madde verilmeden gerçekleştirilen incelemede;\n"

    metin_alani.insert(tk.END, baslik)

    # Seçilen tetkik türüne göre rapor oluştur
    zones = rapor_turleri[tetkik_var.get()]
    for zone in zones:
        zone_text = rapor_taban[zone]
        if zone_text.strip():  # Only insert if the text is not empty
            metin_alani.insert(tk.END, zone_text + "\n")

    # Butonları güncelle
    butonlari_yukle()


# Ana pencere
pencere = tk.Tk()
pencere.title("Rapor Düzenleyici")
pencere.geometry("1400x800")  # Pencereyi geniş ama daha uzun yap

# Sol tarafta tetkik ve kontrast seçimi
secim_frame = tk.Frame(pencere)
secim_frame.pack(side='left', padx=10, pady=10)

# Tetkik seçimi
tk.Label(secim_frame, text="Tetkik Seçiniz:").pack(anchor='w')
tetkik_var = tk.StringVar(value='Erkek Tüm Abdomen')
tk.Radiobutton(secim_frame, text="Erkek Tüm Abdomen", variable=tetkik_var, value='Erkek Tüm Abdomen').pack(anchor='w')
tk.Radiobutton(secim_frame, text="Kadın Tüm Abdomen", variable=tetkik_var, value='Kadın Tüm Abdomen').pack(anchor='w')
tk.Radiobutton(secim_frame, text="Toraks", variable=tetkik_var, value='Toraks').pack(anchor='w')
tk.Radiobutton(secim_frame, text="Toraks Üst Abdomen", variable=tetkik_var, value='Toraks Üst Abdomen').pack(anchor='w')
tk.Radiobutton(secim_frame, text="Üst Abdomen", variable=tetkik_var, value='Üst Abdomen').pack(anchor='w')

# Kontrast seçimi
tk.Label(secim_frame, text="Kontrast Seçiniz:").pack(anchor='w', pady=(10, 0))
kontrast_var = tk.StringVar(value='Kontrastlı')
tk.Radiobutton(secim_frame, text="Kontrastlı", variable=kontrast_var, value='Kontrastlı').pack(anchor='w')
tk.Radiobutton(secim_frame, text="Kontrastsız", variable=kontrast_var, value='Kontrastsız').pack(anchor='w')

# Rapor gövdesini oluşturma butonu
tk.Button(pencere, text="Şablonu Yükle", command=rapor_govdesi_olustur).pack(pady=5)

# Metin alanı
metin_alani = tk.Text(pencere, wrap=tk.WORD, width=120, height=20)  # Daha geniş ve daha kısa yapıldı
metin_alani.pack(padx=20, pady=5, expand=True, fill='both')

# Dinamik değişiklik butonları
buton_cerceve = tk.Frame(pencere)
buton_cerceve.pack(pady=5, fill='x')


# Buton düzenlemesi tetkik türüne göre
def butonlari_yukle():
    for widget in buton_cerceve.winfo_children():
        widget.destroy()

    buton_zonlari = {
        "ZONE1": "Tiroid-Thymus", "ZONE2": "Kardiyak", "ZONE3": "MPA ve Dalları", "ZONE4": "Aorta",
        "ZONE5": "Lenf nodları", "ZONE6": "Trakea ve bronşlar", "ZONE7": "Parankim", "ZONE8": "Plevra",
        "ZONE27": "Toraks Diğer",  # Moved here to control button order
        "ZONE9": "Karaciğer parankim", "ZONE10": "Karaciğer kitle", "ZONE11": "Karaciğer vasküler",
        "ZONE12": "IHSY", "ZONE13": "Koledok", "ZONE14": "Safra kesesi", "ZONE15": "Dalak",
        "ZONE16": "Pankreas", "ZONE17": "Sürrenal", "ZONE18": "Böbrek boyut", "ZONE19": "Böbrek kisti",
        "ZONE20": "Abdominal vasküler", "ZONE21": "Abdominal lenf nodu", "ZONE22": "Mesane",
        "ZONE23": "Prostat", "ZONE24": "Uterus", "ZONE25": "Overler", "ZONE26": "Vertebralar"
    }

    tetkik = tetkik_var.get()
    ilgili_zonlar = rapor_turleri[tetkik]
    # Rearranged ilgili_zonlar to control button order
    # We move ZONE27 to after ZONE8 in ilgili_zonlar
    if "ZONE27" in ilgili_zonlar:
        ilgili_zonlar.remove("ZONE27")
        index_of_zone8 = ilgili_zonlar.index("ZONE8")
        ilgili_zonlar.insert(index_of_zone8 + 1, "ZONE27")

    row = 0
    col = 0

    for zone in ilgili_zonlar:
        buton_adi = buton_zonlari.get(zone, zone)
        tk.Button(buton_cerceve, text=buton_adi, command=lambda z=zone: degisiklik_sec(z), width=15).grid(row=row,
                                                                                                          column=col,
                                                                                                          padx=5,
                                                                                                          pady=5)
        col += 1
        if col > 8:
            col = 0
            row += 1


# Uygulamanın başlangıcında butonları yükle
butonlari_yukle()

# Tetkik ve kontrast değişikliği durumunda butonları yenile
tetkik_var.trace_add('write', lambda *args: rapor_govdesi_olustur())
kontrast_var.trace_add('write', lambda *args: rapor_govdesi_olustur())

# Uygulamayı başlat
pencere.mainloop()
